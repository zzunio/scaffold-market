{
  "list": [{
    "name": "Da",
    "git_url": "git://github.com/liumin1128/CourseManagementSystem.git",
    "author": "liumin1128",
    "description": "这原本是我的毕业设计，做一个后台管理系统，一定程度上解决了某些问题，所以把他拿出来分享给大家。本系统使用基于Dva脚手架和antd框架，我只做了一些优化，大家可以参考下我的文件结构和开发方法。",
    "tags": ["react", "dva"],
    "coverPicture": "https://ucarecdn.com/08b38b68-4a72-4049-89f8-ad79f7944c88/",
    "readme": "No README",
    "deployedAt": "2017-06-29T08:40:23.865Z"
  }, {
    "coverPicture": "https://ucarecdn.com/8f1bb68c-2252-478a-b13c-ba9a380ac078/",
    "name": "ElementUIAdmin",
    "git_url": "git://github.com/xusenlin/ElementUIAdmin2.git",
    "author": "xusenlin",
    "description": "一个干净优雅的Element UI Admin模板",
    "tags": ["vue", "admin"],
    "deployedAt": "2020-06-22T06:37:12.245Z"
  }, {
    "name": "Library-reservation",
    "git_url": "git://github.com/MKitty/Library-reservation.git",
    "author": "MKitty",
    "description": "图书馆预约管理系统和小程序扫码预约后台（react写的后台这个版本没有action）",
    "tags": [],
    "coverPicture": "https://ucarecdn.com/dccd6275-8437-4522-9a13-99ab0dcf56dd/",
    "deployedAt": "2018-10-23T03:52:27.985Z"
  }, {
    "name": "Maple",
    "git_url": "git://github.com/liujian10/myBlog.git",
    "author": "liujian10",
    "description": "The repository of my blog",
    "tags": ["Blog", "demo"],
    "coverPicture": "https://ucarecdn.com/2bf261c3-6bb5-47fd-beec-1c7e4ba0f101/",
    "readme": "# React Redux Starter Kit\n\n[![Build Status](https://travis-ci.org/davezuko/react-redux-starter-kit.svg?branch=master)](https://travis-ci.org/davezuko/react-redux-starter-kit?branch=master)\n[![dependencies](https://david-dm.org/davezuko/react-redux-starter-kit.svg)](https://david-dm.org/davezuko/react-redux-starter-kit)\n[![devDependency Status](https://david-dm.org/davezuko/react-redux-starter-kit/dev-status.svg)](https://david-dm.org/davezuko/react-redux-starter-kit#info=devDependencies)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\nThis starter kit is designed to get you up and running with a bunch of awesome front-end technologies.\n\nThe primary goal of this project is to provide a stable foundation upon which to build modern web appliications. Its purpose is not to dictate your project structure or to demonstrate a complete real-world application, but to provide a set of tools intended to make front-end development robust, easy, and, most importantly, fun. Check out the full feature list below!\n\nFinally, This project wouldn't be possible without the help of our many contributors. What you see today is the product of hundreds changes made to keep up with an ever-evolving ecosystem. [Thank you](#thank-you) for all of your help.\n\n## Table of Contents\n1. [Requirements](#requirements)\n1. [Installation](#getting-started)\n1. [Running the Project](#running-the-project)\n1. [Project Structure](#project-structure)\n1. [Live Development](#local-development)\n    * [Hot Reloading](#hot-reloading)\n    * [Redux DevTools](#redux-devtools)\n1. [Routing](#routing)\n1. [Testing](#testing)\n    * [dirty-chai](#dirty-chai)\n1. [Building for Production](#building-for-production)\n1. [Deployment](#deployment)\n1. [Thank You](#thank-you)\n\n## Requirements\n* node `^5.0.0`\n* yarn `^0.23.0` or npm `^3.0.0`\n\n## Installation\n\nAfter confirming that your environment meets the above [requirements](#requirements), you can create a new project based on `react-redux-starter-kit` by doing the following:\n\n```bash\n$ git clone https://github.com/davezuko/react-redux-starter-kit.git <my-project-name>\n$ cd <my-project-name>\n```\n\nWhen that's done, install the project dependencies. It is recommended that you use [Yarn](https://yarnpkg.com/) for deterministic dependency management, but `npm install` will suffice.\n\n```bash\n$ yarn  # Install project dependencies (or `npm install`)\n```\n\n## Running the Project\n\nAfter completing the [installation](#installation) step, you're ready to start the project!\n\n```bash\n$ yarn start  # Start the development server (or `npm start`)\n```\n\nWhile developing, you will probably rely mostly on `yarn start`; however, there are additional scripts at your disposal:\n\n|`yarn <script>`    |Description|\n|-------------------|-----------|\n|`start`            |Serves your app at `localhost:3000`|\n|`build`            |Builds the application to ./dist|\n|`test`             |Runs unit tests with Karma. See [testing](#testing)|\n|`test:watch`       |Runs `test` in watch mode to re-run tests when changed|\n|`lint`             |[Lints](http://stackoverflow.com/questions/8503559/what-is-linting) the project for potential errors|\n|`lint:fix`         |Lints the project and [fixes all correctable errors](http://eslint.org/docs/user-guide/command-line-interface.html#fix)|\n\n## Project Structure\n\nThe project structure presented in this boilerplate is **fractal**, where functionality is grouped primarily by feature rather than file type. This structure is only meant to serve as a guide, it is by no means prescriptive. That said, it aims to represent generally accepted guidelines and patterns for building scalable applications. If you wish to read more about this pattern, please check out this [awesome writeup](https://github.com/davezuko/react-redux-starter-kit/wiki/Fractal-Project-Structure) by [Justin Greenberg](https://github.com/justingreenberg).\n\n```\n.\n├── build                    # All build-related code\n├── public                   # Static public assets (not imported anywhere in source code)\n├── server                   # Express application that provides webpack middleware\n│   └── main.js              # Server application entry point\n├── src                      # Application source code\n│   ├── index.html           # Main HTML page container for app\n│   ├── main.js              # Application bootstrap and rendering\n│   ├── normalize.js         # Browser normalization and polyfills\n│   ├── components           # Global Reusable Components\n│   ├── containers           # Global Reusable Container Components\n│   ├── layouts              # Components that dictate major page structure\n│   │   └── PageLayout       # Global application layout in which to render routes\n│   ├── routes               # Main route definitions and async split points\n│   │   ├── index.js         # Bootstrap main application routes with store\n│   │   ├── Home             # Fractal route\n│   │   │   ├── index.js     # Route definitions and async split points\n│   │   │   ├── assets       # Assets required to render components\n│   │   │   ├── components   # Presentational React Components\n│   │   │   └── routes **    # Fractal sub-routes (** optional)\n│   │   └── Counter          # Fractal route\n│   │       ├── index.js     # Counter route definition\n│   │       ├── container    # Connect components to actions and store\n│   │       ├── modules      # Collections of reducers/constants/actions\n│   │       └── routes **    # Fractal sub-routes (** optional)\n│   ├── store                # Redux-specific pieces\n│   │   ├── createStore.js   # Create and instrument redux store\n│   │   └── reducers.js      # Reducer registry and injection\n│   └── styles               # Application-wide styles (generally settings)\n└── tests                    # Unit tests\n```\n\n## Live Development\n\n### Hot Reloading\n\nHot reloading is enabled by default when the application is running in development mode (`yarn start`). This feature is implemented with webpack's [Hot Module Replacement](https://webpack.github.io/docs/hot-module-replacement.html) capabilities, where code updates can be injected to the application while it's running, no full reload required. Here's how it works:\n\n* For **JavaScript** modules, a code change will trigger the application to re-render from the top of the tree. **Global state is preserved (i.e. redux), but any local component state is reset**. This differs from React Hot Loader, but we've found that performing a full re-render helps avoid subtle bugs caused by RHL patching.\n\n* For **Sass**, any change will update the styles in realtime, no additional configuration or reload needed.\n\n### Redux DevTools\n\n**We recommend using the [Redux DevTools Chrome Extension](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd).**\nUsing the chrome extension allows your monitors to run on a separate thread and affords better performance and functionality. It comes with several of the most popular monitors, is easy to configure, filters actions, and doesn't require installing any packages in your project.\n\nHowever, it's easy to bundle these developer tools locally should you choose to do so. First, grab the packages from npm:\n\n```bash\nyarn add --dev redux-devtools redux-devtools-log-monitor redux-devtools-dock-monitor\n```\n\nThen follow the [manual integration walkthrough](https://github.com/gaearon/redux-devtools/blob/master/docs/Walkthrough.md).\n\n## Routing\nWe use `react-router` [route definitions](https://github.com/ReactTraining/react-router/blob/v3/docs/API.md#plainroute) (`<route>/index.js`) to define units of logic within our application. See the [project structure](#project-structure) section for more information.\n\n## Testing\nTo add a unit test, create a `.spec.js` file anywhere inside of `./tests`. Karma and webpack will automatically find these files, and Mocha and Chai will be available within your test without the need to import them. Here are a few important plugins and packages available to you during testing:\n\n### dirty-chai\n\nSome of the assertions available from [chai](chaijs.com) use [magical getters](http://chaijs.com/api/bdd/#method_true). These are problematic for a few reasons:\n\n1) If you mistype a property name (e.g. `expect(false).to.be.tru`) then the expression evaluates to undefined, the magical getter on the `true` is never run, and so your test silently passes.\n2) By default, linters don't understand them and therefore mark them as unused expressions, which can be annoying.\n\n[Dirty Chai](https://github.com/prodatakey/dirty-chai) fixes this by converting these getters into callable functions. This way, if mistype an assertion, our attempt to invoke it will throw due to the property being undefined.\n\n```js\n// This silently passes because the getter on `true` is never invoked!\nit('should be true', () => {\n  expect(false).to.be.tru // evalutes to undefined :(\n})\n\n// Much better! Our assertion is invalid, so it throws rather than implicitly passing.\nit('should be true', () => {\n  expect(false).to.be.tru() // `tru` is not defined!\n})\n```\n\n## Building for Production\n\n## Deployment\n\nOut of the box, this starter kit is deployable by serving the `./dist` folder generated by `yarn build`. This project does not concern itself with the details of server-side rendering or API structure, since that demands a more opinionated structure that makes it difficult to extend the starter kit. The simplest deployment strategy is a [static deployment](#static-deployments).\n\n### Static Deployments\n\nServe the application with a web server such as nginx by pointing it at your `./dist` folder. Make sure to direct incoming route requests to the root `./dist/index.html` file so that the client application will be loaded; react-router will take care of the rest. If you are unsure of how to do this, you might find [this documentation](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#configuring-your-server) helpful. The Express server that comes with the starter kit is able to be extended to serve as an API and more, but is not required for a static deployment.\n\n## Thank You\n\nThis project wouldn't be possible without help from the community, so I'd like to highlight some of its biggest contributors. Thank you all for your hard work, you've made my life a lot easier and taught me a lot in the process.\n\n* [Justin Greenberg](https://github.com/justingreenberg) - For all of your PR's, getting us to Babel 6, and constant work improving our patterns.\n* [Roman Pearah](https://github.com/neverfox) - For your bug reports, help in triaging issues, and PR contributions.\n* [Spencer Dixon](https://github.com/SpencerCDixon) - For your creation of [redux-cli](https://github.com/SpencerCDixon/redux-cli).\n* [Jonas Matser](https://github.com/mtsr) - For your help in triaging issues and unending support in our Gitter channel.\n\nAnd to everyone else who has contributed, even if you are not listed here your work is appreciated.\n",
    "deployedAt": "2017-11-01T04:11:58.085Z"
  }, {
    "coverPicture": null,
    "name": "React-AntD-PWA",
    "git_url": "git://github.com/akshaycj/react-antd-starter.git",
    "author": "akshaycj",
    "description": "Starter skeleton for ReactJS + Ant Design + React-Router + PWA  with Configurartions and compatibility with CRA 2.0",
    "tags": ["react", "antd", "pwa", "starter"],
    "deployedAt": "2020-05-14T19:34:44.182Z"
  }, {
    "name": "React-SPA",
    "git_url": "git://github.com/allan2coder/React-SPA.git",
    "author": "allan2coder",
    "description": "基于React redux，适合中大型规模应用开发，注释还算详细，内含ant design 3.x(antd)，fetch接口请求等。",
    "tags": ["react", "redux", "antd"],
    "coverPicture": "https://ucarecdn.com/554a9eb8-fecb-45ea-9c5d-ba8b7eed8759/",
    "readme": "# React-app（使用过程碰到问题请随时提 issues）\n\nThis project was bootstrapped with Create React App.(注：该项目同样适合移动端)\n\n* React+Redux+Fetch+es6+Ant Design 3.x\n* Mock\n* eslint\n\n\n## ScreenShots\n\n![image](https://raw.githubusercontent.com/allan2coder/React-SPA/master/screenshot/login.png)\n\n![image](https://raw.githubusercontent.com/allan2coder/React-SPA/master/screenshot/main.png)\n\n![image](https://raw.githubusercontent.com/allan2coder/React-SPA/master/screenshot/redux_devTools.png)\n\n\n## Development\n\n* 环境准备妥当之后，把项目 clone 下来，切换到对应分支。安装项目依赖：\n\n```\ngit clone https://github.com/allan2coder/React-SPA.git\ncd React-SPA\nnpm install\n```\n\n* 启动项目(mock 也会同时开启,这里还没开启)\n\n```\n// 此命令同时执行： npm run dev和npm run server(开启mock服务，代理到远程mock数据并跨域)\nnpm start\n```\n\n* 打包项目\n\n```\nnpm run build\n```\n\n* 发布到 gh-pages（线上分支名称）\n\n```\ngit subtree push --prefix=build origin gh-pages // build完提交静态资源到gh-pages分支发布\n```\n\n\n## Why Redux\n\n![image](https://raw.githubusercontent.com/allan2coder/React-SPA/master/screenshot/why-redux.jpg)\n\n## Code Standard：\n\n#### 一、接口相关\n\n* 接口地址统一存放 src/app/config\n* 使用的是 whatwg-fetch，然后在此基础上埋了一些方法，用于处理一些后端返回的东西。（数据层／业务层分离）\n* state 状态存储：\n  * 组建内部 state 就写内部;\n  * 需要共享的 state 用 redux 存 store\n\n```\nimport cFetch from '../../utils/cFetch';\ncFetch(‘url’, { method: 'POST', body: formData })\n    .then(res => {\n    // write code\n    })\n```\n\nOr\n\n```\nimport { fetchInfoUrl } from '../../actions/yourPath/';\n\n...\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        fetchInfoUrl\n    }, dispatch)\n});\n\n...\n\ncomponentWillMount() {\n    this.props.actions.fetchInfoUrl();\n}\n```\n\n* 请求接口配置文件在 `script/server.js` 中\n\n```\n//  mock数据入口\n// 可以配合Mogodb, 开启服务后配置下面的host指向mock服务器的host\nyield proxy(\n    {\n        host: 'http://localhost:2016/',\n        match: /(\\/路径含有的某个关键词\\/)/\n    }\n );\n```\n\n## Reference\n\n* Ant Design of React [地址]https://ant.design/docs/react/introduce-cn\n* Create-react-app [地址]https://github.com/facebookincubator/create-react-app\n* How to perform common tasks [地址]https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-the-public-folder\n",
    "deployedAt": "2018-03-03T15:23:08.401Z"
  }, {
    "name": "React-cli",
    "git_url": "git://github.com/tuiche000/React-cli.git",
    "author": "tuiche000",
    "description": "基于React和antd的脚手架",
    "tags": ["antd", "react", "redux", "admin", "webpack"],
    "coverPicture": "https://ucarecdn.com/4c3c91b6-6f1d-4ad8-87bd-7cf675de16b6/",
    "deployedAt": "2018-12-03T08:59:48.490Z"
  }, {
    "name": "ReactAntd",
    "git_url": "git://github.com/2425358736/ReactAntd.git",
    "author": "2425358736",
    "description": "React + Antd（阿里组件库） 基于阿里dva官方脚本架",
    "tags": ["react", "antd"],
    "coverPicture": "https://ucarecdn.com/c79a4113-5d91-4341-83cd-d89df86e276a/",
    "readme": "# ReactAntd\nReact+ Antd（阿里组件库）\n",
    "deployedAt": "2017-09-19T06:59:28.213Z"
  }, {
    "coverPicture": "https://ucarecdn.com/fa45f531-e1c6-40b7-aaab-43949e17165d/",
    "name": "Sword",
    "git_url": "git://github.com/chillzhuang/Sword.git",
    "author": "chillzhuang",
    "description": "SpringBlade前端UI项目，基于react 、ant design、dva、umi，用于快速构建系统中后台业务。 ",
    "tags": [],
    "deployedAt": "2019-03-18T06:36:20.772Z"
  }, {
    "name": "VUE2-SPA-Tutorial",
    "git_url": "git://github.com/allan2coder/VUE2-SPA-Tutorial.git",
    "author": "allan2coder",
    "description": "Vue2.x, Vue-Router, axios, webpack( 剩下的让你自由发挥,注释还算详细！含有组件通信、ajax等)",
    "tags": ["Vue", "axios", "SPA"],
    "coverPicture": "https://ucarecdn.com/d8354afd-6eb1-47b7-9fc1-adae18f6e19d/",
    "readme": "# Vue2-SPA\n> A Vue.js project with axios/vue-router/webpack\n\n\n## Live Demo\nThe live demo can be found in [https://allan2coder.github.io/VUE2-SPA-Tutorial/](https://allan2coder.github.io/VUE2-SPA-Tutorial/) (移动端，打开浏览器开发者工具并调到手机窗口浏览。注：该项目同时适合PC端)\n\n\n## How to use\nYou should clone the repo and install the dependencies, and then npm start.That is all.\n\n```bash\n$ git clone https://github.com/allan2coder/VUE2-SPA-Tutorial.git\n$ cd VUE2-SPA-Tutorial\n$ npm install\n```\nThen launch the project app.\n\n```bash\n$ npm start\n```\n\nYou should see a new browser tap opening and a page of 'index.html' in http://localhost:8080.\n\n## How to build the static files\n\n``` bash\nnpm run build\n```\n\n## [Lifecycle](http://www.jianshu.com/p/e9f884b6ba6c)\n![image](https://raw.githubusercontent.com/allan2coder/VUE2-SPA-Tutorial/master/screenShot/lifecycle.png)\n\n\n## Router\n\nHTML\n``` bash\n\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\n<template>\n    <!-- 使用 router-link 组件来导航. -->\n    <!-- 通过传入 `to` 属性指定链接. -->\n    <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->\n    <p>\n      <router-link to=\"/foo\">Go to Foo</router-link>\n      <router-link to=\"/bar\">Go to Bar</router-link>\n    </p>\n    <!-- 路由出口 -->\n    <!-- 路由匹配到的组件将渲染在这里 -->\n    <router-view></router-view>\n  </div>\n</template>\n\nor\n\n<script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/vue-router\"></script>\n\n<div id=\"app\">\n  <p>\n    <router-link to=\"/foo\">Go to Foo</router-link>\n    <router-link to=\"/bar\">Go to Bar</router-link>\n  </p>\n  <router-view></router-view>\n</div>\n```\n\nJavaScript\n``` bash\n\n// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 vue.use(vuerouter)\n\n// 1. 定义（路由）组件。\n// 可以从其他文件 import 进来\nconst Foo = { template: '<div>foo</div>' }\nconst Bar = { template: '<div>bar</div>' }\n\n// 2. 定义路由\n// 每个路由应该映射一个组件。 其中\"component\" 可以是\n// 通过 Vue.extend() 创建的组件构造器，\n// 或者，只是一个组件配置对象。\nconst routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n]\n\n// 3. 创建 router 实例，然后传 `routes` 配置\n// 你还可以传别的配置参数, 不过先这么简单着吧。\nconst router = new VueRouter({\n  routes // （缩写）相当于 routes: routes\n})\n\n// 4. 创建和挂载根实例。\n// 记得要通过 router 配置参数注入路由，\n// 从而让整个应用都有路由功能\nconst app = new Vue({\n  router\n}).$mount('#app')\n\n// 现在，应用已经启动了！\n```\n\n### 生产环境要注意的地方：\n\n> 1、生产环境下若项目不是放在服务器的根目录下会访问不到静态资源，此时，你只需要修改下config文件夹内index.js的build中的assetsPublicPath即可\n\n```\nbefore：\nassetsPublicPath: '/', \n```\n```\nafter:\nassetsPublicPath: '/wx/otherPath/static', \n```\n\n> 2、在写静态资源的时候最好使用相对路径，如：\n\n```\nerror:\nbackground: url(../assets/img/icon.png);\n```\n```\nright:\nbackground: url(./../assets/img/icon.png);\n```\n\n\n## Other SPA(其他单页)\n- [React.js 2.x](https://github.com/allan2coder/React-SPA) :fire: :fire: :fire:\n- [Angularjs 2.x](https://github.com/allan2coder/Angular2-SPA)\n\n\n# Reference Articles\n* [Vue-Router](http://router.vuejs.org/zh-cn/essentials/getting-started.html)\n* [ECMAScript 6入门](http://es6.ruanyifeng.com/)\n* [Webpack 入门指迷](https://segmentfault.com/a/1190000002551952)\n* [webpack使用优化](https://github.com/lcxfs1991/blog/issues/2)\n* [vue guide](http://vuejs-templates.github.io/webpack/)\n* [docs for vue-loader](http://vuejs.github.io/vue-loader)\n",
    "deployedAt": "2018-03-03T15:35:05.420Z"
  }, {
    "name": "acgnfuns-app",
    "git_url": "git://github.com/sppsun/acgnfuns-app.git",
    "author": "sppsun",
    "description": "A react native app based on expo, dva, etc.",
    "tags": ["react-native", "expo", "dva", "react-native-elements"],
    "coverPicture": "https://ucarecdn.com/d6f0e87b-a2a5-4226-84e6-639cb08fc0ab/",
    "deployedAt": "2019-02-02T06:30:08.290Z"
  }, {
    "name": "acgnfuns-mobile",
    "git_url": "git://github.com/sppsun/acgnfuns-mobile.git",
    "author": "sppsun",
    "description": "A mobile app based on react, antd-mobile, umi, etc.",
    "tags": ["react", "antd-mobile", "umi", "mock"],
    "coverPicture": "https://ucarecdn.com/a8be595b-2a26-4cfa-ba96-995f4e2a3619/",
    "deployedAt": "2019-02-02T06:55:18.311Z"
  }, {
    "name": "angular-material-dashboard",
    "git_url": "git://github.com/wangdicoder/angular-material-dashboard.git",
    "author": "wangdicoder",
    "description": "a material-design dashboard by using angular",
    "tags": ["angular", "material design", "dashboard"],
    "coverPicture": "https://ucarecdn.com/d69daca4-550d-485c-b297-d93323a5bdbe/",
    "readme": "# Angular2 Material Dashboard Pro\n\nMaterial-design Dashboard\n\n## How to run it\n\n**- please ensure you have installed angular cli, otherwise `npm install -g @angular/cli`**\n\n1. git clone https://github.com/wangdicoder/angular-material-dashboard\n2. cd angular-material-dashboard\n3. npm install\n4. ng serve -o (it will automatically open localhost:4200)\n\n## Further Plan\n- [ ] Add Wizard Component\n- [ ] Responsive Sidebar\n- [ ] Consolidate form elements, like switch\n\n## Screenshot\n\n### Dashboard\n\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/dashboard.png)\n\n### Login\n\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/login.png)\n\n### Register\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/register.png)\n\n### Lock\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/lock.png)\n\n### User Profile\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/profile.png)\n\n### Sweet Alert\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/sweetalert.gif)\n\n### Notification\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/notification.gif)\n\n### Settings\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/settings.gif)\n\n### Table\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/table.png)\n\n### Price\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/price.png)\n\n### Panels\n![](https://github.com/wangdicoder/angular2-material-dashboard-pro/raw/master/screenshot/panel.png)\n\n## Acknowledge \n\n- [Creative Tim](https://github.com/creativetimofficial)\n- [Sweet Alert 2](https://github.com/limonte/sweetalert2)\n- [Bootstrap Notify](http://bootstrap-notify.remabledesigns.com)\n\n## License\n\nMIT\n",
    "deployedAt": "2017-07-14T05:42:30.495Z"
  }, {
    "name": "ant-design-boilerplate",
    "git_url": "git://github.com/espinacs/ant-design-boilerplate.git",
    "author": "espinacs",
    "description": "ES6 Ant-Design React boilerplate",
    "tags": [],
    "coverPicture": null,
    "readme": "# ES6 React Ant Design boilerplate using Webpack\r\n\r\n[![Travis](https://img.shields.io/travis/KleoPetroff/react-webpack-boilerplate/master.svg?style=flat-square)](https://github.com/espinacs/ant-design-boilerplate) \r\n\r\nJust and example of ant-design working in React 16: \r\n\r\n\r\n## Starting the dev server\r\n\r\nMake sure you have the latest Stable or LTS version of Node.js installed.\r\n\r\n1. `git clone https://github.com/espinacs/ant-design-boilerplate`\r\n2. Run `npm install` or `yarn install`\r\n3. Start the dev server using `npm start`\r\n3. Open [http://localhost:8080](http://localhost:8080)\r\n\r\n## Available Commands\r\n\r\n- `npm start` - start the dev server\r\n- `npm clean` - delete the dist folder\r\n- `npm run production` - create a production ready build in `dist` folder\r\n- `npm run lint` - execute an eslint check\r\n- `npm test` - run all tests\r\n- `npm run test:watch` - run all tests in watch mode\r\n- `npm run coverage` - generate code coverage report in the `coverage` folder\r\n\r\nAlso, precommit and prepush are both enabled to check all the code is linted and tested.\r\n\r\n## About the architecture\r\n\r\nAlthough this application is really simple (just fetch data, list and filter it) it has a pretty complete architecture, as detailed:\r\n\r\n#### REACT - View Rendering\r\n\r\n[React](https://reactjs.org/) is just the way to display the stored info. Mainly, there's a Main container that dispatches both fetch and filtering events, and at the same times renders the SearchBar (self component) and the Ant Desing Table\r\n\r\n#### REDUX-SAGA - Fetching Data\r\n\r\n[Redux-Saga](https://github.com/redux-saga/redux-saga) is the agent dedicated to fetch data from the server, and dispatches the convenient Redux events with fetched data or errors.\r\n\r\nThis is only a layer that could be changed, for example, by an Apollo GraphQL interface.\r\n\r\n#### REDUX - State Management\r\n\r\n[Redux](https://github.com/reactjs/redux) stores part of the state of the application (a part from the one that each component/containers handles for itself).\r\n\r\n#### RESELECT - Serving Data\r\n\r\nComponents are not subscribed directly to the Redux state. Instead, they only get data from the Redux state through [Reselect](https://github.com/reactjs/reselect) selectors.\r\n\r\nThis way, components/containers and redux are absolutely decoupled, and any other State Manager (Flux, for example) could be used, like any other components library (Vue.js, for example)\r\n\r\n#### Ant Design - Stlyed Components Library\r\n\r\n[Ant Design](https://ant.design/) Gives to the project a small style boost!\r\n\r\n## Code Coverage\r\n\r\nThe project is using the Jest Code Coverage tool. The reports are generated by running `npm run coverage`. All configurations are located in `package.json`, inside the `jest` object.\r\n\r\nThe coverage report consists of an HTML reporter, which can be viewed in the browser and some helper coverage files like the coverage json and xml file.\r\n\r\n## Production code\r\n\r\nRun `npm run production`. The production-ready code will be located under `dist` folder.\r\n\r\n## Licence\r\n\r\n_ant-design-boilerplate_ is available under MIT.\r\n",
    "deployedAt": "2018-03-24T07:04:55.364Z"
  }, {
    "name": "ant-design-pro",
    "git_url": "git://github.com/ant-design/ant-design-pro.git",
    "author": "ant-design",
    "description": "👻🎃 An out-of-box UI solution for enterprise applications",
    "tags": ["antd", "react", "dva"],
    "coverPicture": "https://ucarecdn.com/1e822d77-1729-452a-93bc-48be6cc2c9b3/",
    "readme": "简体中文 | [English](./README.en-US.md)\n\n# Ant Design Pro\n\n[![](https://img.shields.io/travis/ant-design/ant-design-pro.svg?style=flat-square)](https://travis-ci.org/ant-design/ant-design-pro) [![Gitter](https://badges.gitter.im/ant-design/ant-design-pro.svg)](https://gitter.im/ant-design/ant-design-pro?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n开箱即用的中台前端/设计解决方案。\n\n![](https://gw.alipayobjects.com/zos/rmsportal/xEdBqwSzvoSapmnSnYjU.png)\n\n- 预览：http://preview.pro.ant.design\n- 首页：http://pro.ant.design\n- 使用文档：http://pro.ant.design/docs/getting-started\n- 常见问题：http://pro.ant.design/docs/faq\n\n## 特性\n\n- :gem: **优雅美观**：基于 Ant Design 体系精心设计\n- :triangular_ruler: **常见设计模式**：提炼自中后台应用的典型页面和场景\n- :rocket: **最新技术栈**：使用 React/dva/antd 等前端前沿技术开发\n- :iphone: **响应式**：针对不同屏幕大小设计\n- :art: **主题**：可配置的主题满足多样化的品牌诉求\n- :globe_with_meridians: **国际化**：内建业界通用的国际化方案\n- :gear: **最佳实践**：良好的工程实践助您持续产出高质量代码\n- :1234: **Mock 数据**：实用的本地数据调试方案\n- :white_check_mark: **UI 测试**：自动化测试保障前端产品质量\n\n## 模板\n\n```\n- Dashboard\n  - 分析页\n  - 监控页\n  - 工作台\n- 表单页\n  - 基础表单页\n  - 分步表单页\n  - 高级表单页\n- 列表页\n  - 查询表格\n  - 标准列表\n  - 卡片列表\n  - 搜索列表（项目/应用/文章）\n- 详情页\n  - 基础详情页\n  - 高级详情页\n- 结果\n  - 成功页\n  - 失败页\n- 异常\n  - 403 无权限\n  - 404 找不到\n  - 500 服务器出错\n- 帐户\n  - 登录\n  - 注册\n  - 注册成功\n```\n\n## 使用\n\n```bash\n$ git clone git@github.com:ant-design/ant-design-pro --depth=1\n$ cd ant-design-pro\n$ npm install\n$ npm start         # 访问 http://localhost:8000\n```\n\n或者你可以使用集成化的 [ant-design-pro-cli](https://github.com/ant-design/ant-design-pro-cli) 工具。\n\n更多信息请参考 [使用文档](http://pro.ant.design/docs/getting-started)。\n\n## 兼容性\n\n现代浏览器及 IE11。\n\n## 参与贡献\n\n我们非常欢迎你的贡献，你可以通过以下方式和我们一起共建 :smiley:：\n\n- 在你的公司或个人项目中使用 Ant Design Pro。\n- 通过 [Issue](http://github.com/ant-design/ant-design-pro/issues) 报告 bug 或进行咨询。\n- 提交 [Pull Request](http://github.com/ant-design/ant-design-pro/pulls) 改进 Pro 的代码。\n",
    "deployedAt": "2018-08-18T18:27:11.512Z"
  }, {
    "name": "ant-design-pro-vue",
    "git_url": "git://github.com/sendya/ant-design-pro-vue.git",
    "author": "sendya",
    "description": "👨🏻‍💻👩🏻‍💻 Use Ant Design Vue like a Pro! Demo: https://pro.loacg.com",
    "tags": ["vue", "antd", "antd-pro"],
    "coverPicture": "https://ucarecdn.com/3538f9ed-1b3a-4817-9f5e-2f880568fd37/",
    "deployedAt": "2018-11-30T09:35:13.642Z"
  }, {
    "name": "antd-admin",
    "git_url": "git://github.com/zuiidea/antd-admin.git",
    "author": "zuiidea",
    "description": "A admin dashboard application demo built upon Ant Design and Dva.js",
    "tags": ["react", "antd"],
    "coverPicture": "https://ucarecdn.com/3ba3280c-a0c0-4a8b-a2e3-ba38148121b6/",
    "readme": "# Antd Admin\n\n[![React Native](https://img.shields.io/badge/react-^15.4.1-brightgreen.svg?style=flat-square)](https://github.com/facebook/react)\n[![Ant Design](https://img.shields.io/badge/ant--design-^2.7.3-yellowgreen.svg?style=flat-square)](https://github.com/ant-design/ant-design)\n[![dva](https://img.shields.io/badge/dva-^1.1.0-orange.svg?style=flat-square)](https://github.com/dvajs/dva)\n\n[![GitHub issues](https://img.shields.io/github/issues/zuiidea/antd-admin.svg?style=flat-square)](https://github.com/zuiidea/antd-admin)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/zuiidea/antd-admin/pulls)\n[![MIT](https://img.shields.io/dub/l/vibe-d.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com)\n\n演示地址 <http://zuiidea.github.io/antd-admin/>\n\n备用地址 <http://47.92.30.98:8000>\n\n\n## 特性\n\n-   基于[react](https://github.com/facebook/react)，[ant-design](https://github.com/ant-design/ant-design)，[dva](https://github.com/dvajs/dva)，[Mock](https://github.com/nuysoft/Mock) 企业级后台管理系统最佳实践\n-   基于[Mock](https://github.com/nuysoft/Mock)实现脱离后端独立开发\n-   基于Antd UI 设计语言，提供后台管理系统常见使用场景\n-   基于[dva](https://github.com/dvajs/dva)动态加载 Model 和路由，按需加载\n-   浅度响应式设计\n\n## 注意\n如果使用到roadhog，且出现接口404\n-  保证`package.json`里没有`roadhog`\n-  删除`node_modules`\n- `npm i`\n- `npm i roadhog@0.6.0-beta.3 -g`\n\n## 更新日志\n\n### 4.2\n`2017-04-28`\n\n-   修改user相关API使用`Restful`风格\n-   增加user页面多条件查询[#266](https://github.com/zuiidea/antd-admin/issues/226)\n-   修复菜单默认高亮[#201](https://github.com/zuiidea/antd-admin/issues/201)\n\n`2017-04-21`\n\n-   重写Menu，Bread组件及配置文件，[说明](https://github.com/zuiidea/antd-admin/wiki/%E8%8F%9C%E5%8D%95%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)\n\n### 4.1\n\n`2017-04-14`\n\n-   升级开发工具为[roadhog](https://github.com/sorrycc/roadhog)\n-   使用`roadhog`的mock功能\n-   增强`utils/request.js`跨域处理能力\n\n## 开发构建\n\n### 目录结构\n\n```bash\n├── /mock/           # 数据mock的接口文件\n├── /dist/           # 项目输出目录\n├── /src/            # 项目源码目录\n│ ├── /components/   # UI组件及UI相关方法\n│ │ ├── skin.less    # 全局样式\n│ │ └── vars.less    # 全局样式变量\n│ ├── /routes/       # 路由组件\n│ │ └── app.js       # 路由入口\n│ ├── /models/       # 数据模型\n│ ├── /services/     # 数据接口\n│ ├── /utils/        # 工具函数\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── menu.js      # 侧边菜单配置\n│ │ ├── mock.js      # 数据拦截配置\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── request.js   # 异步请求函数\n│ │ └── theme.js     # 项目需要在js中使用到样式变量\n│ ├── route.js       # 路由配置\n│ ├── index.js       # 入口文件\n│ └── index.html     \n├── package.json     # 项目信息\n└── proxy.config.js  # 数据mock配置\n```\n\n文件夹命名说明:\n\n-   components：组件（方法）为单位以文件夹保存，文件夹名组件首字母大写（如`DataTable`），方法首字母小写（如`layer`）,文件夹内主文件与文件夹同名，多文件以`index.js`导出对象（如`./src/components/Layout`）\n-   routes：页面为单位以文件夹保存，文件夹名首字母小写（特殊除外，如`UIElement`）,文件夹内主文件以`index.js`导出，多文件时可建立`components`文件夹（如`./src/routes/dashboard`），如果有子路由，依次按照路由层次建立文件夹（如`./src/routes/UIElement`）\n\n### 快速开始\n\n克隆项目文件:\n\n    git clone https://github.com/zuiidea/antd-admin.git\n\n进入目录安装依赖:\n\n    npm i 或者 yarn install\n    npm i roadhog@0.6.0-beta.3 -g\n\n开发：\n\n```bash\nnpm run dev    # 使用mock拦截请求，数据存储在localStroge里\n\n打开 http://localhost:8000\n```\n\n构建：\n\n```bash\nnpm run build\n\n将会生成dist目录\n```\n\n代码检测：\n\n```bash\nnpm run lint\n```\n\n## 参考\n\n用户列表：<https://github.com/dvajs/dva/tree/master/examples/user-dashboard>\n\ndashboard设计稿：<https://dribbble.com/shots/3108122-Dashboard-Admin> （已征得作者同意）\n\n## 截屏\n\nweb\n\n![](assets/demo4.gif)\n\n移动\n\n![](assets/demo3.gif)\n",
    "deployedAt": "2019-12-11T02:35:01.495Z"
  }, {
    "name": "antd-admin-boilerplate",
    "git_url": "git://github.com/myqianlan/antd-admin-boilerplate.git",
    "author": "myqianlan",
    "description": "以 antd 为基础组件构建的一套中后台管理系统的基本架构模板",
    "tags": ["antd", "react"],
    "coverPicture": null,
    "readme": "# antd-admin-boilerplate\n以 antd 为基础组件构建的一套中后台管理系统的基本架构模板\n\n## 预览\n\nhttp://myqianlan.com/antd-admin-boilerplate/dist/#/login\n\n账户密码随便输入即可\n\n## 目的\n\n使用 antd 和 react 来构建中后台系统，从上家公司开始，已经用来构建过三四个系统了，这个算是沉淀下来的一些东西，放出来给大家参考参考吧。\n\n## 技术栈\n\n- react\n- antd\n- webpack\n- es6(babel)\n\n## 兼容性\n\n原则上支持 IE9+ 及现代浏览器\n\n## 环境\n\n- node 4 LTS 版本\n- npm 建议 3+\n- webpack 1+\n\n> npm 建议使用cnpm, 通过设置 alias 的方式;(在私有npm还没搭建起来的时候)\n\n## 开发\n\n```bash\n\n    cpm install -g webpack webpack-dev-server\n\n    cnpm install\n\n    npm run dev\n\n```\n### 设置 api 代理\n\n可在 webpack.dev.config.js 里面的 devServer 配置项设置 api 代理\n\n## 其他\n\n其他功能问题请阅读本项目源代码，或者提 issue\n\n## 鸣谢\n\n其中很多代码参考了前同事范峻植的最初版本，在此表示感谢。\n\n## License\n\nMIT\n",
    "deployedAt": "2017-05-10T09:56:45.651Z"
  }, {
    "name": "antd-auto",
    "git_url": "git://github.com/niyingfeng/antd-auto.git",
    "author": "niyingfeng",
    "description": "基于ant design2.X，实现数据CURD完全配置化搭建CMS平台",
    "tags": ["cms"],
    "coverPicture": null,
    "readme": "# antd-auto  (文档创建中)\n\n前端自动化配置搭建CMS系统框架。解决前端CMS系统开发成本问题，释放前端开发资源。\n\n## 特性\n\n- 基于 dva 脚手架 [dva文档](https://github.com/dvajs/dva)\n- 基于 antd 2.0 UI组件 [ant.design文档](https://ant.design/docs/react/introduce)\n- 通过全局配置文件和页面配置文件，实现CMS系统的配置化开发\n- 开发与业务逻辑剥离，所见即所得，开发人员仅需提供数据以及传递数据，完全不涉及数据与UI操作上的处理\n- 特殊性功能可自实现开发处理\n\n## 项目介绍\n\n1. 实现前端只需提供数据便可以实现各种数据展现，包括table，simple objest，以及各类图形展现（引入echarts）\n2. 提供数据操作接口，前端只需关心数据的接受与传递，便可以实现数据的增删改查，而无需再关心CMS内部的实现。暂时实现 table数据的增删改查，simple object数据的修改等\n3. 在以上全自动话的基础上，可以实现自定义组装页面，目前功能包括，图片上传组件（需要正对自己项目调整接口），富文本编辑器（Tinymce），复制功能，antd UI 组件等。\n\n## Start\n\n克隆本项目，npm install 安装依赖，npm start 开始本地调试项目 开启 http://localhost:8989/便可以看到整体 DEMO 项目\n\n## Build\nnpm Build 开始构建压缩\n如果 alicdn 对部分域名有访问限制，或者需要内网环境使用 在部署上线的时候需要注意下载字体自行部署\n本项目修改 index.less 的 @font-face 即可\n\n![image](http://image.freefe.cc/20161201144536.png)\n\n## 目录结构\n\n```bash\n├── /mock/           # mock的接口文件 \n├── /dist/           # 项目构建输出目录\n├── /src/            # 项目开发源码目录\n│ ├── /components/   # 项目组件\n│ │ ├── /common/     # 通用集成组件\n│ │ ├── /feature/    # 页面配置文件 （主要配置文件）\n│ │ ├── /login/      # 登录组件\n│ │ ├── /header/     # 头部组件\n│ │ ├── /main/       # 主体组件\n│ │ └── /sider/      # 边栏组件\n│ │ \n│ ├── /routes/       # 路由组件\n│ ├── /utils/        # 工具函数\n│ ├── router.jsx     # 路由配置\n│ ├── index.jsx      # 入口文件\n│ ├── index.less     # 样式主体文件\n│ ├── config.js      # 全局配置文件（主要配置文件）\n│ └── index.html   \n│   \n├── package.json     # 项目信息\n└── proxy.config.js  # 数据mock配置\n```\n\n## 功能列表\n- [ ] 登录页面\n- [x] table数据\n    - [x] 展现配置化实现\n    - [x] 查询配置化实现\n    - [x] 新增配置化实现\n    - [x] 更新配置化实现\n    - [x] 删除配置化实现\n- [x] 对象数据\n    - [x] 展现配置化实现\n    - [x] 更新配置化实现\n- [x] 可视化图表\n    - [x] 基于echarts的数据可视化配置实现\n- [x] 富文本编辑器\n- [x] 通用图片上传组件（须自行调整）\n- [x] 复制粘贴功能\n\n\n## 整站配置文件详解\n\n### src/config.js\n\n需配置整体的后台系统数据，以及自定义的配置数据\n\n**header 管理系统头部配置(必要属性)**\n\n* title    管理系统显示的标题\n* icon     管理系统显示的icon可在 [icon](https://ant.design/components/icon/) 查看\n* style    自定义设置头部样式\n\n```\n// header 示例 \nheader: {\n    title: \"测试配置管理后台\",\n    icon: \"appstore\",\n    style: {\n        padding: \"15px 15px 15px 25px\",\n        borderBottom: \"1px solid #E9E9E9\",\n        backgroundColor: \"#F5F5F5\"\n    }\n}\n```\n\n![image](http://image.freefe.cc/20161205140700.png)\n    \n**sider  管理后台侧栏配置(必要属性)**\n\n* menu  sider列表 实现单层or多层级展现\n    - title   展现的title\n    - key     sider中对应的选项（若为菜单主项，则在openKeys中使用选择是否打开，若为功能项，则对应 selectedKey，以及 main 中 components 值）\n    - icon    展现的icon选项（可选）\n    - items   功能栏目列表（可选 可设置多层结构）\n\n* openKeys      默认展开的sider主导航项目（对应menu项目主栏目中的key）\n* selectedKey   默认打开的目标功能页面key（对应menu项目功能栏目中的key）\n* style         自定义样式\n\n```\n// sider 边栏导航配置示例 \nsider: {\n    // 层级列表\n    menu: [\n        {   \n            // 多级\n            title: \"导航1\", // 主导航名称\n            key: \"subTitle1\",\n            icon: \"setting\",\n            items: [\n                {title: \"选项1\", key: \"Feature1\"},\n                {title: \"选项2\", key: \"Feature2\"},\n                {title: \"选项3\", key: \"Feature3\"},\n                {   \n                    title: \"导航3\",\n                    key: \"subTitle3\",\n                    icon: \"\",\n                    items: [\n                        {title: \"选项6\", key: \"Feature6\"},\n                        {title: \"选项7\", key: \"Feature7\"},\n                        {title: \"选项8\", key: \"Feature8\"}\n                    ]\n                }\n            ]\n        },{\n            // 单级\n            title: \"选项5\",\n            key: \"Feature5\"\n        }\n    ],\n    // 默认打开的导航项目\n    openKeys:['subTitle1'],\n\n    // 默认功能页\n    selectedKey: \"Feature1\",\n\n    // 自定义样式\n    style: {\n        backgroundColor: \"#F5F5F5\"\n    }\n}\n```\n\n![image](http://image.freefe.cc/20161205140735.png)\n\n**main  功能区域配置**\n\n* components    配置sider对应功能区域组件\n    - FeatureKey     Object  对应sider menu 中的功能key对应功能组件\n\n* title           功能区域标题显示名称\n* component       加载对应功能区域的feature模块\n* style         配置样式  \n\n```\n// main 示例 \nmain: {\n    components: {\n        // key 值对应 sider item中功能选项的 key\n        \"Feature1\": { \n            // 功能区域标题显示名称\n            title: 'table 数据展示',\n            // require 加载对应功能区域的feature模块\n            component: require('./components/feature/Feature1')\n        },\n        \"Feature2\": {\n            title: 'simple对象 数据展示',\n            component: require('./components/feature/Feature2')\n        }\n    },\n    style: {\n        backgroundColor: \"#F5F5F5\"\n    } \n}\n```\n\n![image](http://image.freefe.cc/20161205140757.png)\n\n**整体示例代码**\n\n```\n// header 示例 \nheader: {\n    title: \"测试配置管理后台\",\n    icon: \"appstore\",\n    style: {\n        padding: \"15px 15px 15px 25px\",\n        borderBottom: \"1px solid #E9E9E9\",\n        backgroundColor: \"#F5F5F5\"\n    }\n}\n\n// sider 边栏导航配置示例 \nsider: {\n    // 层级列表\n    menu: [\n        {   \n            // 多级\n            title: \"导航1\", // 主导航名称\n            key: \"subTitle1\",\n            icon: \"setting\",\n            items: [\n                {title: \"选项1\", key: \"Feature1\"},\n                {title: \"选项2\", key: \"Feature2\"},\n                {title: \"选项3\", key: \"Feature3\"},\n                {   \n                    title: \"导航3\",\n                    key: \"subTitle3\",\n                    icon: \"\",\n                    items: [\n                        {title: \"选项6\", key: \"Feature6\"},\n                        {title: \"选项7\", key: \"Feature7\"},\n                        {title: \"选项8\", key: \"Feature8\"}\n                    ]\n                }\n            ]\n        },{\n            // 单级\n            title: \"选项5\",\n            key: \"Feature5\"\n        }\n    ],\n    // 默认打开的导航项目\n    openKeys:['subTitle1'],\n\n    // 默认功能页\n    selectedKey: \"Feature1\",\n\n    // 自定义样式\n    style: {\n        backgroundColor: \"#F5F5F5\"\n    }\n}\n\n// main 示例 \nmain: {\n    components: {\n        // key 值对应 sider item中功能选项的 key\n        \"Feature1\": { \n            // 功能区域标题显示名称\n            title: 'table 数据展示',\n            // require 加载对应功能区域的feature模块\n            component: require('./components/feature/Feature1')\n        },\n        \"Feature2\": {\n            title: 'simple对象 数据展示',\n            component: require('./components/feature/Feature2')\n        }\n    },\n    style: {\n        backgroundColor: \"#F5F5F5\"\n    } \n}\n```\n\n### src/components/feature/Feature.js\n\n**配置单独功能页面的配置文件**\n\n* table数据，单例数据，图标型数据的展现\n* 查询、创建、更新、删除表单自动化处理\n* 富文本编辑器功能使用\n* 独立的图片上传组件使用\n* 表单元素自定义使用\n\n**必要参数**\n\n* type  (string)    对于数据展现形式, 目前有 tableList graphList simpleObject 三种类型\n\n```\n// 对于数据展现形式 目前有 tableList graphList simpleObject 三种类型        \ntype: 'tableList', // tableList graphList simpleObject complexObject \n```\n\n* initData  (function)    初始化展现的数据,参数 callback 用于接受获取的数据\n\n```\n// 初始化展现的数据，使用callback 回传列表数据\n// 需要手动添加唯一id key\n// callback 组件数据的回调函数(接受列表数据参数)\ninitData: function(callback){\n    // 同步或者异步获取原始数据\n    // 数据需要确认唯一的 key（react 形式）\n    // 若是 table 类型 则每一条数据均需要唯一的 key\n    data.key = data.id;\n    callback(data);\n}\n```\n\n* pageData (function) 接口分页数据处理\n        \n        // 接口分页处理\n        // callback 回传列表数据 第二参数接受 总数与每页数目\n        // 需要手动添加唯一id key\n        pageData: function(num, callback){\n            Reqwest({\n                url: '/api/example2',\n                data: {\n                    page:num,\n                    pageSize: 20\n                },\n\n                type: 'json',\n                success: function (data) {\n                    let list = data.data;\n                    list.forEach(function(ele) {\n                        ele.key = ele.id;\n                    });\n                    // 回调的第二个参数为数量总数 以及每页的数量\n                    callback(list, {\n                        total: 399,\n                        pageSize: 20\n                    });\n                }\n            });\n        }\n\n**table类型 展现数据**\n\n* columns   (Array)     数据展现类型为 tableList时，设置table表头字段设置\n\n```\n// table 列表展现配置\n// {\n//      title       table显示表题\n//      dataIndex   显示数据中的key\n//      type        展现形式 （string image link）\n//      render      自定义展现形式 参数 （当前数据，当前对象数据）\n//      sort        是否需要排序功能\n//      width       自定义该列宽度 否则等分\n// }\ncolumns: [\n    {\n        title: 'DOCID',     // table header 文案\n        dataIndex: 'docid', // 数据对象内的属性，也做react vdom 的key\n        type: 'string',     // table 内显示的类型\n        sort: true,         // 是否需要排序\n        width:200,\n        render: (text, item) => ( <span>\n                                <a href={text}>{item.name}</a>\n                            </span>),\n    },\n    // type为operate含有特殊含义 自动化的更新与删除，以及自定义操作回调函数\n    // 为特殊的操作字段\n    {\n        title: '操作',\n        type: 'operate',    // 操作的类型必须为 operate\n        width: 120,\n        btns: [{\n                text: '更新',\n                type: 'update'\n            },{\n                text: '删除',\n                type: 'delete'\n            }, {\n                text: '展示',\n                callback: function(item){\n                    console.log(item)\n                }\n            }, {\n                render: (text, item) => (<CopyClipboard title='复制链接' type='link' data={item.url} />)\n            }\n        }]\n    }\n]\n```\n\n![image](http://image.freefe.cc/20161205141002.png)\n\n**table类型 查询更新列表数据**\n\n* RType    Array   展现的填写表单的数据字段。类型含有示例中的形式\n\n```\n// table 查询字段\n// {\n//      name        字段的name值\n//      label       字段的展现内容\n//      type        字段类型 （string date select cascader radio checkbox switch imageUpload）\n//      placeholder input的placeholder内容\n// }\nRType: [\n    {\n        name: 'id',\n        label: '唯一标识',\n        type: 'string',\n        placeholder: '请输入标示名称'\n    },{\n        name: 'date',\n        label: '项目开始时间',\n        type: 'date'\n    },{\n        name: 'stype',\n        label: '项目类型Select',\n        type: 'select',\n        defaultValue: 'one',\n        options:[{\n            text: '选项一',\n            value: 'one'\n        },{\n            text: '选项二',\n            value: 'two'\n        },{\n            text: '选项三',\n            value: 'three'\n        }]\n    },{\n        name: 'rtype',\n        label: '项目类型Radio',\n        type: 'radio',\n        defaultValue: 'one',\n        options:[{\n            text: '选项一',\n            value: 'one'\n        },{\n            text: '选项二',\n            value: 'two'\n        },{\n            text: '选项三',\n            value: 'three'\n        }]\n    },{\n        name: 'ischange',\n        label: '是否过滤',\n        type: 'switch',\n        defaultValue: false\n    }\n\n]\n```\n\n* Retrieve    function    对于确认创建数据接口上报创建回调的函数\n\n```\nRetrieve: function(data, callback){\n    // 处理对于列表查询的数据请求\n    console.log(data);\n    \n    // 查询成功之后执行callback回调\n    // 同步或者异步获取原始数据\n    // 数据需要确认唯一的 key（react 形式）\n    // 若是 table 类型 则每一条数据均需要唯一的 key\n    list.key = list.id;\n    callback(list);\n}\n```\n\n![image](http://image.freefe.cc/20161205141035.png)\n\n**table类型 创建数据**\n\n当数据类型为table 并且含有创建新数据的需求时\n\n* CType    Array   展现的填写表单的数据字段。类型含有示例中的形式\n\n``` \n// table 创建新数据字段\n// {\n//      name        字段的name值\n//      label       字段的展现内容\n//      type        字段类型 （string date select cascader radio checkbox switch imageUpload）\n//      placeholder input的placeholder内容\n// }\nCType: [\n    {\n        name: 'docid',\n        label: '唯一标识',\n        type: 'string',\n        placeholder: '请输入标示名称'\n    },{\n        name: 'date',\n        label: '日期',\n        type: 'date'\n    },{\n        name: 'img',\n        label: '图片',\n        type: 'imageUpload'\n    }\n]\n```\n\n* Create    function    对于确认创建数据接口上报创建回调的函数\n\n```\nCreate: function(data, callback){\n    // 处理对于数据请求的创建\n    console.log(data);\n    \n    // 创建成功之后执行callback回调\n    callback();\n}\n```\n\n![image](http://image.freefe.cc/20161205141101.png)\n\n**table类型 更新数据**\n\n当数据类型为table 并且含有更新数据的需求时\n\n* UType    Array   展现的填写表单的数据字段。类型含有示例中的形式（类似创建数据）\n\n```  \n// table 更新数据字段\n// {\n//      name        字段的name值\n//      label       字段的展现内容\n//      type        字段类型 （string date select cascader radio checkbox switch imageUpload）\n//      placeholder input的placeholder内容\n// }\nCType: [\n    {\n        name: 'docid',\n        label: '唯一标识',\n        type: 'string',\n        placeholder: '请输入标示名称'\n    },{\n        name: 'date',\n        label: '日期',\n        type: 'date'\n    },{\n        name: 'img',\n        label: '图片',\n        type: 'imageUpload'\n    }\n]\n``` \n\n* Update    function    对于确认创建数据接口上报创建回调的函数\n\n```\nUpdate: function(data, callback){\n    // 处理对于数据请求的更新\n    console.log(data);\n    \n    // 更新成功之后执行callback回调\n    callback();\n}\n```\n\n![image](http://image.freefe.cc/20161205141248.png)\n\n**table类型 删除数据**\n\n当数据类型为table 并且含有更新数据的需求时\n\n* Delete    function    对于确认删除某条数据实例\n\n```\nDelete: function(data, callback){\n    // 删除操作\n    console.log(data);\n\n    Reqwest({\n        url: '/api/delete',\n        data: data.id,\n\n        type: 'json',\n        success: function (data) {\n            // 模拟请求删除成功的回调\n            callback();\n        }\n    });\n       \n}\n```\n\n![image](http://image.freefe.cc/20161205141337.png)\n\n\n## 其他组件\n\n### 图片上传组件（需自定义调整）\n\n### 复制文本组件\n\n### 富文本编辑器组件（Tinymce基础功能接入）\n\n### echarts 组件接入\n\n\n## 学习文档\n\n[ES6 react 实践的技术图](https://github.com/dvajs/dva-knowledgemap)\n\n[dva 完成一个中型应用](https://github.com/dvajs/dva-docs/blob/master/v1/zh-cn/tutorial/01-%E6%A6%82%E8%A6%81.md)\n\n[系统引用的UI组件文档 Ant Design of React](https://ant.design/docs/react/introduce)\n\n\nbibibibi~ 改版中！！！！！！！！！！！！！！！！",
    "deployedAt": "2017-06-18T07:49:41.254Z"
  }, {
    "coverPicture": "https://ucarecdn.com/a476e06d-f812-4402-88e6-0f8eb1f7f379/",
    "name": "antd-custom",
    "git_url": "git://github.com/ctq123/antd-custom.git",
    "author": "ctq123",
    "description": "该基础框架采用第三方依赖包都是目前最新版本，结合antd的UI框架，实现主题定制，webpack自主配置，动态菜单路由设计，redux数据管理，国际化多语言，错误统一处理，本地mock服务等功能",
    "tags": ["antd", "react", "webpcak4", "redux", "redux-saga", "react-router4", "react-intl", "axios", "antd-custom"],
    "deployedAt": "2019-10-13T14:42:09.678Z"
  }, {
    "coverPicture": "https://ucarecdn.com/4adca557-d8f2-4ddb-92c1-8fb43ad70f9e/",
    "name": "antd-layout",
    "git_url": "git://github.com/1006223320/antd-layout.git",
    "author": "1006223320",
    "description": "antd-layout 最轻便的实现(特别适合pug爱好者)",
    "tags": ["pug", "jade", "stylus", "styl", "react", "layout", "antd", "react-router"],
    "deployedAt": "2019-08-16T09:47:36.112Z"
  }, {
    "coverPicture": "https://ucarecdn.com/8319d7ce-aa46-48ff-81d7-f6b40cde5857/",
    "name": "antd-pro-concent",
    "git_url": "git://github.com/concentjs/antd-pro-concent.git",
    "author": "concentjs",
    "description": "基于最新的js版本的antd-pro(v2.2.0)，将其改造成concent版本",
    "tags": ["concent", "react"],
    "deployedAt": "2019-08-28T05:07:26.735Z"
  }, {
    "coverPicture": "https://ucarecdn.com/f5debbeb-ab9d-4061-9ef0-e17039deb2af/",
    "name": "antd-pro-mobx",
    "git_url": "git://github.com/gzgogo/antd-pro-mobx.git",
    "author": "gzgogo",
    "description": "antd-pro的mobx版本",
    "tags": ["antd pro;mobx"],
    "deployedAt": "2019-04-09T09:14:31.081Z"
  }, {
    "name": "antd-redux",
    "git_url": "git://github.com/guox191/antd-redux.git",
    "author": "guox191",
    "description": "A complex spa boilerplate built with redux and ant-design",
    "tags": ["redux", "antd", "restful", "leancloud"],
    "coverPicture": null,
    "readme": "# antd-redux\n\nA react boilerplate built with redux and ant-design.\n\nUsing restful API powered by leancloud.\n\n### 初衷\n\n  中小型管理后台在工作室内部日常项目中已然标配, 并且大多数由后端负责，使用的模板良莠不齐，没有规范，甚至引入各种前端bug，不能保证开发效率。\n\n  Ant Design是蚂蚁金服为中后台开发的前端解决方案，同样是为了解决集团内的这类问题。\n  \n  管理后台的前端需求较为集中，大多为表单，图表，展示列表等业务组件，提高开发效率的关键是高效方便地配置与调动这些组件，减少与业务逻辑代码的耦合，让后端开发专注于后台逻辑的实现。\n\n### 原则\n\n- 贴合业务，适应灵活的业务需求\n- 方便配置，尽可能发挥 JSX 的优越性\n- 封装React路由，抽象成数据结构代码\n- 友好的状态展示，如各类请求的 message，process 等\n- 每个 JSX 文件包含一个主组件\n\n### 架构\n\n|结构|选型|\n|---|---|\n|View层|React|\n|路由|React-Router|\n|UI组件|Ant.design|\n|HTTP|[isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch)|\n|数据层|Redux|\n|Middleware|[redux-logger](https://github.com/fcomb/redux-logger) [redux-thunk](https://github.com/gaearon/redux-thunk)|\n\n### Dev\n\n1. `npm install`\n2. `npm run dev` 使用 dora 作为本地开发的 web 服务器监听 8001\n3. 登录账号: guest guest\n\n### Usage\n\nbuild完成后在项目入口文件中引入两个文件. 默认 webpack 配置将第三方库单独打包到 `vendor.bundle.js` 中, 部分非系统核心库采用 amd 方式在使用的时候异步引入.\n```\n  <script src=\"./vendor.bundle.js\"></script>\n  <script src=\"./index.js\"></script>\n```\n\n### 目录结构\n\n- actions\n- components\n- config\n  - app.js\n  - ...\n- constants\n  - actions.js\n  - ...\n- reducers\n  - auth.reducer.js\n  - message.reducer.js\n- routes\n- lib\n- index.jsx\n- router.jsx\n- store.js\n\n### 核心State\n\n  - message: 全局消息通知, 即 ant-design 的 message 组件\n\n    ```\n     {\n        \"message\": {},\n        \"notification\": {}\n     }\n    ```\n\n  - login\n  - loading\n\n### 语法特性\n\n项目中尝试性地通过 babel 引入 ES6/ES7 新特性和实用的语法糖, 旨在编写可读性好,简洁优雅的代码.\n\nES6:\n - Class\n - Arrow function\n - Module\n - let / const\n - Destructuring assignment\n - Spread operator\n\nES7:\n - Property initializer\n - Decorator\n\n\n### 参考文献\n\n  [Best practice on handling data flow for login / signup pages with redirect](https://github.com/reactjs/redux/issues/297)\n  [flux-standard-action](https://github.com/acdlite/flux-standard-action)\n",
    "deployedAt": "2017-05-12T12:49:50.300Z"
  }, {
    "name": "bear-admin",
    "git_url": "git://github.com/huzzbuzz/bear-admin.git",
    "author": "huzzbuzz",
    "description": "一个简洁的 antd-react-admin 应用。a clean antd-react-admin application",
    "tags": ["react", "antd", "create-react-app", "dva"],
    "coverPicture": "https://ucarecdn.com/ac39f621-e34a-4a13-b55a-505f25298408/",
    "readme": "![](https://github.com/huzzbuzz/bear-admin/blob/master/screenshot/logo-bear-black.jpg)                   \n\n> build upon create-react-app, reactjs, ant design, dva.js, webpack etc\n\n## [live demo](http://huzzbuzz.coding.me/bear-admin/)\n\nBear Admin，一个 JavaScript 应用，项目由业界最优秀的 React 应用开发工具 create-react-app 初始化创建， 搭配 Antd 开箱即用的高质量 React 组件和轻量级应用框架 Dva.js 一起，*非常适合后台产品*。\n\nBear Admin 同时也是个很好的前端脚手架学习示例，如果你在学习 React 或即将学习 React，它应该可以做为教程给你一些帮助。如果你准备使用 React 全家桶开发应用，它能够快速给你提供项目脚手架，为你节省前期部分工作。 让我们一起享受整个 React 生态圈和工具链带来的愉悦开发体验。\n\n在开始之前，推荐先学习 React、 ES2015、Node.js、Webpack 等知识，并正确安装和配置了 Node.js 环境。\n\n<hr />\n\n#### 技术栈            \n 👍🏻[create-react-app](https://github.com/facebookincubator/create-react-app)         \n 👍🏻[ant design](https://ant.design/index-cn)       \n 👍🏻[dva.js](https://github.com/dvajs/dva)     \n 👍🏻[react](https://facebook.github.io/react/)     \n 👍🏻[react-router](https://github.com/ReactTraining/react-router)      \n 👍🏻[webpack](https://webpack.js.org/concepts/)      \n 👍🏻[babel](https://babeljs.io/)     \n...       \n\n#### 特性       \n :yum:简洁的界面       \n :yum:菜单主题和布局切换       \n :yum:格栅布局，fully responsive       \n :yum:Code Splitting。after gzip，[首屏文件仅100多KB](https://github.com/huzzbuzz/bear-admin/blob/master/screenshot/filesize.png)，应用载入速度超快            \n :yum:高质量脚手架                 \n :yum:eject create-react-app 配置，按需定制                     \n :yum:支持更多语言特性和 polyfills，发现更多，请访问 [create-react-app](https://github.com/facebookincubator/create-react-app) 官网\n\n#### 开始\n1. 克隆源码       \n```\ngit clone https://github.com/huzzbuzz/bear-admin.git\n```\n\n2. 安装依赖         \n```\ncd bear-admin \nnpm i or yarn\n```\n\n3. 调试应用         \n```\nnpm start\n```\n\n4. 发布应用         \n```\nnpm run build\n```\n> it will builds the app for production to the build folder. your app is ready to be deployed.        \n\n\n#### 更多       \n\n如何处理异步请求？       \n如何统一处理出错？            \n如何 mock 数据？       \n更多实战，请参阅：\n   - [mockjs 文档](https://github.com/nuysoft/Mock/wiki)      \n   - [dva 文档](https://github.com/dvajs/dva)     \n   - [dva 知识地图](https://github.com/dvajs/dva-knowledgemap)\n   - [create-react-app 文档](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md)   \n   - [code splitting in create-react-app](http://serverless-stack.com/chapters/code-splitting-in-create-react-app.html)\n\n#### 致谢     \ncreate-react-app      \nreact 全家桶     \nantd 全家桶      \n\n:heartbeat::heartbeat: 欢迎 star 和 watch 支持 :heartbeat::heartbeat: \n\n<hr />     \n\n#### 顶部菜单\n![1](https://user-images.githubusercontent.com/16314691/29705003-bbcbd414-89ae-11e7-82df-1acd2a998324.jpg)\n#### 左侧菜单\n![2](https://user-images.githubusercontent.com/16314691/29705022-d5cb4d36-89ae-11e7-8ded-73f116e49e28.jpg)\n#### 黑色主题\n![3](https://user-images.githubusercontent.com/16314691/29705023-d5cbeb7e-89ae-11e7-8d38-ef003c73a6fc.jpg)\n#### 个人资料\n![4](https://user-images.githubusercontent.com/16314691/29705026-d5d1456a-89ae-11e7-9e1f-aad58ef1501e.jpg)\n#### Antd 图标&其他\n![5antd](https://user-images.githubusercontent.com/16314691/29705024-d5cdc7fa-89ae-11e7-9068-eb6f7e7ee656.jpg)\n#### 自定义表格\n![6](https://user-images.githubusercontent.com/16314691/29705025-d5cf6628-89ae-11e7-9548-67d076734642.jpg)\n#### 自适应\n![7](https://user-images.githubusercontent.com/16314691/29705027-d5deae62-89ae-11e7-82a2-e7dbd702d67d.jpg)\n#### Ant-Motion Logo 动画\n![8 ant](https://user-images.githubusercontent.com/16314691/29705202-9483fb74-89af-11e7-903a-f4b45b51f766.jpg)\n#### Ant-Motion 详细说明切换\n![9](https://user-images.githubusercontent.com/16314691/29705203-9494e63c-89af-11e7-9146-07a152e3c972.jpg)        \n\n\n:heartbeat::heartbeat: 欢迎 star 和 watch 支持 :heartbeat::heartbeat: \n",
    "deployedAt": "2017-08-29T07:14:42.919Z"
  }, {
    "name": "bird-front",
    "git_url": "git://github.com/liuxx001/bird-front.git",
    "author": "liuxx001",
    "description": "基于react、antd、antd-admin，封装常用数据组件，细粒度权限解决方案.",
    "tags": [],
    "coverPicture": "https://ucarecdn.com/39f49413-99aa-4fc9-9b0f-59cc7377a5b1/",
    "readme": "# bird-front\n\nbird-front是基于react的后台管理系统前端项目，框架构建部分严重借鉴于antd管理系统解决方案antd-admin，其项目地址：[https://github.com/zuiidea/antd-admin](https://github.com/zuiidea/antd-admin)。本项目对于权限部分进行了重新设计，支持按钮级的权限控制，同时封装了很多易用且功能强大的业务组件。\n\n## 权限方案\n\nbird-front对权限部分进行了重新设计，支持更细粒度的权限控制（按钮级）。前端的权限应该控制什么？**资源的可见性**。其包括：\n\n- 路由的可见性。\n- 页面中按钮的可见性。\n\n在登录时获取用户拥有的权限集合，在前端存储。\n\n- 路由可见性控制：路由变化时，进行权限判断，通过则渲染对应组件，否则渲染403组件。\n- 按钮的可见性控制：封装bird-button组件，传入按钮所需权限名，内部进行权限判断，通过则渲染按钮。\n\n前端的权限控制只能处理页面渲染，不能保证系统的绝对安全，服务端也需要对接口的权限进行验证。\n\n\n## 组件\n\nbird-front对常用的数据组件进行了封装，使其简单易用，包括：\n\n- 全自动数据表格：bird-grid。[查看文档](https://github.com/liuxx001/bird-front/blob/master/doc/bird-grid.md)\n- 全自动树表：bird-tree-grid。[查看文档](https://github.com/liuxx001/bird-front/blob/master/doc/bird-tree-grid.md)\n- 数据树：bird-tree。[查看文档](https://github.com/liuxx001/bird-front/blob/master/doc/bird-tree.md)\n- 全自动表单：bird-form。[查看文档](https://github.com/liuxx001/bird-front/blob/master/doc/bird-form.md)\n- 权限按钮：bird-button。[查看文档](https://github.com/liuxx001/bird-front/blob/master/doc/bird-button.md)\n- 下拉选择器：bird-selector。[查看文档](https://github.com/liuxx001/bird-front/blob/master/doc/bird-selector.md)\n- 多选组件：bird-multi。[查看文档](https://github.com/liuxx001/bird-front/blob/master/doc/bird-multi.md)\n- 级联组件：bird-cascader。[查看文档](https://github.com/liuxx001/bird-front/blob/master/doc/bird-cascader.md)\n\n所有业务组件的理念均是结合服务端接口进行组件的封装，兼顾灵活性的同时保证更优的业务开发速度。\n\n\n## 项目获取\n\n```\ngit clone https://github.com/liuxx001/bird-front\n```\n\n## 安装依赖包\n\n```\nnpm install\n```\n\n## 启动项目\n\n```\nnpm run start\n```\n\n登录名：admin\n登录密码：admin\n\n## 效果图\n![image](https://raw.githubusercontent.com/liuxx001/bird-front/master/doc/bird-admin.png)\n",
    "deployedAt": "2018-02-07T13:38:38.255Z"
  }, {
    "name": "blog2.x-mux-club",
    "git_url": "git://github.com/PhotoArtLife/blog2.x-mux-club.git",
    "author": "PhotoArtLife",
    "description": "🐷2.x blog | use dvajs、react and others quickly build a response blog.",
    "tags": ["react", "redux", "dva", "roadhog", "webpack", "mobile", "sass", "antd", "blog"],
    "coverPicture": "https://ucarecdn.com/f73e4175-29c5-43cf-9338-69ab5d5f4582/",
    "deployedAt": "2018-10-29T06:13:41.832Z"
  }, {
    "name": "blog3.x-mux-club",
    "git_url": "git://github.com/PhotoArtLife/blog3.x-mux-club.git",
    "author": "PhotoArtLife",
    "description": "🦊3.x blog | use UmiJS、DvaJS、Node.js.etc made a animate manage flex web.",
    "tags": ["umi", "dva", "sass", "mobile", "blog", "redux", "antd"],
    "coverPicture": "https://ucarecdn.com/4c04cb2f-32d7-4a3d-8de1-47ae04541bcb/",
    "deployedAt": "2018-10-18T07:42:27.365Z"
  }, {
    "name": "blogVue",
    "git_url": "git://github.com/xumjs8623/blogVue.git",
    "author": "xumjs8623",
    "description": null,
    "tags": ["vue", "blog"],
    "coverPicture": null,
    "readme": "# blog-vue\n\n> A Vue.js project\n\n## Build Setup\n\n``` bash\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n\n# build for production and view the bundle analyzer report\nnpm run build --report\n\n# run unit tests\nnpm run unit\n\n# run e2e tests\nnpm run e2e\n\n# run all tests\nnpm test\n```\n\nFor detailed explanation on how things work, checkout the [guide](http://vuejs-templates.github.io/webpack/) and [docs for vue-loader](http://vuejs.github.io/vue-loader).\n",
    "deployedAt": "2017-05-23T05:32:41.439Z"
  }, {
    "name": "chat",
    "git_url": "git://github.com/RaoHai/chat.git",
    "author": "RaoHai",
    "description": "A Chat Scaffold based on antd and dva:",
    "version": "",
    "tags": [],
    "coverPicture": "https://ucarecdn.com/c1a43345-d5ed-4167-875c-4680471903f2/",
    "readme": "# chat\nA Chat Scaffold based on antd and dva:\n\nScreenshots:\n-----\n\n![](https://cloud.githubusercontent.com/assets/566097/21448864/2dc1a59c-c922-11e6-9b80-726593d8163d.png)\n\n![](https://cloud.githubusercontent.com/assets/566097/21494490/f28c2eb0-cc4c-11e6-83b8-723ae1423328.png)\n\nFirebase Structure\n-----\n\n```\nroot: {\n  conversations: { // conversations\n    '-2h6WJbFPBxUs15iB15DnSAIRTyP2-1482823102860': {\n      participants: {\n        '2h6WJbFPBxUs15iB15DnSAIRTyP2': user,\n        '1482823102860': user\n      },\n      chats: {\n        '-KZzCufnRDtS4h0q9fL': {\n          content: '',\n          time: '',\n          user: {}\n        }\n      }\n    },\n    ...\n  },\n  user: { // online users\n    '2h6WJbFPBxUs15iB15DnSAIRTyP2': user,\n    ...\n  }\n}\n```\n\n\nInstall\n------\n\n```\ngit clone https://github.com/RaoHai/chat.git\ncd chat\nnpm install\nnpm start // enjoy :D\n\n```\n"
  }, {
    "name": "create-react-app-antd",
    "git_url": "git://github.com/ant-design/create-react-app-antd.git",
    "author": "ant-design",
    "description": "Use antd with create-react-app without ejecting",
    "tags": [],
    "coverPicture": null,
    "deployedAt": "2018-12-16T08:02:19.126Z"
  }, {
    "name": "create-react-app-antd-mobile-starter",
    "git_url": "git://github.com/xlsdg/create-react-app-antd-mobile-starter.git",
    "author": "xlsdg",
    "description": "Get started with create-react-app and antd-mobile.",
    "tags": ["create-react-app ", "antd", "mobile"],
    "coverPicture": null,
    "readme": "# create-react-app-antd-mobile-starter\n\n> Get started with create-react-app and antd-mobile.\n",
    "deployedAt": "2018-01-09T02:40:35.127Z"
  }, {
    "name": "create-react-app-antd-starter",
    "git_url": "git://github.com/xlsdg/create-react-app-antd-starter.git",
    "author": "xlsdg",
    "description": "Get started with create-react-app and antd.",
    "tags": ["create-react-app", "antd"],
    "coverPicture": null,
    "readme": "# create-react-app-antd-starter\n\n> Get started with create-react-app and antd.\n",
    "deployedAt": "2018-01-09T02:39:54.372Z"
  }, {
    "name": "create-react-app-antd-typescript-starter",
    "git_url": "git://github.com/xlsdg/create-react-app-antd-typescript-starter.git",
    "author": "xlsdg",
    "description": "Get started with create-react-app and antd.",
    "tags": ["create-react-app ", "antd", "typescript"],
    "coverPicture": null,
    "readme": "# create-react-app-antd-typescript-starter\nGet started with create-react-app and antd.\n",
    "deployedAt": "2018-01-09T02:41:09.583Z"
  }, {
    "coverPicture": null,
    "name": "create-umi",
    "git_url": "git://github.com/umijs/create-umi.git",
    "author": "umijs",
    "description": "Creates a UmiJS application using the command line.",
    "tags": [],
    "deployedAt": "2019-03-19T12:52:01.020Z"
  }, {
    "coverPicture": "https://ucarecdn.com/0278c3e3-fdca-4aef-9bf8-25b8e0d565ea/",
    "name": "d2-admin",
    "git_url": "git://github.com/d2-projects/d2-admin.git",
    "author": "d2-projects",
    "description": "优雅的管理系统前端模板",
    "tags": ["ElementUI", "vue", "vuex", "dashboard", "electron"],
    "deployedAt": "2020-04-14T17:41:23.162Z"
  }, {
    "coverPicture": "https://ucarecdn.com/d124400d-3ee0-4c02-948d-48831d853c47/",
    "name": "dashboard",
    "git_url": "git://github.com/zce/dashboard.git",
    "author": "zce",
    "description": "A dashboard scaffolding based on vue.js created by vuejs/vue-cli 3.x.",
    "tags": ["vue", "vue.js", "vuejs", "vuex", "vue-router", "element-ui"],
    "deployedAt": "2019-04-04T14:19:02.058Z"
  }, {
    "name": "duxianwei-react-spa",
    "git_url": "git://github.com/duxianwei520/react.git",
    "author": "duxianwei520",
    "description": "一个react+redux+webpack+ES6+antd的SPA的后台管理框架demo",
    "tags": ["react", "antd", "spa"],
    "coverPicture": "https://ucarecdn.com/00321714-ae38-468c-855a-2f2228457ca0/",
    "readme": "# 前言\n\n为什么选择react而不是vue也不是angular？\n\nng1.x老衲用过3个月，觉得整个框架组织结构更像是专门为系统指定的，要什么有什么，这样的话对于在线mobile app性能是个大的考验，还有一个不喜欢的点是他的写法更像是PHP哪种形式的绑定，比较总的后端思维在里面\n\nvue贫道也做过一个微信端的小项目，觉得还是比较容易上手的，1.x感觉跟ng1.x的思想上更加接近，但是对于开发app的话，没有weex也只能依赖于cordova之类的，觉得在性能上可能还是差了那么点意思，再有一个重要的点就是，主要是尤小溪个人的项目，虽然后面也有不少的人加入，但觉得精力还是太有限了。\n\n最后react可能是所有方案里面最合适最这种的一个技术栈了，不加全家桶的话，跟vue一样的轻量，移动端有比较成熟的react native。\n\nso，就是这个了\n\n\n## 技术栈\n\nreact + redux + react-router + webpack + ES6/7 + fetch + less + flex\n\n\n\n## 项目运行\n\n#### 注意：由于涉及大量的 ES6/7 等新属性，nodejs 必须是 6.0 以上版本 ，node 7 是先行版，有可能会出问题，建议使用 node 6 稳定版\n\n```\ngit clone https://github.com/duxianwei520/react.git  \n\ncd react （进入当前的项目）\n\nnpm install  (安装依赖包)\n\nnpm start (运行本地开发环境)\nnpm run build (打包)\n\nnode mockserver.js (前端本地用node模拟接口进程)\n\n```\n\n\n## 说明\n\n>  喜欢的别忘记了可以star一下的噢！ \n\n>  开发环境 win10  Chrome 58.0.3029.110  nodejs 6.2.0\n\n>  如果npm install太慢导致有些npm依赖包下载失败 你可以看控制台的报错信息，再手动npm install 具体的开发包，推荐使用淘宝的注册源，直接运行，\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org \n\n```\n如果这个方法还不行的话，可以到我的百度网盘上面去下载我已经压缩好的npm依赖包，地址是\n``` \nhttp://pan.baidu.com/s/1pLdPWgj\n\n```\n把下载到本地的node_modules.rar文件直接解压到跟app同级的当前文件夹，记住是当前文件夹的，然后不用npm install就可以直接npm start跑起来项目了。\n\n>  如有问题请直接在 Issues 中提，或者您发现问题并有非常好的解决方案，欢迎 PR 👍\n\n\n\n## 功能一览\n- [√] 项目按路由模块加载\n- [√] 登录，以及登录权限控制\n- [√] 退出\n- [√] 欢迎主页\n- [√] 左侧菜单，正常moni切换\n- [√] redux完整范例\n- [√] nodejs代理数据完全示例\n- [√] 页面高度flex自适应\n\n\n\n\n## 总结\n\n1、这整个技术栈是我们公司前端部门在用的，写熟悉了之后，用来做后台管理系统类的实在是很方便，大家都表示再也不要用jQuery来做这样子的系统了\n\n2、目前来说，不足的地方是在于没有很好的区分dev环境跟pro环境，这个后面弄好了再补充上来；mock数据现在还不是那么的方便，需要自己一个个的添加api的json文件\n\n\n\n\n## 部分截图\n\n\n### 登录页\n\n<img src=\"https://github.com/duxianwei520/react/blob/master/screenshots/login.png\" width=\"704\" height=\"561\"/> \n\n\n### 欢迎页\n\n<img src=\"https://github.com/duxianwei520/react/blob/master/screenshots/welcome.png\" width=\"1010\" height=\"566\"/>\n\n\n\n### 列表页\n\n<img src=\"https://github.com/duxianwei520/react/blob/master/screenshots/list.png\" width=\"1002\" height=\"582\"/>\n\n### 请求接口\n\n<img src=\"https://github.com/duxianwei520/react/blob/master/screenshots/requestData.png\" width=\"885\" height=\"590\"/>\n\n\n### 接口按返回\n\n<img src=\"https://github.com/duxianwei520/react/blob/master/screenshots/receiveData.png\" width=\"997\" height=\"586\"/>\n\n\n\n\n## 项目结构\n\n```\n.\n├─.babelrc                            // babel的配置\n├─.config.json                        // 如果使用了ip代理，那么配置文件在这里\n├─.eslintcache                        // eslint的缓存\n├─.eslintignore\t                      // eslint设置忽略的文件\n├─.eslintrc.json                      // eslint的配置文件\n├─.gitignore                          // git忽略上传的文件\n├─mockserver.js                       // node本地转发json的执行文件\n├─package.json                        // npm命令包\n├─proxy.js                            // 设置代理的js,现在基本不用\n├─readme.md                           // 项目介绍\n├─webpack-test.config.js              // webpack测试的配置文件，目前还没做\n├─webpack.config.js                   // 目前项目webpack的配置文件\n├─_config.yml \n├─_gitattributes\n├─test\n|  └setup-test-env.js\n├─screenshots                         // 项目截图\n|      ├─list.png\n|      ├─login.png\n|      ├─receiveData.png\n|      ├─requestData.png\n|      └welcome.png\n├─mockapi                             // 前端静态json数据存放的文件夹\n|    └data.json\n├─app                                 // 页面主文件\n|  ├─client.js\n|  ├─history.js\n|  ├─index.html                       // 入口html文件，配置静态菜单等全局常见变量\n|  ├─routes.js                        // 路由配置\n|  ├─utils                            // 公用的文件\n|  |   ├─ajax.js                      // 发送异步获取数据的配置\n|  |   ├─config.js                    // 常用的配置\n|  |   └index.js                      // 发送异步数据前的准备工作\n|  ├─style                            // 样式库\n|  |   ├─base.less                    // 全局通用的样式\n|  |   └theme.less                    // 存放变量的less\n|  ├─store                            // redux的store的配置\n|  |   └configureStore.js\n|  ├─reducers                         // reduce的配置\n|  |    ├─common.js\n|  |    ├─house.js\n|  |    ├─index.js\n|  |    └tabList.js\n|  ├─pages                            // 项目绝大部分业务文件\n|  |   ├─welcome.js\n|  |   ├─test\n|  |   |  ├─index.js\n|  |   |  ├─sub.js\n|  |   |  └third.js\n|  |   ├─house\n|  |   |   ├─houseManage.js\n|  |   |   └index.js\n|  ├─middleware                       \n|  |     ├─index.js\n|  |     ├─logger.js\n|  |     └router.js\n|  ├─images                           // 图片文件夹\n|  |   ├─default.png\n|  |   ├─leftBg.jpg\n|  |   └navcontrol.png\n|  ├─iconfont\n|  |    ├─iconfont.eot\n|  |    ├─iconfont.svg\n|  |    ├─iconfont.ttf\n|  |    └iconfont.woff\n|  ├─containers                       // 全局的框架文件 \n|  |     ├─App\n|  |     |  ├─extra.js\n|  |     |  ├─footer.js\n|  |     |  ├─header.js\n|  |     |  ├─index.js\n|  |     |  ├─login.js\n|  |     |  ├─rightAside.js\n|  |     |  ├─tabList.js\n|  |     |  ├─leftNav\n|  |     |  |    └index.js\n|  ├─constants\n|  |     ├─actionTypes.js\n|  |     └index.js\n|  ├─components                        // 公用的组件库 \n|  |     ├─index.less\n|  |     ├─searchTable\n|  |     |      └index.js\n|  |     ├─searchForm\n|  |     |     └index.js\n|  |     ├─searchChosen\n|  |     |      └index.js\n|  |     ├─multiSelect\n|  |     |      └index.js\n|  ├─api                              // 整个项目API的url配置\n|  |  ├─common.js\n|  |  ├─house.js\n|  |  └index.js\n|  ├─actions                          // 整个项目的actions配置\n|  |    ├─common.js\n|  |    ├─house.js\n|  |    └tabList.js\n\n\n```\n\n\n## License\n\n[GPL](https://github.com/duxianwei520/react/blob/master/COPYING)\n",
    "deployedAt": "2017-06-22T13:59:06.877Z"
  }, {
    "name": "dva-admin",
    "git_url": "git://github.com/pmg1989/dva-admin.git",
    "author": "pmg1989",
    "description": "dva admin antd dashboard",
    "tags": ["dva", "antd", "dashboard"],
    "coverPicture": "https://ucarecdn.com/52d0ac39-c14b-4d74-bb24-685104a24ca0/",
    "readme": "# dva-admin\n\n[![React Native](https://img.shields.io/badge/react-^15.4.1-brightgreen.svg?style=flat-square)](https://github.com/facebook/react)\n[![Ant Design](https://img.shields.io/badge/ant--design-^2.8.2-yellowgreen.svg?style=flat-square)](https://github.com/ant-design/ant-design)\n[![dva](https://img.shields.io/badge/dva-^1.1.0-orange.svg?style=flat-square)](https://github.com/dvajs/dva)\n\n[![GitHub issues](https://img.shields.io/github/issues/pmg1989/dva-admin.svg?style=flat-square)](https://github.com/pmg1989/dva-admin/issues)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/pmg1989/dva-admin/pulls)\n[![MIT](https://img.shields.io/dub/l/vibe-d.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n\n## 宗旨与目的\n\n- 期望打造一套基于[react](https://github.com/facebook/react)，[ant-design](https://github.com/ant-design/ant-design)，[dva](https://github.com/dvajs/dva)于一体的、企业级后台管理系统\n- 期望可以单纯由前端来解决用户权限，后端提供权限数据支持的一套完善的权限管理功能后台管理系统\n- 期望可以在antd与dva的基础上，再次封装简单且可复用的基类组件，方便使用者简单接入，简单使用，简单拓展\n\n## 演示地址\n\nhttps://pmg1989.github.io\n\n#### 登录账号\n\n-  管理员账号：admin，密码：admin\n-  游客账号：guest, 密码：guest\n- 由于gitpage是静态服务器，刷新后会出现404是正常现象，部署正式服务器即可，具体服务端配置可参见[dva issues 180](https://github.com/dvajs/dva/issues/180)\n\n## 特性\n\n- 基于[react](https://github.com/facebook/react)，[ant-design](https://github.com/ant-design/ant-design)，[dva](https://github.com/dvajs/dva)，[Mock](https://github.com/nuysoft/Mock) 企业级后台管理系统最佳实践\n- 基于[Mock](https://github.com/nuysoft/Mock)实现脱离后端独立开发\n- 基于Antd UI 设计语言，提供后台管理系统常见使用场景\n- 浅度响应式设计\n- webpack打包处理路由时，实现Javascript模块化按需动态dynamic加载\n- 已实现基本完善的权限管理功能\n- 完善的后端分页与前端分页功能\n- 封装好可扩展的上传控件与音视频控件\n- 已实现基于Tab面板的可切换式导航栏菜单\n\n## 开发及构建\n\n### 目录结构\n\n```bash\n├── /mock/           # 数据mock的接口文件\n├── /dist/           # 项目输出目录\n├── /src/            # 项目源码目录\n│ ├── /components/   # 项目组件\n│ │ ├── /common/     # 项目公共组件\n│ ├── /routes/       # 路由组件\n│ ├── /models/       # 数据模型\n│ ├── /services/     # 数据接口\n│ ├── /utils/        # 工具函数\n│ ├── route.js       # 路由配置\n│ ├── index.js       # 入口文件\n│ └── index.html     \n├── package.json     # 项目信息\n└── proxy.config.js  # 数据mock配置\n\n```\n\n### 快速开始\n\n克隆项目文件:\n\n```\ngit clone git@github.com:pmg1989/dva-admin.git\n```\n\n进入目录安装依赖:\n\n```\nnpm install 或者 yarn 或者 yarn install\n```\n\n开发：\n\n```bash\nnpm run dev    # 使用mock拦截请求，数据存储在localStroge里\n\n打开 http://localhost:8000\n```\n\n\n构建：\n\n```bash\n\nnpm run build-dev local环境发布\nnpm run build-staging staging 环境发布\nnpm run build-release release 环境发布\n\nbuild后的文件将会生成dist目录\n```\n\n### 注意事项\n\n- 生产环境中，如已有数据接口，请将`conf/webpack.config.js`中的 `webpackConfig.plugins 'newband.admin.isMock': true`改为false，以及 `src/utils/index.js`中的`export request from './request-mock'`改为`export request from './request'`\n- 切换`conf/webpack.config.js`中的`'newband.app.admin.IS_DYNAMIC_LOAD': true`,可以调整JavaScript是否动态按需加载\n- 开发环境中，如再mock目录新增文件，请在`src/utils/mock.js`第二行的`mockData`数组中添加\n- 如需重写antd样式配置，请修改`src/theme.js`\n- 项目配置文件在`src/utils/config.js`\n- 如需重写异步请求函数，请修改`src/utils/request.js`\n  （关于为什么使用axios而不是fetch：在一个无服务器的环境中模拟数据请求，[Mock](https://github.com/nuysoft/Mock)不能拦截Fetch，只能拦截XHR，所以我选了一个纯Ajax的库[axios](https://github.com/mzabriskie/axios)）\n\n### 特别感谢\n\nzuiidea: [https://github.com/zuiidea/antd-admin](https://github.com/zuiidea/antd-admin)\n\nsorrycc: [https://github.com/dvajs/dva-example-user-dashboard](https://github.com/dvajs/dva-example-user-dashboard)\n",
    "deployedAt": "2017-06-12T10:14:10.328Z"
  }, {
    "name": "dva-ant-admin",
    "git_url": "git://github.com/Mulgore/dva-ant-admin.git",
    "author": "Mulgore",
    "description": null,
    "tags": [],
    "coverPicture": "https://ucarecdn.com/0f862023-f249-42a8-b054-d655168a5839/",
    "readme": "# Antd Admin\n\n## 特性\n\n-   基于[react](https://github.com/facebook/react)，[ant-design](https://github.com/ant-design/ant-design)，[dva](https://github.com/dvajs/dva)，[Mock](https://github.com/nuysoft/Mock) 企业级后台管理系统最佳实践。\n-   基于Antd UI 设计语言，提供后台管理系统常见使用场景。\n-   基于[dva](https://github.com/dvajs/dva)动态加载 Model 和路由，按需加载。\n-   使用[roadhog](https://github.com/sorrycc/roadhog)本地调试和构建，其中Mock功能实现脱离后端独立开发。\n-   浅度响应式设计。\n\n\n### 目录结构\n\n```bash\n├── /dist/           # 项目输出目录\n├── /src/            # 项目源码目录\n│ ├── /components/   # UI组件及UI相关方法\n│ │ ├── skin.less    # 全局样式\n│ │ └── vars.less    # 全局样式变量\n│ ├── /routes/       # 路由组件\n│ │ └── app.js       # 路由入口\n│ ├── /models/       # 数据模型\n│ ├── /services/     # 数据接口\n│ ├── /themes/       # 项目样式\n│ ├── /mock/         # 数据mock\n│ ├── /utils/        # 工具函数\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── menu.js      # 菜单及面包屑配置\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── request.js   # 异步请求函数\n│ │ └── theme.js     # 项目需要在js中使用到样式变量\n│ ├── route.js       # 路由配置\n│ ├── index.js       # 入口文件\n│ └── index.html     \n├── package.json     # 项目信息\n├── .eslintrc        # Eslint配置\n└── .roadhogrc.js    # roadhog配置\n```\n\n文件夹命名说明:\n\n-   components：组件（方法）为单位以文件夹保存，文件夹名组件首字母大写（如`DataTable`），方法首字母小写（如`layer`）,文件夹内主文件与文件夹同名，多文件以`index.js`导出对象（如`./src/components/Layout`）。\n-   routes：页面为单位以文件夹保存，文件夹名首字母小写（特殊除外，如`UIElement`）,文件夹内主文件以`index.js`导出，多文件时可建立`components`文件夹（如`./src/routes/dashboard`），如果有子路由，依次按照路由层次建立文件夹（如`./src/routes/UIElement`）。\n\n### 快速开始\n\n克隆项目文件:\n\n    git clone git@github.com:Mulgore/dva-ant-admin.git\n\n进入目录安装依赖:\n\n    npm i 或者 yarn install\n\n开发：\n\n```bash\nnpm run dev\n打开 http://localhost:8000\n```\n\n构建：\n\n```bash\nnpm run build\n\n将会生成dist目录\n```\n\n代码检测：\n\n```bash\nnpm run lint\n```\n",
    "deployedAt": "2018-09-05T07:47:13.223Z"
  }, {
    "name": "dva-antd-admin",
    "git_url": "git://github.com/bowencool/dva-antd-admin.git",
    "author": "bowencool",
    "description": "路由(v4)、权限、菜单 强耦合案例",
    "tags": ["dva", "react-router-v4", "antd"],
    "coverPicture": "https://ucarecdn.com/45f29b7d-e3ef-42c0-92c7-2bd70463691d/",
    "readme": "No README",
    "deployedAt": "2018-04-07T07:22:46.791Z"
  }, {
    "name": "dva-antd-mobile-starter",
    "git_url": "git://github.com/xlsdg/dva-antd-mobile-starter.git",
    "author": "xlsdg",
    "description": "Get started with Dva.js and Ant Design mobile.",
    "tags": ["antd", "dva", "mobile"],
    "coverPicture": null,
    "readme": "# dva-antd-mobile-starter [![Build Status](https://travis-ci.org/xlsdg/dva-antd-mobile-starter.svg?branch=master)](https://travis-ci.org/xlsdg/dva-antd-mobile-starter)\n\n> Get started with Dva.js and Ant Design mobile.\n\n![Screen Shot](screenshot.png)\n",
    "deployedAt": "2017-05-24T12:14:31.221Z"
  }, {
    "name": "dva-antd-starter",
    "git_url": "git://github.com/xlsdg/dva-antd-starter.git",
    "author": "xlsdg",
    "description": "Get started with Dva.js and Ant Design.",
    "tags": ["dva", "antd"],
    "coverPicture": "https://ucarecdn.com/8602e133-b80f-4616-bbc8-f8cba40b6254/",
    "readme": "# dva-antd-starter [![Build Status](https://travis-ci.org/xlsdg/dva-antd-starter.svg?branch=master)](https://travis-ci.org/xlsdg/dva-antd-starter)\n\n> Get started with Dva.js and Ant Design.\n\n![Screen Shot](screenshot.png)\n",
    "deployedAt": "2017-05-24T12:15:35.432Z"
  }, {
    "name": "dva-antd-typescript-starter",
    "git_url": "git://github.com/xlsdg/dva-antd-typescript-starter.git",
    "author": "xlsdg",
    "description": "Get started with Dva.js and Ant Design.",
    "tags": ["dva", "antd", "typescript"],
    "coverPicture": null,
    "readme": "# dva-antd-typescript-starter [![Build Status](https://travis-ci.org/xlsdg/dva-antd-typescript-starter.svg?branch=master)](https://travis-ci.org/xlsdg/dva-antd-typescript-starter)\n\n> Get started with Dva.js and Ant Design.\n",
    "deployedAt": "2018-01-09T02:38:28.669Z"
  }, {
    "name": "dva-boot",
    "git_url": "git://github.com/LANIF-UI/dva-boot.git",
    "author": "LANIF-UI",
    "description": "基于 create-react-app 构建的 dva 2 脚手架 支持动态路由、按功能分层",
    "tags": ["antd", "react", "dva", "react-router-v4", "mvc", "code-splitting", "create-react-app"],
    "coverPicture": "https://ucarecdn.com/372d196c-750f-4229-ac98-6f828074a5c1/111.gif",
    "deployedAt": "2018-03-21T12:04:57.693Z"
  }, {
    "name": "dva-boot-admin",
    "git_url": "git://github.com/LANIF-UI/dva-boot-admin.git",
    "author": "LANIF-UI",
    "description": "基于react生态系统的高级后台管理解决方案 Admin UI",
    "tags": ["admin", "admin-dashboard", "dva-admin", "dva-boot", "ant-design", "dva", "dashboard", "ui", "boilerplate", "react-ui"],
    "coverPicture": "https://ucarecdn.com/e108404b-11db-4f62-adab-f6907eba19ba/",
    "readme": "# :beginner: DVA-BOOT-ADMIN\n\n我们使用React生态系统的最成熟的技术体系，搭建的一套开箱即用的后台管理系统，框架里包含了DBA中独有的定制组件，以及许多经过大量实践口碑良好的第三方组件，它不仅仅是一个简单的仪表盘展示界面，更是保证您下一个web项目所必需的所有工具，我们希望使用它的人可以快速、稳定的开发出健壮、美观、易用的web程序。\n\n## 包含的功能\n- Ant Design 组件库\n- DVA2\n- 数十个精心制作的小组件\n- 多种页面布局\n- 许多精心设计的页面及交互场景\n- 后台接口数据模拟\n- [dva-boot](https://github.com/LANIF-UI/dva-boot)脚手架封装的功能\n\n## 最近更新\n- 增加柱型图\n- 增加G2图表组件\n- 增加resizeMe，可监控dom大小变化\n- 页面增加登录页\n- 页面增加锁屏页\n- 页面增加Coming Soon页\n- 组件增加Clock组件\n- 组件增加密码解锁组件\n- 组件增加Coming Soon组件\n\n## 目录结构\n```\n.\n├── public                   # 不参与编译的资源文件\n├── src                      # 主程序目录\n│   ├── index.js             # 程序启动和渲染入口文件\n│   ├── components           # 全局公共组件\n│   ├── layouts              # 页面结构组件\n│   │   ├── BasicLayout      # 基本布局\n│   │   └── OtherLayout      # 布局组件根据具体功能调整，在路由配置中引用\n│   ├── routes               # 动态路由目录（每个功能一个文件夹的MVC结构）\n│   │   ├── index.js         # 路由配置文件\n│   │   ├── Home             # 功能模块\n│   │   │   ├── index.js     # 路由配置文件\n│   │   │   ├── assets       # 单独属于这个模块的静态资源文件\n│   │   │   ├── components   # 页面组件\n│   │   │   ├── model        # dva model\n│   │   │   ├── service      # dva service\n│   │   │   └── routes **    # 子路由(目录结构与父级相同)\n│   │   └── Login            # 功能模块\n│   │       ├── index.js     # 路由配置文件\n│   │       ├── assets       # 单独属于这个模块的静态资源文件\n│   │       ├── components   # 页面组件\n│   │       ├── model        # dva model\n│   │       ├── service      # dva service\n│   │       └── routes **    # 子路由(目录结构与父级相同)\n│   ├── utils                # 工具类\n│   └── assets               # 资源文件\n│           ├── fonts        # 字体 & 字体图标\n│           ├── images       # 图片\n│           └── styles       # 全局样式\n```\n\n## 启动\n\n``` javascript\n$ git clone https://github.com/LANIF-UI/dva-boot-admin.git\n$ cd dva-boot-admin\n$ npm install\n$ npm start\n```\n",
    "deployedAt": "2018-05-13T15:23:36.945Z"
  }, {
    "name": "dva-example-user-dashboard",
    "git_url": "git://github.com/dvajs/dva-example-user-dashboard.git",
    "author": "dvajs",
    "description": "👲 👬 👨‍👩‍👧 👨‍👩‍👦‍👦",
    "tags": ["dva", "react", "antd"],
    "coverPicture": "https://ucarecdn.com/f9569dff-f570-494d-a16a-11dfe8bbefd1/",
    "readme": "# dva-example-user-dashboard\n\n详见[《12 步 30 分钟，完成用户管理的 CURD 应用 (react+dva+antd)》](https://github.com/sorrycc/blog/issues/18)。\n\n---\n\n<p align=\"center\">\n  <img src=\"https://zos.alipayobjects.com/rmsportal/bmkNCEoluwGaeGjYjInf.png\" />\n</p>\n\n## Getting Started\nInstall dependencies.\n\n```bash\n$ npm install\n```\n\nStart server.\n\n```bash\n$ npm start\n```\n\nIf success, app will be open in your default browser automatically.\n",
    "deployedAt": "2017-04-29T09:28:41.593Z"
  }, {
    "name": "dva-hackernews",
    "git_url": "git://github.com/dvajs/dva-hackernews.git",
    "author": "dvajs",
    "description": "HackerNews clone built with Dva.",
    "version": "",
    "tags": ["dva", "react", "hacknews"],
    "coverPicture": "https://ucarecdn.com/399ead84-8022-42c1-b8fd-c32526b39cdc/",
    "readme": "# dva-hackernews\n\nHackerNews clone built with [Dva](https://github.com/dvajs/dva), based on [vue-hackernews-2.0](https://github.com/vuejs/vue-hackernews-2.0).\n\n<p align=\"center\">\n  <a href=\"http://dvajs.github.io/dva-hackernews/\">\n    <img src=\"https://zos.alipayobjects.com/rmsportal/XUTutezexphTbgs.png\" width=\"700\" />\n    <br />\n    Live Demo\n  </a>\n</p>\n\n## TODO\n\n- [x] Item Page\n- [x] Comment Page\n- [x] User Page\n- [x] Real-time List Update with Animation\n- [x] Router Transform Animation\n- [ ] SSR\n- [ ] Dynamic Router\n- [ ] Handle loading status automatically\n- [ ] Render Performance\n\n## Run Locally\n\nInstall dependencies.\n\n```bash\n$ npm install\n```\n\nStart server.\n\n```bash\n$ npm start\n```\n\nOpen app in browser.\n\n```bash\n$ open http://localhost:8989/\n```\n"
  }, {
    "name": "dva-umi",
    "git_url": "git://github.com/xiaohuoni/dva-umi.git",
    "author": "xiaohuoni",
    "description": "a scaffolding for dva-umi 一个dva-umi的开发脚手架，推荐使用oni-cli安装使用 https://github.com/xiaohuoni/oni-cli",
    "tags": ["umi", "dva"],
    "coverPicture": "https://ucarecdn.com/0a997326-fba6-4c26-a226-396d547e9c27/",
    "readme": "# DVA-UMI\n1.0版本\n<img src=\"./src/assets/a.png\"/>\n## 版本更新\n### 2018.03.24\n- 1.更新umi1.1.1\n- 2.增加嵌套路由demo\n## 开发构建\n\n### 目录结构\n\n```bash\n├── /mock/           # 数据mock\n├── /dist/           # 项目输出目录\n├── /src/            # 项目源码目录\n│ ├── /assets/       # 公共文件，编译时copy至dist目录\n│ ├── /components/   # UI组件及UI相关方法\n│ │ ├── skin.less    # 全局样式\n│ │ └── vars.less    # 全局样式变量\n│ ├── /pages/        # 页面\n│ │ └── /user/       # 路由\n│ │   ├── /components/ #私有组件     \n│ │   ├── /models/     #私有模型(按需加载) \n│ │   ├── /services/   #私有服务(按需加载)   \n│ │   ├── page.js       \n│ │   └── page.less   \n│ ├── /models/       # 全局数据模型(默认加载)\n│ ├── /services/     # 数据接口\n│ ├── /themes/       # 项目样式\n│ ├── /utils/        # 工具函数\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── menu.js      # 菜单及面包屑配置\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── request.js   # 异步请求函数\n│ │ └── theme.js     # 项目需要在js中使用到样式变量\n│ ├── route.js       # 路由配置\n│ ├── index.js       # 入口文件\n│ └── global.css(.less) #全局样式文件     \n├── package.json     # 项目信息\n├── .eslintrc        # Eslint配置\n```\n### 模型规则(未实现)\n1. src/models/**/*.js 为 global model\n2. src/pages/**/models/**/*.js 为 page model\n3. global model 全量载入，page model 在 production 时按需载入，在 development 时全量载入\n4. page model 为 page js 所在路径下 models/**/*.js 的文件\n5. page model 要向上查找，比如 page js 为 pages/a/b.js，他的 page model 为 pages/a/b/models/**/*.js + pages/a/models/**/*.js，依次类推\n6. 约定 model.js 为单文件 model，解决只有一个 model 时不需要建 models 目录的问题，有 model.js 则不去找 models/**/*.js\n7. maybe: 支持合并 model 和 component 的请求，避免文件过于细碎\n### 快速开始\n\n克隆项目文件:\n\n## Usage\n\n```bash\n$ git clone https://github.com/xiaohuoni/dva-umi.git\n$ cd dva-umi\n$ npm install\n$ npm start         # visit http://localhost:8000\n```\n\nOr you can use the command tool: [oni-cli](https://github.com/xiaohuoni/oni-cli)\n\n```bash\n$ npm install oni-cli -g\n$ oni new myapp\n$ cd myapp\n$ npm install\n$ npm start         # visit http://localhost:8000\n```\n\nBuild.\n\n```bash\n$ npm run build\n```",
    "deployedAt": "2018-05-10T02:25:38.649Z"
  }, {
    "name": "dva-umi-mobile",
    "git_url": "git://github.com/xiaohuoni/dva-umi-mobile.git",
    "author": "xiaohuoni",
    "description": "a demo with dva-umi mobile ",
    "tags": ["umi", "dva", "mobile"],
    "coverPicture": "https://ucarecdn.com/d85910ad-5f67-48ce-a595-f210fa54beeb/",
    "readme": "# DVA-UMI-MOBILE\n1.0版本\n## 特性\n1.使用hd方案\n## 使用说明\n1.在首页头部bar没有返回按钮\n2.在登录页没有头部bar（在utils/config里面设置）\n3.注意首页或者登录页的图片（rem）\n### 目录结构\n\n```bash\n├── /mock/           # 数据mock\n├── /dist/           # 项目输出目录\n├── /src/            # 项目源码目录\n│ ├── /assets/       # 公共文件，编译时copy至dist目录\n│ ├── /components/   # UI组件及UI相关方法\n│ │ ├── skin.less    # 全局样式\n│ │ └── vars.less    # 全局样式变量\n│ ├── /pages/        # 页面\n│ │ └── /user/       # 路由\n│ │   ├── /components/ #私有组件     \n│ │   ├── /models/     #私有模型(按需加载) \n│ │   ├── /services/   #私有服务(按需加载)   \n│ │   ├── page.js       \n│ │   └── page.less   \n│ ├── /models/       # 全局数据模型(默认加载)\n│ ├── /services/     # 数据接口\n│ ├── /themes/       # 项目样式\n│ ├── /utils/        # 工具函数\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── menu.js      # 菜单及面包屑配置\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── request.js   # 异步请求函数\n│ │ └── theme.js     # 项目需要在js中使用到样式变量\n│ ├── route.js       # 路由配置\n│ ├── index.js       # 入口文件\n│ └── global.css(.less) #全局样式文件     \n├── package.json     # 项目信息\n├── .eslintrc        # Eslint配置\n```\n\n### 快速开始\n\n克隆项目文件:\n\n```bash\ngit clone https://github.com/xiaohuoni/dva-umi-mobile.git\n```\n\n进入目录安装依赖:\n\n```bash\nnpm i 或者 yarn install\n```\n\n启动服务.\n\n```bash\n$ npm start\n```\n\n编译.\n\n```bash\n$ npm run build\n```\n\n或者你可以使用: [oni-cli](https://github.com/xiaohuoni/oni-cli)\n\n```bash\n$ npm install oni-cli -g\n$ oni new myapp\n$ cd myapp\n$ npm install\n$ npm start         # visit http://localhost:8000\n```\n",
    "deployedAt": "2018-05-10T02:30:57.243Z"
  }, {
    "name": "electron-antd",
    "git_url": "git://github.com/lanten/electron-antd.git",
    "author": "lanten",
    "description": "快速创建一个 electron + react + antd  的桌面 APP",
    "tags": ["electron"],
    "coverPicture": null,
    "deployedAt": "2018-11-22T02:00:11.564Z"
  }, {
    "name": "electron-mobx-member",
    "git_url": "git://github.com/eaTong/electron-mobx-member.git",
    "author": "eaTong",
    "description": "member manager write by electron && mobx",
    "tags": ["mobx", "electron", "mysql"],
    "coverPicture": null,
    "deployedAt": "2018-12-27T08:20:05.246Z"
  }, {
    "name": "electron-react-typescript-antd-boilerplate",
    "git_url": "git://github.com/CNLHC/electron-react-typescript-antd-boilerplate.git",
    "author": "CNLHC",
    "description": "Electron+Typescript脚手架",
    "tags": [],
    "coverPicture": "https://ucarecdn.com/2999e79c-73ae-4873-9db5-c0a856bc413d/",
    "deployedAt": "2019-01-29T13:03:28.560Z"
  }, {
    "coverPicture": "https://ucarecdn.com/647acbc8-e19c-4527-99bf-64fedbfe57dc/",
    "name": "emptyd-admin-webpack",
    "git_url": "git://github.com/FreemenL/emptyd-admin-webpack.git",
    "author": "FreemenL",
    "description": "基于typescript react webpack的脚手架 ",
    "tags": [],
    "deployedAt": "2019-09-26T06:47:50.002Z"
  }, {
    "coverPicture": "https://ucarecdn.com/b873e76e-c309-44f7-9a8e-c737bf281a6e/",
    "name": "epee-react-admin-ts",
    "git_url": "git://github.com/dobble11/epee-react-admin-ts.git",
    "author": "dobble11",
    "description": "TypeScript 与 React Hooks 最佳实践项目模版，无模版代码，无字符串约定，简洁，不干预，全链路类型检查保证代码质量，适应大型团队协作开发",
    "tags": ["react-hooks", "easy-peasy", "typescript", "antd"],
    "deployedAt": "2019-10-16T06:00:46.018Z"
  }, {
    "name": "eshop-user",
    "git_url": "git://github.com/Monkhjargal/eshop-user.git",
    "author": "Monkhjargal",
    "description": "eshop-user",
    "tags": [],
    "coverPicture": null,
    "deployedAt": "2019-01-29T10:33:21.898Z"
  }, {
    "name": "fanpianAdmin",
    "git_url": "git://github.com/douglasvegas/fanpianAdmin.git",
    "author": "douglasvegas",
    "description": "This is the admin for fanpian project written by react.",
    "tags": ["admin"],
    "coverPicture": "https://ucarecdn.com/5370301f-bb7c-4adf-be81-77d46f0f1a16/",
    "readme": "# RecordAdmin\n## Todo\n\n- ~~访客、用户统计图表~~\n- ~~用户管理列表~~\n- ~~文章管理列表~~\n- ~~模块管理~~\n- 文本编辑器\n\n## 界面\n### 文章列表\n![](https://github.com/douglasvegas/fanpianAdmin/blob/master/screenshots/文章列表.png)\n\n### 文章模块\n![](https://github.com/douglasvegas/fanpianAdmin/blob/master/screenshots/文章模块.png)\n\n### 文章统计\n![](https://github.com/douglasvegas/fanpianAdmin/blob/master/screenshots/文章统计.png)\n\n### 用户列表\n![](https://github.com/douglasvegas/fanpianAdmin/blob/master/screenshots/用户列表.png)\n\n\n### ISSUES\n- 建议使用可控表单\n > 符合React的数据流，单向数据流，从state流向render输出的结果。\n 数据存贮在state中，便于使用。便于对数据进行处理\n- webpack publicPath影响打包结果的问题\n- componentDidMount和componentWillUpdate使用可能出现死循环，慎重。\n- 手动删除token、返回登录无法进入界面、流程控制问题。用登录成功的回调函数修改state？\n- react-router4的钩子函数\n\n## 项目地址\n * 前台 [fanpian](https://github.com/douglasvegas/fanpian)\n * 后台 [fanpianAdmin](https://github.com/douglasvegas/fanpianAdmin)\n * 后端项目\n[fanpianBackend](https://github.com/douglasvegas/fanpianBackend)\n\n## 线上预览\n* [前台](http://www.douglasvegas.com/)\n* [后台](http://admin.douglasvegas.com/)",
    "deployedAt": "2017-06-10T07:33:46.311Z"
  }, {
    "coverPicture": null,
    "name": "frontend-cli",
    "git_url": "git://github.com/ashuihui/frontend-cli.git",
    "author": "ashuihui",
    "description": "react 前端脚手架",
    "tags": ["react、typescript、redux、router、sass/less、antd、echarts、babel、ESLint、storybook、jest&enzyme"],
    "deployedAt": "2020-06-02T14:07:03.861Z"
  }, {
    "coverPicture": null,
    "name": "generator-chrome-extension",
    "git_url": "git://github.com/yeoman/generator-chrome-extension.git",
    "author": "yeoman",
    "description": "Scaffold out a Chrome extension",
    "tags": [],
    "deployedAt": "2019-03-06T03:22:24.244Z"
  }, {
    "name": "gt-react-scaffold",
    "git_url": "git://github.com/vivaxy/gt-react-scaffold.git",
    "author": "vivaxy",
    "description": "🥚 A boilerplate for client apps of webpack, react, redux, router...",
    "tags": ["react", "redux", "webpack", "gt", "eslint", "router", "postcss"],
    "coverPicture": null,
    "readme": "## Initializing\n\n- Install nodejs.\n- Install [gt](https://github.com/vivaxy/granturismo).\n\n    `yarn global add granturismo`\n\n- Add scaffold to gt `gt config add vivaxy/gt-react-scaffold https://github.com/vivaxy/gt-react-scaffold.git`.\n- Create your project directory `mkdir my-project-name && cd my-project-name` or `git clone ...`.\n- Run `gt init`.\n- Select `vivaxy/gt-react-scaffold`.\n\n## Contributing\n\n[Contributing](CONTRIBUTING.md)\n\n----------\n\n# gt-react-scaffold\n\n## Feature\n\n- react\n- redux\n- webpack\n- eslint\n- page navigation animation\n- react router\n- react redux\n- redux thunk\n- react hot reload\n- webpack development server\n- multiple entries\n- mock server\n- unified error center\n- internationalization\n- environments\n- webpack visualizer\n- postcss\n- autoprefixer\n- less\n- test cases\n\n## Concept\n\n![flowchart](./docs/flowchart.png)\n\nAs we find out html are mostly same in react projects, we extract the same html into a template file which lays in `html` folder.\n\n`html-webpack-plugin` is used to generate released html files, which load corresponding js files.\n\n`entries` stores js main methods, we split main container to `containers` because entry could not be hot-module-replaced.\n\n`entries`s import `containers`s, which is one to one correspondent. `render` method in entry provides all commonly used setups, such as redux store, provider, injectTapEventPlugin for material-ui, and custom styles.\n\n`containers` is the headquarters which imports all dummy components, passing through props to them. Also, `containers` interacts with redux `reducers` and `actions`.\n\nIt is recommended that you wrap containers into another. `redux` will re-render a container when and only when mapped reducers have been updated.\n\nWe do not use async redux for ajax requests because ajax status is not that important for us to record. So, we invoke `api` in `containers`, get response, and determine what `actions` to call.\n\nWe store every string in `i18n` for better internationalization.\n\nBuilt project files will be in the `release` folder. With `build.log`, you can see every build details. With `stats.html`, you can optimize your dependencies to make project smaller.\n\n## Developing\n\n- `yarn run dev`\n\n## Building\n\n- `yarn run build`\n\n## Reference\n\n- https://github.com/webpack/docs/wiki/webpack-dev-server\n- https://github.com/gaearon/react-hot-loader/tree/master/docs\n- https://github.com/reactjs/react-router-redux\n- https://github.com/ampedandwired/html-webpack-plugin\n- https://github.com/ReactTraining/react-router\n",
    "deployedAt": "2017-09-21T03:50:26.584Z"
  }, {
    "name": "inferno-mobile",
    "git_url": "git://github.com/leesx/inferno-mobile.git",
    "author": "leesx",
    "description": "infernojs mobile app",
    "tags": ["infernojs", "react", "antd-mobile"],
    "coverPicture": "https://ucarecdn.com/3741f297-64da-456c-ba17-1bee8c117d61/",
    "readme": "## infernojs mobile demo\n\n> 使用了类react框架 inferno.js，以及ant-mobile.\n> 借助于官方脚手架 create\n\n[infernojs](https://infernojs.org/)\n\n- 官方实例\n\n```\nnpx create-inferno-app my-app\ncd my-app\nnpm start\n```\n- 提取官方配置，加入适合自己项目开发的一些配置\n\n1. 安装依赖 `yarn`\n2. 开发运行 `yarn start`\n3. 构建 `yarn build`\n4. 模拟部署  `yarn serve`\n> 别忘记 `yarn global add serve`\n",
    "deployedAt": "2018-04-22T09:52:47.649Z"
  }, {
    "name": "jdf-phone-ui",
    "git_url": "git://github.com/jdfdcc/jdf-phone-ui.git",
    "author": "jdfdcc",
    "description": "🖖 前端混合开发整合框架（cordova插件，微信，H5）",
    "tags": [],
    "coverPicture": null,
    "deployedAt": "2018-06-19T07:23:18.815Z"
  }, {
    "name": "kenote-react-admin",
    "git_url": "git://github.com/thondery/kenote-react-admin.git",
    "author": "thondery",
    "description": "基于 React 和 Antd.Design 技术的后台管理平台",
    "tags": [],
    "coverPicture": null,
    "readme": "# kenote-react-admin\n\n基于 React 和 Antd.Design 技术的后台管理平台\n\n[![React](https://img.shields.io/badge/react-^15.6.2-brightgreen.svg?style=flat-square)](https://github.com/facebook/react)\n[![Ant Design](https://img.shields.io/badge/ant--design-^2.13.6-yellowgreen.svg?style=flat-square)](https://github.com/ant-design/ant-design)\n[![MIT](https://img.shields.io/dub/l/vibe-d.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n\n## Usages\n\n克隆项目\n```bash\ngit clone https://github.com/thondery/kenote-react-admin.git\n```\n\n安装依赖\n```bash\nnpm i 或 yarn\n```\n\n添加配置\n```bash\nnode-react config\n\n? root: (./src/config) -> \n? domain (http://localhost:4000) ->\n? apiPath (/api/v1) ->\n\n    config set sccuess!\n\n```\n\n编译依赖包\n```bash\nnpm run compile:dll\n```\n\n开发\n```bash\nnpm run dev\n```\n\n构建\n```bash\nnpm run build\n```\n\n### 目录结构\n\n```bash\n├── /dist/                 # 项目输出目录\n├── /src/                  # 项目源码目录\n│ ├── /assets/             # 资源文件\n│ ├── /components/         # UI组件\n│ ├── /config/             # 配置文件\n│ ├── /containers/         # 应用主入口\n│ ├── /features/           # 导航页面\n│ ├── /layouts/            # 页面布局\n│ ├── /passport/           # 帐号相关界面，例如登录界面\n│ ├── /redux/              # Redux文件\n│ ├── /services/           # 数据存储相关\n│ ├── /store/              # store配置\n│ ├── /styles/             # 全局样式\n│ ├── index.js             # 入口文件\n│ └── index.html           # 入口文件的html\n├── package.json           # 项目信息\n├── postcss.config.js      # postcss配置\n├── webpack.config.js      # webpack配置\n├── webpack.dll.config.js  # webpack dll配置\n└── .babelrc               # babel配置\n```\n\n## License\n\nthis repo is released under the [MIT License](https://github.com/thondery/kenote-react-admin/blob/master/LICENSE).",
    "deployedAt": "2017-10-15T02:58:44.256Z"
  }, {
    "name": "little-a-dashboard",
    "git_url": "git://github.com/huzzbuzz/little-a-dashboard.git",
    "author": "huzzbuzz",
    "description": "a little material-design dashboard build upon reactjs, ant design, dva.js. 基于 react.js, ant design, dva.js 开发的类 material 风格的 dashboard。",
    "tags": ["react", "antd", "dva", "material"],
    "coverPicture": "https://ucarecdn.com/13f7c208-51f7-4d05-9301-c2ad0ed3d50b/",
    "readme": "# Little A Dashboard\n\na little material-design dashboard build upon reactjs, ant design, dva.js. 基于 react.js, ant design, dva.js 开发的类 material 风格的 dashboard。\n\n## Quick Start   \n\n\n#### Clone \n\n    git clone https://github.com/huzzbuzz/little-a-dashboard.git\n\n#### Install \n\n    cd little-a-dashboard\n    npm i or yarn install\n\n#### Run    \n> before run this，you might need to installed roadhog cli with `npm i roadhog -g`\n```bash\nnpm start\n``` \n> it will automatically open http://localhost:8000\n\n#### Build \n```bash\nnpm run build\n``` \n> it will automatically generated dist directory\n\n\n## Already Done\n- [x] 类 material-ui 风格\n- [x] 登录、退出、锁屏（模拟）\n- [x] 主页及其他示例页\n- [x] 菜单折叠、换肤\n- [x] redux 完整使用示例\n- [x] 动态路由，按需加载\n- [x] 简易 Mock 功能\n- [x] 打包后，Filename Hash\n\n## Further Plan\n- [ ] Automatically select the menu based on the url\n- [ ] Responsive Sidebar\n- [ ] Full RESTful API\n\n## Screenshot\n\n#### Dashboard\n![](https://github.com/huzzbuzz/little-a-dashboard/blob/master/screenshot/dashboard.gif)\n\n#### Login\n![](https://github.com/huzzbuzz/little-a-dashboard/blob/master/screenshot/login.gif)\n\n\n#### Lock\n![](https://github.com/huzzbuzz/little-a-dashboard/blob/master/screenshot/lock.gif)\n\n\n#### alert\n![](https://github.com/huzzbuzz/little-a-dashboard/blob/master/screenshot/alert.gif)\n\n\n#### Charts\n![](https://github.com/huzzbuzz/little-a-dashboard/blob/master/screenshot/charts.gif)\n\n\n#### Table\n![](https://github.com/huzzbuzz/little-a-dashboard/blob/master/screenshot/table.gif)\n\n\n#### Sidebar\n![](https://github.com/huzzbuzz/little-a-dashboard/blob/master/screenshot/sidebar.gif)\n\n\n#### Setting\n![](https://github.com/huzzbuzz/little-a-dashboard/blob/master/screenshot/setting.gif)\n\n\n## Acknowledge \n\n- [Ant Design](https://github.com/ant-design/ant-design)\n- [Creative Tim](https://github.com/creativetimofficial)\n- [Angular Material Dashboard](https://github.com/wangdicoder/angular-material-dashboard)\n- [Antd Admin](https://github.com/zuiidea/antd-admin)\n- [Sweet Alert 2](https://github.com/limonte/sweetalert2)\n\n\n## Project Structure\n\n```bash\n├── /dist/           # 打包输出\n├── /mock/           # mock数据\n├── /public/         # 公共文件\n├── /src/            # 项目源码\n│ ├── /components/  # UI组件\n│ ├── /models/      # 数据模型\n│ ├── /routes/      # 路由组件\n│ │ └── app.js      # 入口\n│ ├── /services/    # 数据接口\n│ ├── /themes/      # 项目样式\n│ ├── /utils/       # 工具函数\n│ │ ├── config.js    # 项目配置\n│ │ └── request.js   # 异步请求函数\n│ ├── route.js      # 路由配置\n│ ├── index.js      # 入口文件\n│ └── index.html     \n├── package.json     # 项目信息\n├── .roadhogrc.js    # roadhog配置\n├── .roadhogrc.mock.js # roadhog mock\n├── theme.config.js  # 更改 ant 主题\n└── webpack.config.js\n```\n\n## License\n\nMIT\n\n",
    "deployedAt": "2017-08-01T03:07:39.293Z"
  }, {
    "name": "material-demo",
    "git_url": "git://github.com/toolaugh/material-demo.git",
    "author": "toolaugh",
    "description": "using material-design",
    "tags": [],
    "coverPicture": null,
    "deployedAt": "2018-07-03T10:55:36.539Z"
  }, {
    "name": "mk-demo",
    "git_url": "git://github.com/ziaochina/mk-demo.git",
    "author": "ziaochina",
    "description": "mk框架实现的demo网站,技术栈：react, redux, immutable,antd",
    "tags": [],
    "coverPicture": "https://ucarecdn.com/938a18e8-372f-45e3-b011-c037016c18c6/",
    "readme": "# 右上角有个star,亲点点哈，您懂的\n\n# mk-demo\n\n该demo是使用mk框架创建的一个demo\n\n[在线效果请点这里](https://ziaochina.github.io/mk-demo/)\n\n## 环境准备\n\n- nodejs最新版\n- npm最新版\n- chrome\n\n## start\n\n```\n$ npm install\n$ npm start\nhttp://127.0.0.1:8089\n```\n\n## 注意\n\n- 如果npm start报错not found module\n```\n$ npm cache clean\n$ rm -rf node_modules\n$ rm -rf package-lock.json\n$ npm install\n```\n\n\n\n\n",
    "deployedAt": "2017-09-20T07:39:14.303Z"
  }, {
    "name": "mobxSpa",
    "git_url": "git://github.com/Tianlikai/mobxSpa.git",
    "author": "Tianlikai",
    "description": "企业级SPA项目，完整开发脚手架",
    "tags": ["react", "react-router V4", "mobx", "webpack V4", "antd"],
    "coverPicture": "https://ucarecdn.com/2fcbb8a6-eae0-493a-8c30-3055cc30d41b/",
    "deployedAt": "2018-09-15T07:08:56.392Z"
  }, {
    "name": "my-blog",
    "git_url": "git://github.com/1degrees/my-blog.git",
    "author": "1degrees",
    "description": "个人博客项目，项目采用next服务端渲染技术，并采用 Node+ MongoDB 辅助搭建后台。",
    "tags": ["blog", "next"],
    "coverPicture": "https://ucarecdn.com/8a84075c-2ca6-48ba-92fa-f76f14515575/",
    "deployedAt": "2018-10-10T07:56:55.411Z"
  }, {
    "name": "my-react-app",
    "git_url": "git://github.com/liviuscn/my-react-app.git",
    "author": "liviuscn",
    "description": "使用官方脚手架搭建的react+react-redux+es6/7/8+react-router+less开发环境",
    "tags": [],
    "coverPicture": null,
    "readme": "# my-react-app\n#使用官方脚手架搭建的react+react-redux+es6/7/8+react-router+less开发环境 使用的eject方法，没有引入ant样式库，图标使用阿里图标\n\n#一、装官方脚手架\n```sh\nnpm install -g create-react-app\n```\n#二、创建项目\n```sh\ncreate-react-app my-react-app\n```\n#三、暴露配置文件\n```sh\nnpm run eject\n```\n#四、安装必备插件\n```sh\nnpm install axios --save\n```\n```sh\nnpm install fastclick --save\n```\n```sh\nnpm install immutable --save\n```\n```sh\nnpm install prop-types --save\n```\n```sh\nnpm install react-addons-css-transition-group --save\n```\n```sh\nnpm install react-redux --save\n```\n```sh\nnpm install redux-logger --dev--save\n```\n```sh\nnpm install react-router-dom --save\n```\n```sh\nnpm install redux --save\n```\n```sh\nnpm install redux-thunk --save\n```\n```sh\nnpm install md5 --save\n```\n```sh\nnpm install moment --save\n```\n```sh\nnpm install babel-plugin-syntax-dynamic-import --save-dev\n```\n```sh\nnpm install babel-plugin-transform-decorators-legacy --save-dev\n```\n```sh\nnpm install babel-polyfill --save-dev\n```\n```sh\nnpm install postcss-px2rem --save-dev\n```\n```sh\nnpm install less-loader --save-dev\n```\n```sh\nnpm install less --save-dev\n```\n#五、修改config文件夹中的配置文件\n```js\nconst paths = require('./paths');\nconst px2rem = require('postcss-px2rem');//--（1）\n\nfunction resolve (dir) {                 //--（2）\n  return path.join(__dirname, '..', dir) //--（3）\n}                                        //--（4）\n```\n```js\noneOf: [\n\t\t...\n\t\t {\n        test: /\\.(js|jsx|mjs)$/,\n        include: paths.appSrc,\n        use: [\n            {\n              loader: require.resolve('babel-loader'),\n                options: {\n                  // @remove-on-eject-begin\n                  babelrc: true,//--（5）\n                  presets: [require.resolve('babel-preset-react-app')],//--（6）\n                  // @remove-on-eject-end\n                  // This is a feature of `babel-loader` for webpack (not Babel itself).\n                  // It enables caching results in ./node_modules/.cache/babel-loader/\n                  // directory for faster rebuilds.\n                  cacheDirectory: true,\n                  plugins: [\"transform-decorators-legacy\"],//--（7）\n                },\n              },\n\t\t\t\t...\n            ]\n      },\n\t  ]\n```\n```js\n{\n  test:/\\.(css|less)$/,//--（8）\n  use: [\n    require.resolve('style-loader'),\n    {\n      loader: require.resolve('css-loader'),\n          options: {\n              importLoaders: 1,\n          },\n    },\n    {\n      loader: require.resolve('postcss-loader'),\n          options: {\n              // Necessary for external CSS imports to work\n              // https://github.com/facebookincubator/create-react-app/issues/2677\n              ident: 'postcss',\n              plugins: () => [\n                require('postcss-flexbugs-fixes'),\n                autoprefixer({\n                  browsers: [\n                        '>1%',\n                        'last 4 versions',\n                        'Firefox ESR',\n                        'not ie < 9', // React doesn't support IE8 anyway\n                  ],\n                      flexbox: 'no-2009',//--（9）\n                }),\n                px2rem({remUnit: 75})//--（10）设计稿根据750px(iphone6)\n                  ],\n                },\n              },\n              {\n                loader: require.resolve('less-loader')  //--（11）\n              },\n          ],\n},\n```\n```js\nalias: {\n\t ...\n\t  '@': resolve('src'),\n}\n```\n```js\nentry: [\n    'babel-polyfill',\n...\n]\n```\n```js \n.bablelrc 文件内容\n{\n  \"presets\": [\"react\"],\n  \"plugins\": [\"syntax-dynamic-import\"]\n}\n```\n#六、配置完成 可以将此项目clone直接使用\n\n#七、规范化\n\n##目录结构\n ```\n my-react-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    api/\n    apps/\n    assets/\n    components/\n    envconfig/\n    style/\n    utils/\n    index.js\n    logo.svg\n    reducers.js\n    routers.js\n    store.js\n ```\n ``` 说明：\n    （1）apps目录下的app都要作为独立可运行的app\n    （2）独立的app包括\n          action-type.js //--使用原始数据类型Symbol()消除魔术字符串\n          index.js\n          action.js\n          reducer.js\n          style.less\n          api.js\n          component目录 自己单独的组件不公用，公用的组件放到src/components目录下\n     （3）将新app的路由写入src/routers.js中\n     （4）将新app的reducer写入src/reducers.js中\n     （5）app的style.less避免样式污染，样式都要包含在[app名称]-contaier中\n     （6）一些工具放到src/utils目录下\n      (7)一些修饰器放到src/decorators目录下下\n      (8)关于接口调用可以在index和action中，推荐写到inde页中，因为index页的方法比较全面，像alert,router,context等都可以直接调用\n```\n\n八、发布\n  \n```\nThe project was built assuming it is hosted at the server root.\nYou can control this with the homepage field in your package.json.\nFor example, add this to build it for GitHub Pages:\n\n  \"homepage\" : \"http://myname.github.io/myapp\",\n\nThe build folder is ready to be deployed.\nYou may serve it with a static server:\n\n  npm install -g serve\n  serve -s build\n\nFind out more about deployment here:\n\n  http://bit.ly/2vY88Kr\n\n  \nThe project was built assuming it is hosted at /my-react-app/.\nYou can control this with the homepage field in your package.json.\n\nThe build folder is ready to be deployed.\nTo publish it at http://liviuscn.github.io/my-react-app, run:\n\n  npm install --save-dev gh-pages\n\nAdd the following script in your package.json.\n\n    // ...\n    \"scripts\": {\n      // ...\n      \"predeploy\": \"npm run build\",\n      \"deploy\": \"gh-pages -d build\"\n    }\n\nThen run:\n\n  npm run deploy\n\nFind out more about deployment here:\n\n  http://bit.ly/2vY88Kr\n```",
    "deployedAt": "2018-05-11T08:20:23.242Z"
  }, {
    "coverPicture": null,
    "name": "myantdpro",
    "git_url": "git://github.com/hankaibo/myantdpro.git",
    "author": "hankaibo",
    "description": "一个简洁的后台管理系统前端代码。",
    "tags": ["antd", "antdpro", "js", "javascript"],
    "deployedAt": "2020-04-28T01:55:45.975Z"
  }, {
    "name": "next-antd-scafflod",
    "git_url": "git://github.com/luffyZh/next-antd-scafflod.git",
    "author": "luffyZh",
    "description": "A react ssr scafflod with ant-design base on Next.js.",
    "tags": ["React", "Next", "Redux", "Redux-Saga", "ant-design"],
    "coverPicture": "https://ucarecdn.com/0552ab6b-e28e-4427-9f22-e5dd5773e318/",
    "deployedAt": "2019-01-17T03:23:18.791Z"
  }, {
    "coverPicture": "https://ucarecdn.com/38f07c05-6db1-4204-b3a7-157c3679927f/",
    "name": "next-antd-scaffold",
    "git_url": "git://github.com/luffyZh/next-antd-scaffold.git",
    "author": "luffyZh",
    "description": "A simple scaffold based on Next.js for quick use with ant-design, redux, redux-saga, fetch and pm2. ",
    "tags": ["ant-design", "next.js", "react", "redux", "fetch", "redux-saga", "pm2"],
    "deployedAt": "2019-03-28T03:51:04.370Z"
  }, {
    "name": "next-react-mobx-antd-boilerplate",
    "git_url": "git://github.com/1degrees/next-react-mobx-antd-boilerplate.git",
    "author": "1degrees",
    "description": "该项目采用React-SSR技术（服务端渲染），项目涉及到技术栈： react、next、mobx、antd、已经webpack基础知识 ",
    "tags": ["next", "react", "mobx"],
    "coverPicture": null,
    "deployedAt": "2018-08-14T03:19:08.239Z"
  }, {
    "name": "ng-alain",
    "git_url": "git://github.com/ng-alain/ng-alain.git",
    "author": "ng-alain",
    "description": "ng-zorro-antd  admin panel front-end framework",
    "tags": ["admin", "angular"],
    "coverPicture": "https://ucarecdn.com/d9d11c6b-dd91-4373-8fbc-a4ff49ea1ed3/",
    "deployedAt": "2018-10-27T12:29:49.218Z"
  }, {
    "name": "parcel-start-kit",
    "git_url": "git://github.com/goWrongWay/parcel-start-kit.git",
    "author": "goWrongWay",
    "description": "parcel",
    "tags": ["parcel", "react-loadable", "pretty", "sagas", "redux"],
    "coverPicture": "https://ucarecdn.com/869ff72c-43ad-4fe7-952e-25336fc77bfc/",
    "readme": "# parcel-start-kit\n\nHI\n这里通过 react-loadable 进行代码拆分，使用了 redux，sagas 进行同步异步状态管理。并且引入了 antd。\npretty 提交前自动格式化。简单好用的脚手架，希望得到你的反馈。\n\n1.  yarn\n2.  yarn start\n",
    "deployedAt": "2018-05-07T07:38:06.396Z"
  }, {
    "name": "r2",
    "git_url": "git://github.com/dog-days/r2.git",
    "author": "dog-days",
    "description": "基于React、Redux、react-router、react-router-redux、react-redux、immutable.js、Ant-Design等SPA开发手脚框架",
    "tags": ["redux", "antd", "immutable.js"],
    "coverPicture": null,
    "readme": "# R2框架\n\n[R2框架](https://github.com/dog-days/r2)(Redux React Framework)主要是基于React、Redux而构建的，其中还是用了`react-router`、`react-router-redux`、`react-redux`、`immutable.js`。同时使用webpack模块加载工具，采用ES62015语法。所有如果要使用本框架，这些知识多多少少都要会点的。同时也使用了[Ant Design React](http://ant.design/#/docs/react/introduce)组件,生成的页面使用的UI是Ant Design,目前只支持这种，后面页面生成也会支持多种UI组件。 R2框架旨在快速搭建页面，减少重复工作，减少重复代码，提高开发效率。\n\n特别说明：下面的环境是在mac下搭建的，在windows上会有差异。\n\n## R2框架相关阅读\n\n- [webpack配置](http://blog.leanote.com/post/sams/webpack%E7%9F%A5%E8%AF%86%E7%82%B9%E6%BB%B4) \n\n## 框架目录\n\n```shell\nR2/\n    - public/                      \t\t#项目最终生成处，直接拷贝到服务环境下即可访问\n        index.html                 \t\t#生成环境的index.html    \n        index_dev.html             \t\t#开发环境的index_dev.html    \n        + js/                      \t\t#生成的js和样式文件都在里面\n    - src/                         \t\t#框架和应用代码目录\n        index.jsx                  \t\t#框架应用入口文件\n        routes.js                  \t\t#路由配置处,可以自定义（不建议,后面会说到）\n        reducers.js                \t\t#Redux reducers总入口\n        store.js                   \t\t#Redux store配置处\n        - libs/                    \t\t#类库自定义的类库,框架使用者的类库可以放这里\n            + r2/                  \t\t#R2框架类库存放处，使用框架这不用理会\n        + common                   \t\t#当前项目公共component和设置等\n        - page/                    \t\t#页面级代码\n            App.js                 \t\t#路由第一层\"/\"component\n            action.js        \t   \t    #可自定义的公共actionCreator\n            reducer.js             \t\t#可自定义的公共reducer\n            + nopage               \t\t#404页面\n            + .viewModel           \t\t#页面模板（后面详说）\n            - view                 \t\t#各个页面存放位置\n                + layout           \t\t#layout文件存放处\n            \t\t- main/\n            \t\t\t_route.js \t   \t\t#路由设置处\n            \t\t\t.child_routes.js \t#自动生成，后面详解\n                - index/           \t\t#应用页面demo,参考使用\n                \t_route.js \t   \t    #路由设置处\n                    index.js       \t\t#index页面入口文件\n                    action.js      \t\t#Redux action，demo action任务定义处，当然也可以没有\n                    reducer.js     \t\t#Redux reducer，demo reducer定义处，当然也可以没有\n    + .end/                        \t\t#智能功能开发处，框架使用者不用理会\n    - style/                       \t\t#样式图片存放处,这个看喜好吧,约定方式\n        + css/                     \t\t#css样式\n        + img/                     \t\t#图片存放处\n    Gruntfile.js                   \t\t#grunt配置文件，根据需要自己拓展配置h打包生成环境\n    server.js                      \t\t#启动服务配置文件,开发环境\n    webpack.config.js              \t\t#webpack配置，根据需要自己拓展配置，开发环境 \n    package.js                     \t\t#npm配置文件\n    .babelrc                       \t\t#babel设置\n    .gitignore                     \t\t#git提交忽略设置\n```\n\n## 安装使用\n\n由于还没有正式的版本，可以clone或者下载本框架文件,然后运行下面命令。\n通过nvm安装node（nvm可以管理多个版本node,可以来回切换,请使用v6.0.0以上）\n\n```sh\n//安装nvm\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n//安装最新版node,并可以立刻使用node不用重启终端,安装时好像被墙了，通过vpn装成功\nnvm install node && nvm alias default node\n```\n\nnpm安装如果被墙可以使用[淘宝镜像](http://npm.taobao.org/)，单不建议使用cnpm，使用cnpm有时候会安装不完全，直接在~/.npmrc中直接配置：\n\n```sh\nregistry=https://registry.npm.taobao.org\n```\n\n```sh\n#如果没有安装grunt，请先安装要grunt。\nnpm install -g grunt-cli #安装全局命令\nnpm install #等待安装各种需要的package\ncd .end && npm install && cd ../ #安装本框架node后端支持，部分功能需要用到\nnpm run ac\nnpm start\n```\n\n然后直接在浏览中打开`http://localhost:8888/`,即可访问。\n\n### R2框架命令\n\nR2框架中自定义了如下命令\n\n```\n//运行服务，windows平台请使用,npm run startw\nnpm start \n```\n\n```\n//打包生成生产环境文件，windows平台请使用,npm run buildw\nnpm build \n```\n\n```\n//智能Route和Reducer生成命令,情况后续说明\nnpm run ac \n```\n\n```\n//开启R2框架后端服务支持，使用页面新建功能时最好开启需要开启，要不然看不了数据，详细后续说明\nnpm run startend \n```\n\n```\n//运行所有前端webpack和本框架的后端服务,windows使用npm run startwboth\nnpm run startboth \n```\n\n`npm run startboth` 相当于 `npm start && npm run startboth`\n\n```\nnpm run cv //页面生成,后续详说\n```\n\n## 智能构建\n\n经过上面的步骤可以运行看到页面了，现在开始看如何搭建一个新的页面，在搭建页面前先介绍R2框架自带的一些功能。\n\n### 智能构建route和reducer\n\n何为智能route和reducer,在R2框架中，只要遵循view文件位置约定规则，route和reducer就可以通过命令生成！你没听错，是用R2框架是不用怎么关注路由和reducer绑定的！\n运行一下命令即可\n\n```\nnpm run ac  // ac全称auto creator\n```\n\n不过要注意的是，view文件要按照约定位置放好，`R2/src/page/view`目录下新建文件夹就属于一个新页面(必须包含文件_route.js，layout是特殊的view，有点不一样),而reducer生成条件是在view目录下新建reducer.js就会被视为新建reducer，本框架强烈建议在当前页面文件夹中新建reducer.js。\n\n`npm run ac` 不带参数读取`R2/src/page/view`目录中文件，`npm run ac -- -m` 读取的时模板目录 `R2/src/page/.viewModel`，所有要查看模板，请运行`npm run ac -- -m`，之后在浏览器上访问指定模板即可。\n\n其中`reducer.js`需要遵守一定格式！ `reducer.js`格式如下:\n\n```jsx\nexport function origin(state = {}, action) {\n    switch (action.type) {\n        case RECIEVEORIGIN:     \n        default:\n            return state;\n    }\n}\n```\n\n不要使用下面这样的格式,虽然是没错，单目前R2框架还不支持智能识别这种格式。\n\n```jsx\nmodule.exports = {\n    origin(state,action){}\n}\n```\n\n### 页面生成器\n\n需要使用到以下命令\n\n```\nnpm run cv -- options \n```\n\noptions如下\n\n| 缩写   | 全称                    | 描述                        |\n| ---- | --------------------- | ------------------------- |\n| -h   | --help                | 帮助命令                      |\n| -V   | --version             | 版本命令                      |\n| -e   | --emptyPage           | 创建emptyPage视图模板           |\n| -n   | --noactionreducer     | 创建noactionreducer视图模板     |\n| -t   | --tableNoPagination   | 创建tableNoPagination视图模板   |\n| -p   | --tableWithPagination | 创建tableWithPagination视图模板 |\n| -l   | --layout              | 指定创建视图的layout，配合上面的命令使用   |\n\n例如：\n\n```shell\nnpm run cv -- -p test -l main //不使用-l时，默认为main\n```\n\n## 基本使用\n\n### layout模式\n\nlayout是特殊的一种view，其实就是react-router中的第二层组件（第一个是\"/\"，本框架是`src/page/App.jsx`），view是其子组件。以一种layout为例：\n\nlayout包括以下必要文件\n\n- `_route.js`，用作路由生成，可自行修改，单务必按照以下格式。\n\n```jsx\n'use strict';\nvar view = function(){\n\t//这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过r2Common未定义异常\n\tvar re; \n\ttry{\n\t\tre = `${r2Common.prefixUrl}`;\n\t}catch(e){}\n\treturn re;\n}\nvar childRoutes = function(){\n    //这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过r2Common未定义异常\n\tvar re;\n\ttry{\n\t\tre = require('./.child_routes.js');\n\t}catch(e){}\t\n\treturn re;\n}\nvar indexRoute = function(){\n    //这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过r2Common未定义异常\n\tvar re;\n\ttry{\n\t\tre = require(\"src/page/view/index/_route.js\");//indexRoute指定位置\n\t}catch(e){}\t\n\treturn re;\n}\nmodule.exports = {\n\tpath: view(), \n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./index\"))\n        },\"main\")\n    },\n   \tindexRoute: indexRoute(),\n    childRoutes: childRoutes(),\n}\n```\n其中`r2Common.prefixUrl`是公共path部分（详细看下面公共path部分），可自行定义默认为空。如果定义后为`/r2`访问`/`会跳转到`/r2`路由。有点需要注意的是：**indexRoute**需要自己手动指定位置。\n\n- `index.jsx`，传进react-router处理\n\n```jsx\nimport React from 'react'\nimport Component from 'r2/module/ModuleComponent'\nimport { connect } from 'react-redux'\n\nclass View extends Component {\n\tconstructor(props){\n\t\tsuper(props);//使用了构造器,必须要super(props)继承 \n\t}\n    render() {\n\t\tsuper.render();//需要继承，本框架做了些处理，不继承，热替换失效。\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ this.props.children || \"\" }\n\t\t\t</div>\n\t\t)\t\n    }\n}\nvar ReduxView = connect((state)=>{\n\treturn {\n\t};\n})(View)\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n\thomeLink: {\n\t\tlabel:<Antd.Icon type=\"home\"/>,\n\t\tlink:'/',\n\t},\n});\nmodule.exports = ReduxView; \n```\n\n- .child_routes.js\n\n  `.child_routes.js`是个隐藏文件，自动生成。\n\n### view模式\n\nview是我们代码开发主要地方，以下是必要文件，`action.js`和`reducer.js`看需要。\n\n- `_route.js`,可当做二级路由（没layout）或三级路由（有layout），可自行修改，单务必按照以下格式。\n\n```jsx\n'use strict';\nvar view = function(){\n\t//这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过异常\n\tvar re; \n\ttry{\n\t\tre = `${r2Common.prefixUrl}/about`;\n\t}catch(e){}\n\treturn re;\n} \n//以下配置请参照React-Router官方文档\nmodule.exports = {\n\tlayout: \"main\",//在这里设置layout\n\tpath: view(), \n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./index\"))\n        },\"about\")//webpack生成文件命名\n    },\n}\n```\n\n- `index.jsx`代码结构\n\n```jsx\nimport React from 'react'\nimport Component from 'r2/module/ModuleComponent'\n\nclass View extends Component {\n    constructor(props){\n        super(props);//使用了构造器,必须要super(props)继承 \n    }\n    render() {\n        super.render();//需要继承，本框架做了些处理，不继承，热替换失效。\n        return (\n            <div></div>\n        )\n    }\n}\n\nvar ReduxView = connect((state)=>{\n    return {\n    };\n})(View)\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n    title: \"title设置处\",\n    breadcrumb:[\n        {\n            label:'home',\n            link: '/',\n        },\n        {\n            label:'导播活动列表',\n        },\n    ],\n});\nmodule.exports = ReduxView; \n```\n\n### 设置公共path\n\n假设我们的域名是localhost，平常我们都是直接访问http://localhost就看访问了页面主页。但是也有特殊要求，要在http://localhost/main访问主页，访问http://localhost也跳转到http://localhost/main(当然通过ngnix可以做些特殊处理)。这个功能就是给你设置main的。\n\n通过`r2Common.prefixUrl`（位置在`src/common/common.js`）设置，默认为空，如果不为空第一个字符必须是`/`，如\n\n```jsx\nr2Common.prefixUrl = '/main';//如果只设置为'main',访问时会报404。\n```\n\n### 设置浏览器标签title\n\nR2框架是通过react default props设置title的， 在页面index.jsx中设置如下\n\n```jsx\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n    title: \"title设置处\",\n});\n```\n\n### layout切换\n\nlayout默认是`page/view/layout/main`，设置位置为每个view中的`_route.js`，代码如下。\n\n```jsx\n'use strict';\nvar view = function(){\n\t//这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过异常\n\tvar re; \n\ttry{\n\t\tre = `${r2Common.prefixUrl}/about`;\n\t}catch(e){}\n\treturn re;\n} \nmodule.exports = {\n\tlayout: \"main\",//在这里设置layout\n\tpath: view(), \n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./index\"))\n        },\"about\")\n    },\n}\n```\n\n当设置为false时或者不设置，就没有layout。\n\n### 面包屑\n\n面包屑功能稍微特殊点，需要结合layout页面使用，目前的面包写是针对Ant Design UI做处理的。\n面包屑默认自带首页，如果需要修改可以在layout组件中的default props修改。\n\n修改layout组件默认的首页：\n\n```jsx\n//此处为layout组件\nvar ReduxView = connect((state)=>{\n\treturn {\n\t};\n})(View)\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n\thomeLink: {\n\t\tlabel:<Antd.Icon type=\"home\"/>,\n\t\tlink:'/',\n\t},\n});\nmodule.exports = ReduxView; \n```\n\n在当前页面组件的index.jsx中设置如下：\n\n```jsx\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n    title: \"title设置处\",\n    breadcrumb:[\n        {\n            //还支持函数\n            label:function(params){\n                //params是R2从路由参数`:id`中解析处理，以`-`为分隔符。\n                //如果当前路由为`/test/page/9_demo`,params = [9,'demo']\n                return params[1];\n            },\n            link: function(parms){\n                //同label\n                return \"test/page/\"+params[0]; \n            },\n        },\n        {\n            label:'循环存储查询',\n            link: \"/test\",\n        },\n        {\n            label:'循环存储查询',\n        },\n    ]\n});\n```\n\n**展示**需要手动在当前的layout组件中添加，位置自定义：\n\n```jsx\n<div className=\"r2-breadcrumb\">\n\t{ this.breadcrumb || \"\" }\n</div>\n```\n\n### 自定义route\n\nR2框架目标是让使用者可以不用理会路由层，不过也提供了自定义路由和覆盖已生成的路由。进入`R2/src/routes.js`,代码如下：\n\n```jsx\nimport routes from '.fr/.temp/routes'\n/**\n *   var routes = {\n *      path : \"/\",\n *      indexRoute: \"\",\n *      component: \"\",\n *      childRoutes: { }\n *  }\n */\n//如果想自定义这里也是可以的,\n//Object.assign(routes.childRoutes,{\n\n//})\nmodule.exports = routes;\n```\n\n如果不了解，请先了解[react-router](https://github.com/reactjs/react-router)\n\n### 定义公共actionCreator\n\nR2框架公共actionCreator定义于`R2/src/page/action`,建议公共的actionCreator就定义在这里（当然你想定义在其他地方也可以）。commonAction代码如下\n\n```jsx\nimport * as r2ActionCreator from \"r2/actionCreator\"\n\nlet requestPosts = r2ActionCreator.requestPosts; \nlet receivePosts = r2ActionCreator.receivePosts; \nexport const REQUESTLOGOUT = \"REQUESTLOGOUT\"\nexport const RECIEVELOGOUT = \"RECIEVELOGOUT\"\n\nexport function logout(successCallback,callbackAllStatus) {\n    var url = r2Common.REQUESTURL + \"/sop/v1/operators/logout\";\n    return r2fetch({\n        method: 'POST',\n        params:{},\n        callbackAllStatus,\n        successMessage: true,\n    }).dispatchFetchOne(url,requestPosts(REQUESTLOGOUT,\"logout\"),receivePosts(RECIEVELOGOUT,\"logout\"),successCallback)\n}\n```\n\n### 定义公共reducer\n\nR2框架公共reducer定义于`R2/src/page/reducer`,建议公共的reducer就定义在这里（当然你想定义在其他地方也可以）,然后运行`npm run ac`进行reducer绑定。代码如下\n\n```jsx\nimport * as actionCreator from './action' \n\nexport function logout(state = {}, action) {\n    switch (action.type) {\n        \n        case actionCreator.REQUESTLOGOUT: \n        case actionCreator.RECIEVELOGOUT:   \n            return Object.assign({}, state,action);\n        \n        default:\n            return state;\n    }\n}\n```\n\n### 全局变量定义\n\n目前R2框架的全局变量如下，详细情况API。\n\n- r2fn,公共常用方法\n- r2ActionCreator,公共actionCreator\n- r2fetch,R2封装的fetch方法\n- r2Common,当前项目公共配置或方法\n\n## 国际化功能\n\n国际化语言包位置在`R2/src/common/locale`文件中，`index.js`文件是默认是当地开发中语言。配置语言位置在`R2/src/common/common.js`中，如下：\n\n```js\n//国际化处理，language未定义就是默认使用./locale/index.js\nexport const language = require(\"./locale/en_US\")\n```\n\n使用方式如下：\n\n```jsx\n...\nreturn (\n\t<div>{r2fn.t(\"主页\")}</div>\n)\n...\n```\n\n`locale/index.js`\n\n```jsx\nmodule.exports = [\n\t\"R2框架\",\n\t\"主页\",\n\t\"关于\",\n\t\"这是一个主页页面！\",\n\t\"这是一个关于页面！\",\n]\n```\n\n`locale/en_US.js`，索引位置要跟上面的一一对应，所以最好以index.js模板进行翻译，**注意空格**哦\n\n```js\nmodule.exports = [\n\t\"R2 framework\",\n\t\"Home\",\n\t\"About\",\n\t\"This is a home page!\",\n\t\"This is a  about page!\",\n]\n```\n\n## 约定位置\n\n## 其他的一些特殊模式\n\n为了更好的管理代码，R2框架建议，所有React组件继承`r2/module/BasicComponent`(layout组件式特殊的一种)。之后新的组件包括页面index.jsx组件，数据逻辑处理请全部写在方法dataAdapter中，事件处理写在events中,redux 的dispatch actionCreator写在方法actions中。代码示例如下：\n\n```jsx\nimport React from 'react'\nimport Component from 'r2/module/ModuleComponent'\nimport { connect } from 'react-redux'\n\nclass View extends Component {\n    constructor(props){\n        super(props); \n    }\n    \n    actions(){\n        return {\n            getData(){\n                this.props.dispatch(actionCreator());\n            },\n        }\n    }\n        \n    dataAdapter(){\n        return {\n            sortData(){\n                this.props.data.sort((a,b)=>{\n                    return b-a;\n                })\n            },\n        } \n    }\n    \n    events(){\n        return {\n            handleClick(text){\n                return (e)=>{\n                    console.debug(text)\n                    console.debug(e)\n                }\n            }\n        }\n    }\n    \n    render() {\n        super.render();\n        this.sortData();\n        return (\n            <div onClick={this.handleClick(\"骚年！\")}>\n                Hello Word!\n            </div>\n        )   \n    }\n}\nmodule.exports = View; \n```\n\n定义在dataAdapter和events中的方法可以被组件`this`直接访问，R2框架内部做了处理。事件绑定也建议使用thunk模式。\n\n## 可能会遇到的坑\n\n### 使用淘宝镜像问题\n\n使用cnpm install有些包会出问题（mac上），把报错包卸掉，使用npm安装就没问题。\n以下是cnpm安装后报错报\n\n- extract-text-webpack-plugin \n\n## FAQ\n\n正在整理。 \n\n\n\n",
    "deployedAt": "2017-05-16T03:50:16.927Z"
  }, {
    "name": "react-admin",
    "git_url": "git://github.com/yezihaohao/react-admin.git",
    "author": "yezihaohao",
    "description": "react-admin system solution",
    "tags": ["admin", "react", "antd"],
    "coverPicture": "https://ucarecdn.com/2d4171cf-5e20-43f3-8231-d6c7874d08b2/",
    "readme": "# react-admin\nreact-admin system solution\n### 前言\n> 网上react后台管理开源免费的完整版项目比较少，所以利用空余时间集成了一个版本出来，已放到GitHub\n  启动和打包的时间都稍长，请耐心等待两分钟\n\n- [GitHub地址](https://github.com/yezihaohao/react-admin)\n- [预览地址](http://cheng_haohao.oschina.io/reactadmin/#/app/dashboard/index)(还没做响应式，不建议手机预览😕)\n\n### 依赖模块\n<span style=\"color: rgb(184,49,47);\">项目是用create-react-app创建的，主要还是列出新加的功能依赖包</span>\n\n<span style=\"color: rgb(184,49,47);\">点击名称可跳转相关网站😄😄</span>\n\n- [react@15.5.0](https://facebook.github.io/react/)\n- [react-router@3.0.2](https://react-guide.github.io/react-router-cn/)(<span style=\"color: rgb(243,121,52);\">react路由,4.x的差异还是比较大，暂时还是3.x的版本</span>)\n- [antd@2.9.3](https://ant.design/index-cn)(<span style=\"color: rgb(243,121,52);\">蚂蚁金服开源的react ui组件框架</span>)\n- [axios@0.16.1](https://github.com/mzabriskie/axios)(<span style=\"color: rgb(243,121,52);\">http请求模块，可用于前端任何场景，很强大👍</span>)\n- [echarts-for-react@1.2.0](https://github.com/hustcc/echarts-for-react)(<span style=\"color: rgb(243,121,52);\">可视化图表，别人基于react对echarts的封装，足够用了</span>)\n- [recharts@0.22.3](http://recharts.org/#/zh-CN/)(<span style=\"color: rgb(243,121,52);\">另一个基于react封装的图表，个人觉得是没有echarts好用</span>)\n- [nprogress@0.2.0](https://github.com/rstacruz/nprogress)(<span style=\"color: rgb(243,121,52);\">顶部加载条，蛮好用👍</span>)\n- [react-draft-wysiwyg@1.9.6](https://github.com/jpuri/react-draft-wysiwyg)(<span style=\"color: rgb(243,121,52);\">别人基于react的富文本封装，如果找到其他更好的可以替换</span>)\n- [react-draggable@2.2.4](https://github.com/mzabriskie/react-draggable)(<span style=\"color: rgb(243,121,52);\">拖拽模块，找了个简单版的</span>)\n- [screenfull@3.2.0](https://github.com/sindresorhus/screenfull.js/)(<span style=\"color: rgb(243,121,52);\">全屏插件</span>)\n- [photoswipe@4.1.2](https://github.com/dimsemenov/photoswipe)(<span style=\"color: rgb(243,121,52);\">图片弹层查看插件，不依赖jQuery，还是蛮好用👍</span>)\n- [animate.css@3.5.1](http://daneden.me/animate)(<span style=\"color: rgb(243,121,52);\">css动画库</span>)\n- 其他小细节省略\n\n### 功能模块\n<span style=\"color: rgb(184,49,47);\">备注：项目只引入了ant-design的部分组件，其他的组件antd官网有源码，可以直接复制到项目中使用，后续有时间补上全部组件。</span>\n<span style=\"color: rgb(184,49,47);\">项目使用了antd的自定义主题功能-->黑色，若想替换其他颜色，具体操作请查看antd官网</span>\n<!--more-->\n\n- 首页\n    - 完整布局\n    - 换肤(全局功能，暂时只实现了顶部导航的换肤，后续加上其他模块)\n- 导航菜单\n    - 顶部导航(菜单伸缩，全屏功能)\n    - 左边菜单(增加滚动条以及适配路由的active操作)\n- UI模块\n    - 按钮(antd组件)\n    - 图标(antd组件并增加彩色表情符)\n    - 加载中(antd组件并增加顶部加载条)\n    - 通知提醒框(antd组件)\n    - 标签页(antd组件)\n    - 轮播图(ant动效组件)\n    - 富文本\n    - 拖拽\n    - 画廊\n- 动画\n    - 基础动画(animate.css所有动画)\n    - 动画案例\n- 表格\n    - 基础表格(antd组件)\n    - 高级表格(antd组件)\n    - 异步表格(数据来自掘金酱的接口)\n- 表单\n    - 基础表单(antd组件)\n- 图表\n    - echarts图表\n    - recharts图表\n- 页面\n    - 登录页面(包括GitHub第三方登录)\n    - 404页面\n\n### 功能截图\n#### 首页\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd1.gif)\n#### 按钮图标等\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd2.gif)\n#### 轮播图\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd3.gif)\n#### 富文本\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd4.gif)\n#### 拖拽\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd5.gif)\n#### 画廊\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd6.gif)\n#### 动画\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd7.gif)\n#### 表格\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd8.gif)\n#### 表单\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd9.gif)\n#### 图表\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd10.gif)\n#### 页面\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd11.gif)\n\n### 代码目录\n```js\n+-- build/                                  ---打包的文件目录\n+-- config/                                 ---npm run eject 后的配置文件目录\n+-- node_modules/                           ---npm下载文件目录\n+-- public/                                 \n|   --- index.html\t\t\t\t\t\t\t---首页入口html文件\n|   --- npm.json\t\t\t\t\t\t\t---echarts测试数据\n|   --- weibo.json\t\t\t\t\t\t\t---echarts测试数据\n+-- src/                                    ---核心代码目录\n|   +-- axios                               ---http请求存放目录\n|   |    --- index.js\n|   +-- components                          ---各式各样的组件存放目录\n|   |    +-- animation                      ---动画组件\n|   |    |    --- ...   \n|   |    +-- charts                         ---图表组件\n|   |    |    --- ...   \n|   |    +-- dashboard                      ---首页组件\n|   |    |    --- ...   \n|   |    +-- forms                          ---表单组件\n|   |    |    --- ...   \n|   |    +-- pages                          ---页面组件\n|   |    |    --- ...   \n|   |    +-- tables                         ---表格组件\n|   |    |    --- ...   \n|   |    +-- ui                             ---ui组件\n|   |    |    --- ...   \n|   |    --- BreadcrumbCustom.jsx           ---面包屑组件\n|   |    --- HeaderCustom.jsx               ---顶部导航组件\n|   |    --- Page.jsx                       ---页面容器\n|   |    --- SiderCustom.jsx                ---左边菜单组件\n|   +-- style                               ---项目的样式存放目录，主要采用less编写\n|   +-- utils                               ---工具文件存放目录\n|   --- App.js                              ---组件入口文件\n|   --- index.js                            ---项目的整体js入口文件，包括路由配置等\n--- .env                                    ---启动项目自定义端口配置文件\n--- .eslintrc                               ---自定义eslint配置文件，包括增加的react jsx语法限制\n--- package.json                                    \n```\n### 安装运行\n##### 1.下载或克隆项目源码\n##### 2.npm安装相关包文件(国内建议增加淘宝镜像源，不然很慢，你懂的😁)\n```js\nnpm i\n```\n##### 3.启动项目\n```js\nnpm start\n```\n##### 4.打包项目\n```js\nnpm run build\n```\n\n### 结尾\n该项目会不定时更新，后续时间会添加更多的模块\n\n若有问题，可加QQ群264591039与我交流\n\n如果对你有帮助，给个star哟~~❤️❤️❤️❤️\n\n",
    "deployedAt": "2017-07-23T11:35:39.599Z"
  }, {
    "coverPicture": "https://ucarecdn.com/06abdd43-dfa6-4204-a917-babe2a460262/",
    "name": "react-admin-template",
    "git_url": "git://github.com/woleicom/react-admin-template.git",
    "author": "woleicom",
    "description": "react开发脚手架二次开发后台管理系统模板,antd、国际化、router、redux、ui仿antd-admin-pro、mock、动态路由、动态菜单权限、页面状态缓存",
    "tags": [],
    "deployedAt": "2020-05-07T06:35:14.497Z"
  }, {
    "name": "react-ame-admin",
    "git_url": "git://github.com/fachilles/react-ame-admin.git",
    "author": "fachilles",
    "description": "A frontend Framework for building admin applications using ReactJS, Antd, Map, Echarts.",
    "tags": ["React.js", "Map", "ECharts", "Antd", "Saga"],
    "coverPicture": "https://ucarecdn.com/e68a8bb0-5ddb-43f5-b41b-ae7fb2a09234/",
    "readme": "React AME Admin\n========\n[![React](https://img.shields.io/badge/react-^16.2.0-brightgreen.svg?style=flat-square)](https://github.com/facebook/react)\n[![Ant Design](https://img.shields.io/badge/ant--design-^3.0.3-yellowgreen.svg?style=flat-square)](https://github.com/ant-design/ant-design)\n[![MIT](https://img.shields.io/dub/l/vibe-d.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n\n[![Build Status](https://travis-ci.org/fachilles/react-admin.svg?branch=master)](https://travis-ci.org/fachilles/react-admin)\n\n\n\nA frontend Framework for building admin applications on top of Restful API, using React, Antd, Map, Echarts.\n\n## Features\n* Based on the actual project.\n* To provide background admin system with common scenarios, based Antd UI design language.\n* To provide the Baidu Map visual demo that depends on the react-bmap component.\n* Include actual Charts, Calendar and so on.\n\n## Installation\n1.Download or clone code.\n\n2.Install dependency modules.\n```js\nnpm install\n```\n\n3.Start project.\n```js\nnpm start\n```\n\n## Screen Shot\n### Dashboard\n![shot](https://raw.githubusercontent.com/fachilles/fachilles.github.io/master/static/imgs/react-admin/react-admin-1.png)   \n\n### Baidu Map\n![shot](https://raw.githubusercontent.com/fachilles/fachilles.github.io/master/static/imgs/react-admin/react-admin-2.png)\n\n### Echarts\n![shot](https://raw.githubusercontent.com/fachilles/fachilles.github.io/master/static/imgs/react-admin/react-admin-3.png)\n\n\n\n## License\nReact Admin is licensed under the [MIT Licence](https://github.com/marmelab/admin-on-rest/blob/master/LICENSE.md).\n\n",
    "deployedAt": "2018-03-05T07:45:54.673Z"
  }, {
    "name": "react-antd",
    "git_url": "git://github.com/sosout/react-antd.git",
    "author": "sosout",
    "description": "基于react + redux + immutable + less + ES6/7 + webpack + fetch + react-router + antd(1.x)实现的SPA后台管理系统模板",
    "tags": ["react", "antd", "redux"],
    "coverPicture": null,
    "readme": "# react-antd(新版后台很快就与大家见面了)\n[![React Native](https://img.shields.io/badge/react-^15.3.2-brightgreen.svg?style=flat-square)](https://github.com/facebook/react)\n[![Redux](https://img.shields.io/badge/redux-^4.4.5-yellowgreen.svg?style=flat-square)](https://github.com/reactjs/redux)\n[![Redux Immutablejs](https://img.shields.io/badge/immutablejs-^0.0.8-orange.svg?style=flat-square)](https://github.com/indexiatech/redux-immutablejs)\n[![Ant Design](https://img.shields.io/badge/ant--design-^2.7.2-yellowgreen.svg?style=flat-square)](https://github.com/ant-design/ant-design)\n\n[![MIT](https://img.shields.io/dub/l/vibe-d.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n## 前言\n>  本工程主要基于react + redux + immutable + less + ES6/7 + webpack + fetch + react-router + antd(1.x)实现的SPA后台管理系统模板。\n\n>  如果觉得不错的话，请star一下吧 😊\n\n>  编码时间：8:00——9:30, 下班时间——24:00，其他时间要工作。代码未优化，处女座代码必须要优化。由于代码延后，先向大家说声抱歉。您有什么问题可以私信我segmentfault。\n\n[线上demo](http://antd.sosout.com/)\n\n## 关于我自己\n>  使用技术： react + redux + immutable + less + ES6/7 + webpack + fetch + react-router + antd(1.x)\n\n>  项目说明： 此项目是本人空余时间搭建的。希望大家提供宝贵的意见和建议，谢谢。\n\n>  邮&emsp;&emsp;箱： sosout@yeah.net\n\n>  个人网站： http://www.sosout.com/\n\n>  个人博客： http://blog.sosout.com/\n\n>  个人简书： http://www.jianshu.com/users/23b9a23b8849/latest_articles\n\n>  segmentfault：https://segmentfault.com/u/sosout\n\n### 下载\n\n```\n# git clone\n\ngit clone https://github.com/sosout/react-antd.git\n\ncd react-antd\n```\n\n### 安装\n```bush\n// 安装前请先确保已安装node和npm\n// 需要提前在全局安装webpack和webpack-dev-server,如果已安装请忽略\nnpm install webpack -g\nnpm install webpack-dev-server -g\n\n// 安装成功后,再安装依赖\nnpm install\n```\n### 运行\n```bush\nnpm run dev （正常编译模式，注意：index.html里必须手动引用app.css，<link href=\"/antd/dist/app.css\" rel=\"stylesheet\" />，否则没有样式）\n\nnpm run hot （热替换编译模式，注意：热替换模式下index.html里去掉引用app.css）\n  \nnpm run dist （发布生产版本，对代码进行混淆压缩，提取公共代码，分离css文件）\n```\n\n### 访问\n在浏览器地址栏输入[http://127.0.0.1:8888](http://127.0.0.1:8888)\n\n### 目标功能\n- [x] 登录页面\n- [x] 全站布局\n- [x] 全站路由\n- [ ] 对接接口，优化代码(冗余代码，不规则写法，界面样式)\n- [ ] 后台系统常用场景会逐个完善\n\n####历史更新\n  *2017.02.20*\n\n  \t1. 初始化项目目录;\n\n  \t2. webpack配置完成; \n\n  \t3. 登录退出;\n\n  \t4. 整体布局;\n\n  \t5. 菜单映射路由;\n",
    "deployedAt": "2017-05-10T10:23:09.622Z"
  }, {
    "name": "react-antd-admin",
    "git_url": "git://github.com/fireyy/react-antd-admin.git",
    "author": "fireyy",
    "description": "React Ant.design Admin UI",
    "tags": ["react", "antd"],
    "coverPicture": "https://ucarecdn.com/7c2b3bca-5824-4601-b5c1-8add07d03ae4/",
    "readme": "## React Ant.Design Admin UI\n\n<p align=\"center\">\n  <a href=\"https://react-antd-admin.now.sh\" target=\"_blank\">\n    <img src=\"demo.png\" width=\"700px\">\n    <br>\n    Live Demo\n  </a>\n</p>\n\n## Features\n\n- [React](https://facebook.github.io/react/)\n- [Redux](https://github.com/reactjs/redux)\n- [Ant.Design](http://ant.design/)\n- [Babel](https://babeljs.io/)\n- [webpack](https://webpack.github.io/)\n- [mocha](https://mochajs.org/)\n- [enzyme](https://github.com/airbnb/enzyme)\n\n## Getting Started\n\nJust clone the repo and install the necessary node modules:\n\n```shell\n$ git clone https://github.com/fireyy/react-antd-admin\n$ cd react-antd-admin\n$ npm install\n```\n\n## Run Dev\n\n```shell\n$ npm run dev\n```\n\n## Run test spec\n\n```shell\n$ npm run test\n```\n\n## Build\n\n```shell\n$ npm run build\n```\n\n## Changelog\n\n### 0.1.2\n\n* 更新依赖组件到最新版本\n* 增加 page2 demo\n",
    "deployedAt": "2017-05-10T09:39:08.923Z"
  }, {
    "name": "react-antd-admin-jiangxy",
    "git_url": "git://github.com/jiangxy/react-antd-admin.git",
    "author": "jiangxy",
    "description": "用React和Ant Design搭建的一个通用管理后台",
    "tags": ["react", "antd"],
    "coverPicture": "https://ucarecdn.com/2432a297-b1f9-46b7-ade7-cfcaef91955d/",
    "readme": "# React通用后台\n\n目标是快速搭建一个可用的后台界面，可以先看下[DEMO(普通)](http://jiangxy.github.io/react-antd-admin) / [DEMO(TAB模式)](http://jiangxy.github.io/react-antd-admin/tabMode)，用户名/密码：guest/guest。友情提示：这个DEMO还是有点大的，加载可能稍慢，注意网速。。。\n\n也可以[点击这里](docs/Screenshot.md)查看截图，包含一些主要特性的演示。\n\n如果对React或Ant Design感兴趣，但又不知如何入手的话，也可以参考下这个项目。\n \n* [这是个啥东西](#需求背景)\n* [Quick Start](#quick-start)\n* [更新记录](CHANGELOG.md)\n* [TODO](docs/TODO.md)\n* [一些说明](#一些说明)\n* [更多文档](docs/README.md)\n\n## 需求背景\n\n其实总结下就一句话：简化后端人员的前端开发。。。\n\n虽然俺是个java开发，但总是难免要做一些前端的东西。比如各种内部系统，各种运营后台，总要有个界面给人用的吧。如果是自己用的话当然命令行就可以将就下了。。。\n\n内部系统么，公司也不会很重视，不会有专业的前端来搞。后端人员自己搞搞，能用就行了。\n\n然而每次写前端都很痛苦，无论以前用velocity+jquery+bootstrap，还是现在用React。首先有很多重复的工作，很多后台界面其实都长得差不多；其次有时会为一些很小的需求投入很大精力，写很多业务逻辑，但这些代码都是不可复用的，感觉花这么多时间不值得，毕竟不是本职工作啊，只是个二手前端。。。甚至有时折腾css就能搞一天。。。\n\n于是就想着能否一劳永逸，搞个比较通用的东西出来，**尽量用写配置的方式替代写代码**。从某种角度上说，和[Metronic](http://keenthemes.com/preview/metronic/)/[AdminLTE](https://almsaeedstudio.com/preview)的目标有点相似。正好前段时间在研究[Ant Design](http://ant.design)，做了一些尝试，于是有了这个项目。当然并不完美，对于React和Ant Design，我也是边学边用的。\n\n首先看下，常见的后台系统都是什么样子的？\n\n![](docs/overview.png)\n\n是不是大部分后端系统的界面都差不多这个样子？分为几个主要的部分：\n\n* 侧边栏：上面是一个logo，下面是可展开的各级菜单。点击菜单项时，右边会展示相应的内容。\n* Header：展示当前登录的用户名和面包屑导航，还可能有自定义的一些菜单之类\n* 内容区：展示具体的内容，跟业务有关的\n* Footer：展示copyright之类的\n* 还有些看不到的，比如登录、注销等\n\n于是我做的**第一件事**，就是搭建一个框架，用配置文件的方式，生成这样一个界面。你可以定义自己的侧边栏（参考[src/menu.js](src/menu.js)），定义点击侧边栏菜单时在右边渲染什么组件（参考[src/index.js](src/index.js)，其实就是React Router的配置），包括header/footer/登录校验/单点登录等，都可以配置（参考[src/config.js](src/config.js)）。\n\n在此基础上，我只要根据不同的后台系统的业务逻辑，去写不同的React组件，再配置下菜单就可以了。貌似简化很多了。缺点就是所有后台都长一个样子。。。\n\n但能否更简化些呢？在各种运营后台中，最常见的操作是什么？我的感觉，最常见的就是各种数据库表的CRUD。我们经常赋予数据库字段各种业务意义。比如将某条记录的status字段改为-1，表示屏蔽这个商品；或者新增一个商品，其实就是某个表新增一条记录之类的。运营的很多操作，是不是都能简化成CRUD？于是我又做了**第二件事**：写了一个通用的CRUD组件，我称之为DBTable。大概长这个样子：\n\n![](docs/DBTable.png)\n\n也是分为几个部分：\n\n* 查询条件区：其实就是个表单，所有表单项都是由配置文件生成的（参考[src/schema/test.querySchema.js](src/schema/test.querySchema.js)），支持各种数据类型\n* 各种操作：提供常用的CRUD/导入/导出等操作\n* 查询结果展示：就是一个表格，这个表格的schema也是可配置的（参考[src/schema/test.dataSchema.js](src/schema/test.dataSchema.js)）\n* 针对单条数据的操作：也是可配置的（参考[src/schema/testAction.dataSchema.js](src/schema/testAction.dataSchema.js#L52)）\n\n另外提醒下，1.4.0版本之后，querySchema和dataSchema不一定要用js文件配置了，可以从服务端异步加载了，参考[异步schema相关配置](docs/AsyncSchema.md)。\n\n使用者只用关心自己的schema文件就可以了，不用在意渲染出来是什么样子。利用DBTable组件，就可以快速实现对某个表的CRUD了（其实不只可以用于数据库，符合这种操作模式的都可以用）。缺点就是没有了明确的业务含义，运营MM们可能不会用。。。她们又不知道CRUD是啥。所以需要培训下，但也是套近乎的好机会啊😄。\n\n但是且慢，只有界面是不够的，**如何跟后端对接**？于是我又定义了[后端接口格式](docs/Ajax.md)。只要按这个格式去写后端接口，就可以跟这套通用后台无缝对接。如果你跟我一样是个懒人，而且恰巧是用java的，又恰巧后端是基于Spring的，那也可以使用我提供的一个[小工具](https://github.com/jiangxy/react-java-goos)直接生成后端接口，然后填写自己的业务逻辑就可以了。\n\n使用这套工具，如果一切顺利的话，你能很快的搭出一个后台界面，包含基础的登录/菜单/导航/CRUD/导入/导出等功能，并且界面&体验也还算看得过去，不用任何编码，只是修改配置。\n\n我尽量做到**配置优于代码**，尽量少写代码。但完全不写代码是不可能的，尤其是有个性化需求时，这就要自己权衡了。这套工具比较适合项目初期做个原型、或者对后台要求不高的情况。\n\n## Quick Start\n\n在自己的机器上调试：\n\n1. 保证node版本5.3+，npm版本3.3+\n2. clone下来后，`npm install`，安装必要的依赖\n3. `npm run dev`，启动webpack-dev-server，打开浏览器`http://localhost:8080`查看效果。默认是debug模式，不会请求后端接口，所有数据都是mock的，相关配置见[src/config.js](src/config.js)\n4. 如果有必要的话可以把logLevel设置为debug（见[src/config.js](src/config.js)），会输出详细的debug日志，打开chrome的console就可以看到。\n\n用在自己的项目中：\n\n1. 保证node版本5.3+，npm版本3.3+\n2. clone下来后，`npm install`，安装必要的依赖\n3. 参考[src/menu.js](src/menu.js)，按自己的需要配置侧边栏和顶部菜单\n4. 修改[src/index.js](src/index.js)中的路由表，保证和menu.js中的菜单项一致，否则可能404\n5. 如果要用DBTable组件的话，参考[src/schema](src/schema)下的例子，编写自己的querySchema和dataSchema文件。在路由表中配置DBTable组件时，要把表名作为props传入，类似`<Route path=\"option1\" tableName=\"test\" component={DBTable}/>`。\n6. 修改[src/config.js](src/config.js)中相关配置，比如项目名、footer、单点登录等等。\n7. `npm run prod`，编译js文件，然后将dist目录下的所有js/css/html文件拷贝到自己的工程中，前端的工作就完成了。一般会有一个index.html，一个bundle.min.css，以及多个js文件，跟是否使用动态路由有关。\n8. 开发后端接口，接口规范见[这里](docs/Ajax.md)。如果是java后端，可以使用[这个工具](https://github.com/jiangxy/react-java-goos)帮你生成。\n9. 启动你的web服务，访问`index.html`查看效果。\n\n其他一些命令:\n\n1. `npm run eslint`/`npm run stylelint`/`npm run lesshint`，一些lint工具。\n2. `npm run clean`，删除dist目录下的bundle*.js。\n\n## 一些说明\n\n### 安全/权限问题\n\n目前对安全&权限都没考虑进去，如果有这方面的要求，只能后端校验了。在请求后端接口时校验用户的身份和权限。\n\n权限问题也很麻烦，感觉不太好做成通用的东西，如果有需求的话，还是定制开发比较好。\n \n### 兼容性\n\n能力所限，只能保证chrome中正常使用。。。话说在各种内部系统中，要求只能用chrome也挺常见吧。\n\n如果我解决了兼容性问题，就不是二手前端了。。。\n\n另外由于我是在mac下进行开发的，所以对windows下的情况测试的比较少，有问题欢迎提issue，我尽力解决。\n\n### bundle size\n\n单页应用的首屏渲染一直都是个大问题。webpack打包出来的bundle.js一般都很大，虽然我想了很多办法去优化，但总是还会有1M多，实在减不下去了。。。所以应用到外网时要小心，初次加载时可能比较慢。\n\n内网的话就无所谓了，一般网速都不是问题。\n",
    "deployedAt": "2017-05-10T10:09:39.074Z"
  }, {
    "coverPicture": null,
    "name": "react-antd-dashboard",
    "git_url": "git://github.com/theeranan/react-antd-dashboard.git",
    "author": "theeranan",
    "description": null,
    "tags": [],
    "deployedAt": "2020-10-27T07:58:18.157Z"
  }, {
    "name": "react-antd-demo",
    "git_url": "git://github.com/luozhihao/react-antd-demo.git",
    "author": "luozhihao",
    "description": "基于react及antd的demo",
    "tags": ["antd", "react"],
    "coverPicture": null,
    "readme": "## react-antd-demo\n基于react及antd的demo\n\n## 演示地址\ndemo: [http://luozhihao.github.io/react-antd-demo/index.html](http://luozhihao.github.io/react-antd-demo/index.html)\n\n## 文档说明\n地址：[http://www.cnblogs.com/luozhihao/p/5579786.html](http://www.cnblogs.com/luozhihao/p/5579786.html)\n\n## 本地运行\n> npm install\n\n> npm run dev\n",
    "deployedAt": "2017-05-10T10:22:39.679Z"
  }, {
    "name": "react-antd-dva",
    "git_url": "git://github.com/sosout/react-antd-dva.git",
    "author": "sosout",
    "description": "基于react + ant-design + dva + Mock 企业级后台管理系统最佳实践",
    "tags": ["dva", "react", "ant-design", "Mock ", "webpack"],
    "coverPicture": "https://ucarecdn.com/21123acc-2d3d-4009-aac3-0a5728854fda/",
    "readme": "# react-antd-dva\n\n基于react + ant-design + dva + Mock 企业级后台管理系统最佳实践\n\n## 特性\n\n- :gem: **优雅美观**：基于 Ant Design 体系精心设计\n- :rocket: **最新技术栈**：使用 React/dva/antd 等前端前沿技术开发\n- :1234: **Mock 数据**：实用的本地数据调试方案\n\n## 模板\n\n- [x] 项目搭建\n- [x] 登录\n- [ ] 主页\n\n## 使用\n\n```bash\n$ git clone https://github.com/sosout/react-antd-dva.git\n$ cd react-antd-dva\n$ npm install\n$ npm start         # 访问 http://localhost:8888\n```\n\n## 兼容性\n\n现代浏览器及 IE11。\n\n\n## dva用法\n\n### dynamic\n\n解决组件动态加载问题的 util 方法，基于 react-async-component 实现。比如：\n\n```javascript\nimport dynamic from 'dva-react-router-3/dynamic';\n\nconst UserPageComponent = dynamic({\n  app,\n  models: () => [\n    import('./models/users'),\n  ],\n  component: () => import('./routes/UserPage'),\n});\n```\n\n## react-router 4.0\n\n### exact（boolean类型）\n\n如果为 true, 则仅在位置完全匹配时才应用。\n\n```javascript\npath\tlocation.pathname\texact\tmatches?\n/one\t/one/two\t        true\tno\n/one\t/one/two\t        false\tyes\n```\n\n## React PureComponent\n\n### 为什么使用？\n\nReact15.3中新加了一个 PureComponent 类，顾名思义， pure 是纯的意思， PureComponent 也就是纯组件，取代其前身 PureRenderMixin , PureComponent 是优化 React 应用程序最重要的方法之一，易于实施，只要把继承类从 Component 换成 PureComponent 即可，可以减少不必要的 render 操作的次数，从而提高性能，而且可以少写 shouldComponentUpdate 函数，节省了点代码。\n\n### 原理\n\n当组件更新时，如果组件的 props 和 state 都没发生改变， render 方法就不会触发，省去 Virtual DOM 的生成和比对过程，达到提升性能的目的。具体就是 React 自动帮我们做了一层浅比较：\n\n```javascript\nif (this._compositeType === CompositeTypes.PureClass) {\n  shouldUpdate = !shallowEqual(prevProps, nextProps)\n  || !shallowEqual(inst.state, nextState);\n}\n````\n\n而 shallowEqual 又做了什么呢？会比较 Object.keys(state | props) 的长度是否一致，每一个 key 是否两者都有，并且是否是一个引用，也就是只比较了第一层的值，确实很浅，所以深层的嵌套数据是对比不出来的。\n\n### 使用指南\n\n#### 易变数据不能使用一个引用\n\n示例：\n\n```javascript\nclass App extends PureComponent {\n  state = {\n    items: [1, 2, 3]\n  }\n  handleClick = () => {\n    const { items } = this.state;\n    items.pop();\n    this.setState({ items });\n  }\n  render() {\n    return (<div>\n      <ul>\n        {this.state.items.map(i => <li key={i}>{i}</li>)}\n      </ul>\n      <button onClick={this.handleClick}>delete</button>\n    </div>)\n  }\n}\n```\n\n会发现，无论怎么点 delete 按钮， li 都不会变少，因为 items 用的是一个引用， shallowEqual 的结果为 true 。改正：\n\n```javascript\nhandleClick = () => {\n  const { items } = this.state;\n  items.pop();\n  this.setState({ items: [].concat(items) });\n}\n```\n\n这样每次改变都会产生一个新的数组，也就可以 render 了。这里有一个矛盾的地方，如果没有 items.pop(); 操作，每次 items 数据并没有变，但还是 render 了，这不就很操蛋么？呵呵，数据都不变，你 setState 干嘛？\n\n#### 不变数据使用一个引用\n\n##### 子组件数据\n\n上面易变数据不能使用一个引用的案例中有一个点击删除操作，如果我们删除的代码这么写：\n\n```javascript\nhandleClick = () => {\n  const { items } = this.state;\n  items.splice(items.length - 1, 1);\n  this.setState({ items });\n}\n```\n\nitems 的引用也是改变的，但如果 items 里面是引用类型数据：\n\n```javascript\nitems: [{a: 1}, {a: 2}, {a: 3}]\n```\n\n这个时候\n\n```javascript\nstate.items[0] === nextState.items[0] // false\n```\n\n子组件里还是re-render了。这样就需要我们保证不变的子组件数据的引用不能改变。这个时候可以使用immutable-js函数库。\n\n##### 函数属性\n\n我们在给组件传一个函数的时候，有时候总喜欢:\n\n```javascript\n// 1\n<MyInput onChange={e => this.props.update(e.target.value)} />\n// 2\nupdate(e) {\n  this.props.update(e.target.value)\n}\nrender() {\n  return <MyInput onChange={this.update.bind(this)} />\n}\n```\n\n由于每次 render 操作 MyInput 组件的 onChange 属性都会返回一个新的函数，由于引用不一样，所以父组件的 render 也会导致 MyInput 组件的 render ，即使没有任何改动，所以需要尽量避免这样的写法，最好这样写：\n\n```javascript\n// 1,2\nupdate = (e) => {\n  this.props.update(e.target.value)\n}\nrender() {\n  return <MyInput onChange={this.update} />\n}\n```\n\n##### 空对象、空数组或固定对象\n\n有时候后台返回的数据中，数组长度为0或者对象没有属性会直接给一个 null ，这时候我们需要做一些容错：\n\n```javascript\nclass App extends PureComponent {\n  state = {\n    items: [{ name: 'test1' }, null, { name: 'test3'  }]\n  }\n  store = (id, value) => {\n    const { items } = this.state;\n    items[id]  = assign({}, items[id], { name: value });\n    this.setState({ items: [].concat(items) });\n  }\n  render() {\n    return (<div>\n      <ul>\n        {this.state.items.map((i, k) =>\n          <Item style={{ color: 'red' }} store={this.store} key={k} id={k} data={i || {}} />)\n        }\n      </ul>\n    </div>)\n  }\n}\n```\n\n当某一个子组件调用 store 函数改变了自己的那条属性，触发 render 操作，如果数据是 null 的话 data 属性每次都是一个 {}，{} ==== {} 是 false 的，这样无端的让这几个子组件重新 render 了。{ color: 'red' }也是一样。\n\n最好设置一个 defaultValue 为 {},如下：\n\n```javascript\nstatic defaultValue = {}\nconst style = { color: 'red' };\n<Item style={style} store={this.store} key={k} id={k} data={i || defaultValue} />\n```\n\n### 复杂状态与简单状态不要共用一个组件\n\n这点可能和 PureComponent 没多少关系，但做的不好可能会浪费很多性能，比如一个页面上面一部分是一个复杂的列表，下面是一个输入框，抽象代码：\n\n```javascript\nchange = (e) => {\n  this.setState({ value: e.target.value });\n}\nrender() {\n  return (<div>\n    <ul>\n      {this.state.items.map((i, k) => <li key={k}> {...}</li>)}\n    </ul>\n    <input value={this.state.value} onChange={this.change} />\n  </div>)\n}\n```\n\n表单和列表其实是没有什么关联的，表单的值也可能经常变动，但它的会给列表也带来必然的 diff 操作，这是没必要的，最好是给列表抽出成一个单独的 PureComponent 组件，这样 state.items 不变的话，列表就不会重新 render 了。\n\n### 与 shouldComponentUpdate 共存\n\n如果 PureComponent 里有 shouldComponentUpdate 函数的话，直接使用 shouldComponentUpdate 的结果作为是否更新的依据，没有 shouldComponentUpdate 函数的话，才会去判断是不是 PureComponent ，是的话再去做 shallowEqual 浅比较。\n\n```javascript\n// 这个变量用来控制组件是否需要更新\nvar shouldUpdate = true;\n// inst 是组件实例\nif (inst.shouldComponentUpdate) {\n  shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n} else {\n  if (this._compositeType === CompositeType.PureClass) {\n    shouldUpdate = !shallowEqual(prevProps, nextProps) ||\n      !shallowEqual(inst.state, nextState);\n  }\n}\n```\n\n### 老版本兼容写法\n\n```javascript\nimport React { PureComponent, Component } from 'react';\nclass Foo extends (PureComponent || Component) {\n  //...\n}\n```\n\n这样在老版本的 React 里也不会挂掉。\n\n### 总结\n\nPureComponent 真正起作用的，只是在一些纯展示组件上，复杂组件用了也没关系，反正 shallowEqual 那一关就过不了，不过记得 props 和 state 不能使用同一个引用哦。\n",
    "deployedAt": "2017-12-08T10:02:29.375Z"
  }, {
    "coverPicture": "https://ucarecdn.com/66988848-c89d-473f-9145-4110ad61dc0d/",
    "name": "react-antd-multi-tabs-admin",
    "git_url": "git://github.com/hsl947/react-antd-multi-tabs-admin.git",
    "author": "hsl947",
    "description": "ts+react+antd-多页签后台模板(纯净版，非 antd pro！)",
    "tags": ["react", "redux", "hooks", "typescript", "tabs", "antd", "ant design", "multitabs"],
    "deployedAt": "2020-09-27T01:42:45.788Z"
  }, {
    "name": "react-antd-redux-webpack-es6-spa-boilerplate",
    "git_url": "git://github.com/zkboys/react-antd-redux-webpack-es6-spa-boilerplate.git",
    "author": "zkboys",
    "description": "管理系统架构，基于 antd + react + redux + webpack + ES6 的单页面应用",
    "tags": [],
    "coverPicture": "https://ucarecdn.com/94ac0966-5acc-4f4a-a4de-eba4a174d0d6/",
    "readme": "# react-antd-redux-webpack-es6-spa-boilerplate\n> 管理系统架构，基于 antd + react + redux + webpack + ES6 的单页面应用\n\n管理系统往往是大量的表单表格等页面，存在大量的体力劳动，基于长期的管理系统开发，整理出一套管理系统架构、组件、通用方法来提高开发效率。\n可以以此为基础，快速创建管理系统项目。simple is all，make coding easy!\n\n## 架构功能一览：\n\n1. UI基于antd，完整的登录、退出登录、菜单等结构。\n1. 前后端分离，前后端可以并行开发，前端单独部署。\n1. 基于webpack2.0进行构建，对构建进行了优化，提高rebuild速度，提高开发效率。\n1. 菜单、页面标题、面包屑导航自动获取+可配置。\n1. redux写法封装、简化的redux写法、与存储自动同步、异步redux写法、异常处理，相关文档在: src/redux/README.md。\n1. ajax自动提示封装、全局+局部配置、ajax高阶组件自动释放资源、前后端约定统一错误处理。\n1. 路由简化配置，页面直接声明一个PAGE_ROUTE变量，自动生成路由配置文件。相关文档在: src/route/README.md。\n1. 后端交互统一封装成service、提供基于restFull，提供BaseService基础方法、service高阶组件自动释放资源。\n1. mock规则可配置，快速切换mock数据与真实数据\n1. 基础CRUD代码生成，减少不必要的体力劳动。脚本在bin目录下。\n1. css 模块化，有效避免css命名冲突，提高css命令灵活性。\n1. 使用eslint 结合 webpack 统一代码规范，降低各个开发人员直接的沟通成本，提高代码质量。\n\n## 开发环境\n1. node v7.2.1\n2. yarn v0.27.5\n3. 兼容windows/mac 还没在ubuntu上开发，未知。\n\n## 安装、开发/生产构建\n> 推荐使用[yarn](https://yarnpkg.com/zh-Hans/)进行构建，yarn可以更好的组织依赖，下载依赖速度更快，也许还需要翻墙。\n您也可以使用[npm](https://www.npmjs.com/)；\n下载速度慢，可以考虑使用[淘宝的cnpm](http://npm.taobao.org/)\n\nyarn:\n``` bash\n# 安装所有依赖\n$ yarn\n\n# 启动开发\n$ yarn dev\n\n# 生产环境构建\n$ yarn build\n\n# 清除缓存（如果发现源码与webpack编译文件明显不一致，有可能是缓存脏数据）\n$ yarn clear-cache\n```\nnpm:\n``` bash\n# 安装所有依赖\n$ npm install\n\n# 启动开发\n$ npm run dev\n\n# 生产环境构建\n$ npm run build\n\n# 清除缓存（如果发现源码与webpack编译文件明显不一致，有可能是缓存脏数据）\n$ npm run clear-cache\n```\ncnpm:\n``` bash\n\n# 安装所有依赖\n$ cnpm install\n\n# 启动开发\n$ cnpm run dev\n\n# 生产环境构建\n$ cnpm run build\n\n# 清除缓存（如果发现源码与webpack编译文件明显不一致，有可能是缓存脏数据）\n$ cnpm run clear-cache\n\n```\n\n## 项目结构\n```\n.\n├── .happypack                      // happypack缓存文件\n├── bin                             // 代码生成脚本\n├── builder                         // 构建工具\n├── dist                            // 开发构建时，生成的临时文件，生产环境不用\n├── local-default                   // 个性化配置，用户分模块打包、个人配置等，只开发模式有效，目前没启用，预留功能\n├── public                          // 构建之后的代码，用户生产环境部署\n├── src                             // 开发主要目录\n│    ├── commons                    // 系统公共方法，组件\n│    ├── frame                      // 页面框架，头部+左侧等\n│    ├── mock                       // mock数据，截获ajax请求，便于前端单独调试\n│    │   └── mockdata               // 模拟数据 mockjs\n│    ├── pages                      // 业务页面，业务开发主要关系目录\n│    │   ├── error                  // 一些error页面，404 403 401 等等\n│    │   ├── examples               // 一些例子\n│    │   └── home                   // 首页\n│    ├── redux                      // redux 相关\n│    │   ├── actions                // redux action定义\n│    │   ├── reducers               // redux reducers定义目录\n│    │   ├── store                  // redux store\n│    │   └── actionTypes.js         // actions 和 reducers使用的types常量\n│    ├── route                      // 路由 相关\n│    ├── services                   // 前端服务，一般是ajax请求等一些封装，提供基础数据\n│    ├── all-routes.js              // 脚本生成的路由配置文件\n│    ├── App.jsx                    // 项目入口文件\n│    ├── global.less                // 全局样式定义\n│    ├── page-init-state.js         // 全局样式定义\n│    ├── page-init-state.js         // 脚本生成的简化redux写法的初始化state\n│    ├── page-routes.js             // 脚本生成的路由配置文件\n│    └── variables.less             // 主题变量\n├── static                          // 非构建依赖的静态文件\n├── .babelrc\n├── .eslintignore\n├── .eslintrc.js\n├── .gitignore\n├── favicon.png\n├── index.html\n├── package.json\n├── postcss.config.js\n├── README.md\n└── yarn.lock\n```\n\n## 文件命名约定\n\n1. 文件夹小写英文加连字符\"-\"，比如：`src/pages/user-center`\n1. less文件、js文件 小写英文加连字符\"-\"，比如：`user-center.less`、`user-center.js`\n1. jsx文件（组件），首字母大写，驼峰命名，比如：`UserCenter.jsx`\n\n## 系统菜单激活状态\n> 系统菜单的激活状态根据url地址，自动判定\n\n如果是二级页面，比如添加页面，需要保持其父级页面菜单状态，菜单path需要写成`parentPath/+childPath`，使用`/+`作为分界，比如：\n```\nlist页面：\nexport const PAGE_ROUTE = '/example/users'\n\nlist页面的添加按钮，跳转到添加页面，但是页面菜单选中状态要保持list页面状态\n\nexport const PAGE_ROUTE = '/example/users/+add'\n```\n\n## 页面头部\n> 页面头部标题、面包屑导航系统会根据页面状态自动获取，但也可以控制显示隐藏、修改标题、修改面包屑。\n\n### 显示隐藏\n```\ncomponentWillMount() {\n    this.props.$actions.hidePageHeader();\n}\n\n```\n\n### 修改标题\n```\ncomponentWillMount() {\n    this.props.$actions.setPageTitle('自定义页面标题');\n}\n```\n\n### 自定义面包屑导航\n```\ncomponentWillMount() {\n    this.props.$actions.setPageBreadcrumbs([\n        {\n            key: 'zidingyi',\n            path: '',\n            text: '自定义',\n            icon: 'fa-user',\n        },\n        {\n            key: 'mianbaoxie',\n            path: '',\n            text: '面包屑',\n            icon: 'fa-user',\n        },\n        {\n            key: 'daohang',\n            path: '',\n            text: '导航',\n            icon: 'fa-user',\n        },\n    ]);\n}\n```\n\n## 前后端分离 ngnix配置 参考\n```\n# 服务地址\nupstream api_service {\n  server localhost:8080;\n  keepalive 2000;\n}\n#\nserver {\n    listen       80;\n    server_name  localhost;\n    location / {\n      root /home/app/nginx/html; // 前端打包之后的文件存放路径\n      index index.html;\n      try_files $uri $uri/ /index.html; #react-router 防止页面刷新出现404\n    }\n    location ^~/api { // 代理ajax请求，前端的ajax请求配置了统一的baseUrl = ‘/api’\n       proxy_pass http://api_service/;\n       proxy_set_header Host  $http_host;\n       proxy_set_header Connection close;\n       proxy_set_header X-Real-IP $remote_addr;\n       proxy_set_header X-Forwarded-Server $host;\n    }\n}\n```\n\n## 构建拆分 TODO\n> 基于配置，进行不同项目的打包构建，解决不同项目，但是类似，有很多通用组件，但是要单独发布的情景\n\n构建可以传入config文件，基于config文件可以构建出不同的项目\n```\n\"dev\": \"yarn run clear-cache && yarn run dll && cross-env NODE_ENV=development node ./builder/dev-server.js --cfg ./xxx.config.js\",\n```\n\nxxx.config.js如下\n```js\nmodule.exports = {\n    // 业务页面所在目录，用来构建路由以及init state，字符串或者数组\n    pagePath: './src/pages/**/*.jsx',\n    // pagePath: [\n    //     './src/pages/reserve/**/*.jsx',\n    //     './src/pages/sale/**/*.jsx',\n    // ],\n\n    // 忽略文件，不进行构建，提供部分模块打包功能，一般是配合补充 pagePath 进行使用，字符串或者数组\n    pageIgnore: [\n        // '**/ActionsExample.jsx',\n    ],\n\n    // webpack配置，区分不同环境\n    webpack: {\n        base: {\n            entry: {\n                app: './src/App.jsx',\n                login: './src/pages/login/Login.jsx',\n            },\n        },\n        dev: {},\n        prod: {},\n        dll: {},\n    },\n};\n```\n\n## TODO\n- [x] 登录之后，获取菜单数据，并存入session中，由于页面头部是由菜单生成的，如果菜单是异步获取的，将会存在各种问题，所以进入系统时候保证菜单可用\n- [x] 构建优化：css postcss的使用，自动添加前缀等功能\n- [x] 是否使用 css module功能，好像加不上，antd不是module方式，如果使用module，antd less 构建会失败。 通过配置可以区分出那些模块使用css module，那些不使用。\n- [x] 添加事件，移除事件的高阶组件\n- [x] redux 中数据，实现部分数据同步到localStorage中，目前是可以选择性恢复，可以满足需求\n- [x] source-map改如何使用\n- [x] 左侧菜单可拖动缩放宽度\n- [x] zk-react 开发模式构建慢问题，升级到webpack2.0，添加了一些优化\n- [x] antd 通用校验规则整理到zk-react中\n- [x] antd edit-cell其他表单元素完善、 可配置form组件（可用于查询条件、简单的form）\n- [x] antd 自定义异步校验，多个异步校验互相干扰问题 可以使用Promise.all包装各个请求\n- [x] 系统注入到props中的变量统一使用'$'开头，比如$ajax $event $domEvent $service $actions\n- [ ] 字体图标，团队有条件还是定制的好，全部引入会多出300~400KB。\n- [ ] 修改less时可以hot reload ，修改jsx为什么直接reload？\n- [ ] antd 图标本地部署问题：缓存问题，antd.less需要全部引入，会多550KB的css代码\n- [ ] docker 前端生产环境部署\n- [ ] 菜单匹配时，如果path携带参数，怎么能匹配成功？\n- [ ] css module class name 长短问题\n- [ ] css module=true background: url(); 问题 Module not found: Error: Can't resolve 'login-bg.jpg'\n- [ ] 测试：单元测试，端对端测试\n- [ ] 使用ts重构？\n",
    "deployedAt": "2017-08-25T01:42:29.694Z"
  }, {
    "coverPicture": "https://ucarecdn.com/117c822c-619f-478f-9cac-f6318f2fd1a5/",
    "name": "react-app",
    "git_url": "git://github.com/dyywork/react-app.git",
    "author": "dyywork",
    "description": "http://dingyongya.club:3000",
    "tags": [],
    "deployedAt": "2019-10-11T07:23:31.343Z"
  }, {
    "name": "react-app-reflux",
    "git_url": "git://github.com/missra-kit/react-app-reflux.git",
    "author": "missra-kit",
    "description": "react-app-reflux",
    "tags": ["Reflux", "create-react-app", "router", "React"],
    "coverPicture": "https://ucarecdn.com/db6c2cb0-b193-4ae1-a2da-19112e51681e/",
    "deployedAt": "2018-09-21T14:27:07.446Z"
  }, {
    "name": "react-component-lab",
    "git_url": "git://github.com/leesx/react-component-lab.git",
    "author": "leesx",
    "description": "This is a lab component lab platform, which integrates React, ES2015, Babel, Ant.design. You can write your own free code on the platform, without having to worry about the environment configuration problems.",
    "tags": ["react", "es2015", "antd"],
    "coverPicture": "https://ucarecdn.com/307a7801-f7ad-477f-b37f-f95ba09e9eca/",
    "readme": "This is a lab component lab platform, which integrates React, ES2015, Babel, Ant.design. You can write your own free code on the platform, without having to worry about the environment configuration problems.\n### 先睹为快 :tada:\n![readme](https://github.com/leesx/react-component-lab/blob/master/README.png)\n",
    "deployedAt": "2017-06-17T16:10:57.742Z"
  }, {
    "name": "react-frontend-boilerplate",
    "git_url": "git://github.com/huhulab/react-frontend-boilerplate.git",
    "author": "huhulab",
    "description": "React admin frontend project boilerplate (Based on ant.design)",
    "tags": ["react", "antd"],
    "coverPicture": null,
    "readme": "## What's this\nReact([ant-design](https://github.com/ant-design/ant-design)) based frontend boilerplate project.\n\n## How to run it\n``` bash\nnpm install\n# More commands see: package.json\nnpm start\n# Open http://localhost:3000/#/demo/test_forms\n```\n",
    "deployedAt": "2017-05-24T12:16:08.998Z"
  }, {
    "name": "react-mobx-antd-boilerplate",
    "git_url": "git://github.com/moxun33/react-mobx-antd-boilerplate.git",
    "author": "moxun33",
    "description": "react-router4-mobx-antd-webpack3-boilerplate",
    "tags": ["webpack3", "mobx", "antd"],
    "coverPicture": null,
    "readme": "# react-mobx-antd-boilerplate 开箱即用\n参考该教程[从零搭建react-family框架教程](https://github.com/brickspert/blog/issues/1)搭建的 react 全家桶框架，\n与文章不同的是此处使用 (mobx)[https://github.com/mobxjs/mobx]  作为状态管理器，其他部分也作了相应的调整。\n\nUI框架方面，集成了 <https://ant.design/index-cn>\n\n开发笔记 ，<http://qimajiang.com/2017/10/21/React%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/>\n\n# 基础功能\n\n1 react router4 路由和导航\n\n2 mobx 状态管理机，支持多个 stores 文件\n\n3 跨域代理\n\n4 css 加载\n\n5 图片加载\n\n6 axios 请求和响应拦截器\n\n7 懒加载\n\n8 etc\n\n# 开发坏境启动\n\n1 npm install\n\n2 npm run dev\n\n3 浏览器打开http://localhost:3001\n\n# 生产坏境部署\n\n1 npm run build\n\n2 拷贝dist文件夹至服务器即可",
    "deployedAt": "2017-11-18T14:55:07.596Z"
  }, {
    "coverPicture": "https://ucarecdn.com/c20360ad-56b3-42e4-b2b2-a92bfa54c4a0/",
    "name": "react-mobx-antd-spa",
    "git_url": "git://github.com/lazybear1017/react-mobx-antd-router-xcf.git",
    "author": "lazybear1017",
    "description": "基于react-react-app脚手架搭建，mobx状态管理，antd按需加载，router单页应用架子",
    "tags": ["react", "mobx", "antd"],
    "deployedAt": "2019-05-31T12:27:40.709Z"
  }, {
    "coverPicture": "https://ucarecdn.com/f5659b2a-d653-4031-b770-98ccc21f8510/",
    "name": "react-mobx-react-router-boilerplate",
    "git_url": "git://github.com/kwzm/react-mobx-react-router-boilerplate.git",
    "author": "kwzm",
    "description": "A simple boilerplate based on create-react-app and add mobx, react-router, linter, prettier and so on.",
    "tags": ["react", "mobx", "react-router", "stylelint", "prettier", "eslint", "mock", "less", "create-react-app"],
    "deployedAt": "2019-04-24T12:43:21.702Z"
  }, {
    "name": "react-molin",
    "git_url": "git://github.com/Molin123/react-molin.git",
    "author": "Molin123",
    "description": "react-molin是一个全新的基于webpack2、react15、react-router4、antd-mobile的前端架构实现方案（h5）",
    "tags": [],
    "coverPicture": null,
    "readme": "# react-molin\n\n[react-molin](https://github.com/Molin123/react-molin)是一个全新的基于webpack2、react15、react-router4、antd-mobile的前端架构实现方案（h5）\n\n\n\n# react-molin的优势\n\n* 基于最新的webpack2、react15、react-router4\n* 相比antd官方框架[dva](https://github.com/dvajs/dva)更加轻量级\n* 支持多个单页面应用同时开发\n* 不同入口页面css/js单独合并压缩\n* 静态文件自动添加版本号\n* 高清脚本解决方案，完美支持1px\n* ES2015\n* less替代css\n* fetch替代Ajax\n* ESlint在代码提交前进行规范检测\n\n\n# 项目依赖\n\n* webpack^2.3.2\n* antd-mobile^1.0.7\n* react^15.4.2\n* react-router-dom^4.0.0\n\n\n# 运行\n\n```\ngit clone https://github.com/Molin123/react-molin.git\ncd react-molin\nnpm install(如果报错，请使用cnpm) \nnpm run start -- 127.0.0.1\n```\n\n然后即可以访问[http://127.0.0.1:1024/home.html#/index](http://127.0.0.1:1024/home.html#/index)看到页面了\n\n# 编译\n\n```\nnpm run build\n```\n\n编译后的文件会生成到`output`目录下，直接将这个目录下的文件部署到服务器上即可。\n\n\n\n# 目录结构\n\n```\n.\n├── src\n│   ├── app\n│   │   ├── images/\n│   │   ├── index.js\n│   │   └── list.js\n│   ├── home\n│   │   ├── images/\n│   │   ├── index.js\n│   │   └── list.js\n│   ├── home.js\n│   ├── app.js\n│   ├── bundle.js\n│   └── template.ejs\n├── output\n│   ├── images/\n│   ├── **.html\n│   ├── **.css\n│   └── **.js\n├── config\n│   ├── config.page.js\n│   ├── config.server.js\n│   └── config.proxy.js\n├── mock\n│   └── **.json\n├── .babelrc\n├── .eslintrc\n├── package.json\n└── webpack.config.js\n```\n\n1. 其中`home`和`app`是两个单独的页面\n2. `src/template.ejs`为生成HTML文件的模板，可自由修改\n3. `src/bundle.js`是代码分割模型\n4. `output/`目录下是build后的生成文件，可直接不熟到服务器\n\n\n# 多页面入口配置\n\n如果想在项目里面增加入口，只需要在`./config/config.page.js`中增加配置即可\n\n```\nmodule.exports = {\n    \"list\": [{\n        \"name\": \"app\",\n        \"entry\": \"./app.js\",\n        \"title\": \"app页面\",\n        \"filename\": \"app.html\",\n        \"template\": \"template.ejs\",\n        \"chunks\": \"app\"\n    }, {\n        \"name\": \"home\",\n        \"entry\": \"./home.js\",\n        \"title\": \"home页面\",\n        \"filename\": \"home.html\",\n        \"template\": \"template.ejs\",\n        \"chunks\": \"home\"\n    }]\n}\n```\n\n\n# todoList\n\n1. ~~支持多入口（3.30 done）~~\n2. ~~common拆分（暂时不做）~~\n3. ~~静态文件加戳（3.31 done）~~\n4. ~~dev-server配置（4.6 done）~~\n5. ~~目录结构优化（4.7 done）~~\n6. ~~webpack配置拆分（暂时不需要）~~\n7. ~~使用react-router路由（3.30 done）~~\n8. ~~fetch语法支持（4.1 done）~~\n9. ~~静态文件输出（3.31 done）~~\n10. ~~打包后js文件过大（3.31 做压缩处理 4.20 做代码拆分）~~\n11. ~~热更新（4.5 done）~~\n12. ~~css打包存在问题（4.5 done）~~\n13. ~~验证多less文件的合并情况（4.6 done）~~\n14. ~~图片目录（4.7 done）~~\n15. ~~css压缩（4.24 done）~~\n16. ~~代码拆分（4.20 done）~~\n\n\n\n\n# future\n\n1. redux\n2. deploy\n3. 。。。\n\n\n# hot和inline的区别\n\nwebpack-dev-server的inline和hot参数都可以在代码改变的时候实现浏览器页面自动更新，具体的区别请参考我的博客[webpack-dev-server中inline和HMR的区别](http://1.molinblog.applinzi.com/blog/webpack-dev-server.html)\n\n# react-router4如何做Code Splitting\n\nreact-router4做按需加载，需要使用[bundle-loader](https://github.com/webpack-contrib/bundle-loader)来实现。具体请参考[react-router4实现按需加载](http://1.molinblog.applinzi.com/blog/code-splitting.html)\n\n# 如何在react项目中使用ESlint检测代码规范\n\nESLint是js中目前比较流行的插件化的静态代码检测工具。通过使用它可以保证高质量的代码，尽量减少和提早发现一些错误。使用eslint可以在工程中保证一致的代码风格，特别是当工程变得越来越大、越来越多的人参与进来时，需要加强一些最佳实践。\n\n[如何在react项目中使用ESlint检测代码规范](https://juejin.im/post/58ff0de18d6d810058a69a26)\n\n# 对于deploy的设想\n\n使用gulp-sftp（或其他）实现文件上传到服务器上的指定目录\n\n\n",
    "deployedAt": "2017-05-31T08:58:10.827Z"
  }, {
    "name": "react-qs",
    "git_url": "git://github.com/leesx/react-qs.git",
    "author": "leesx",
    "description": "该架构旨在简化react开发环境的配置与优化工作。构建单页面多页签的react应用。架构中已经设置了最新的API。可以开包即用。详情请看配置文件。谢谢!!! 稍后做详细说明，有不明白的地方可以 call me 1058315063@qq.com",
    "tags": ["react  ", "react-router", "antd"],
    "coverPicture": "https://ucarecdn.com/6d464513-57cd-4cb7-855f-aad2a1710f21/",
    "readme": "####  开包即用的React应用架构配置\r\n\r\n> 该架构旨在简化react开发环境的配置与优化工作。架构中已经设置了最新的API。可以`开包即用`。详情请看配置文件。谢谢!!!\r\n稍后做详细说明，有不明白的地方可以 call me `1058315063@qq.com`\r\n\r\n1. 安装 :100:\r\n```\r\nnpm install\r\nnpm install cross-env -g\r\n\r\n```\r\n\r\n2. 开发环境运行 :tada:\r\n```\r\nnpm run dll  // 打包第三方库文件\r\nnpm run debug // 启动在3031端口\r\n```\r\n\r\n3. 生产环境 :rocket:\r\n\r\n```\r\nnpm run build //打包编译，编译后的文件在dist目录。\r\n```\r\n\r\n4. 线上预览 :art:\r\n\r\n[线上DEMO](http://zoo.lishangxi.cn)\r\n",
    "deployedAt": "2017-08-07T10:38:01.386Z"
  }, {
    "coverPicture": "https://ucarecdn.com/0ff3bbb6-851a-485c-9806-2c229cc409a8/",
    "name": "react-reactRouter-redux-antd-SPA",
    "git_url": "git://github.com/greenhaha/react-antd.git",
    "author": "greenhaha",
    "description": " 这是一个基于creat-react-app 搭建的reactrouterv4 redux antd的demo工程",
    "tags": ["react", "react-router-v4", "redux", "antd", "create-react-app", "spa"],
    "deployedAt": "2019-07-26T14:19:27.103Z"
  }, {
    "name": "react-redux-antd",
    "git_url": "git://github.com/Justin-lu/react-redux-antd.git",
    "author": "Justin-lu",
    "description": "react redux for CMS/Enterprise class App/ERP/Admin with ant-design",
    "tags": ["redux", "antd", "cms", "react"],
    "coverPicture": null,
    "readme": "## Feature List\n- hot reloading/browser-sync/redux devtools on dev build\n![](http://ww1.sinaimg.cn/large/785cd1e3gw1f69xb4vta2g20tb0fs7c5.gif)\n- minify/chunkhash/trackJS on production build\n![](http://ww4.sinaimg.cn/large/785cd1e3gw1f69xey2om7g20tb0fs1kx.gif)\n- eslint both of terminal and pre-commit\n![](http://ww1.sinaimg.cn/large/785cd1e3gw1f69xiq41uog20tb0fsn8e.gif)\n![](http://ww2.sinaimg.cn/large/785cd1e3gw1f69zn0p20gj21je0jan1f.jpg)\n- unit test of react/redux\n![](http://ww3.sinaimg.cn/large/785cd1e3gw1f69x6lccmij21020m2juk.jpg)\n![](http://ww2.sinaimg.cn/large/785cd1e3gw1f69zp1v97ij21kw0u8td8.jpg)\n- es6/webapck\n- sass support\n- UI Kit: Ant Design\n- isomorphic-fetch\n- mock data\n- example app\n- ...\n\n## Getting Started\n### install\n\n```\nnpm install --global yarn # install yarn\ngit clone git@github.com:Justin-lu/react-redux-antd.git demo\ncd demo\nyarn\n\n# run dev\nnpm run start\n# run mock server\nnpm run start:mock\n```\n\n### npm script\n\n```shell\n# dev start with test/lint\nnpm run start \n\n# prodction start with browser-sync server\nnpm run start:prod\n\n# production build\nnpm run build\n\n# mock data\nnpm run start:mock\n\n# run test\nnpm run test\n\n# generate test cover report\nnpm run test:cover\n\n```\n\n### eslint\n\n- enable pre-commit hook\n\n```shell\ncd .git/hooks/ && ln -s ./../../tools/pre-commit pre-commit\n```\n\n## Structure\n\n```shell\n├── README.md\n├── coverage # test coverage report\n├── dist  # production build directory\n│   ├── 269268ade790db48e9dcc5eb0db587cd.jpg\n│   ├── antd.f7f5aa5b8e507559a22db55944433a23.css\n│   ├── app.89f9817729a2b19dc35586b6f0505c83.css\n│   ├── app.fa0e73813f3ce3a7605d.js\n│   ├── favicon.ico\n│   └── index.html\n├── package.json\n├── src  # source directory\n│   ├── actions  # write your redux action here\n│   │   ├── users.js  # redux action\n│   │   └── users.spec.js  # redux action test\n│   ├── components  # write your redux components here\n│   │   ├── CustomTable.js\n│   │   └── NotFoundPage  # this is a folder which include NotFoundPage.js, NotFoundPage.scss, NotFoundPage.spec.js\n│   ├── config\n│   │   └── api.js  # write your api config here\n│   ├── constants  # some constants\n│   │   └── actionTypes.js\n│   ├── containers  # write your redux containers here\n│   │   ├── AccessControl.js\n│   │   ├── App  # App.js App.scss\n│   ├── data\n│   │   └── db.json  # mock data file\n│   ├── favicon.ico\n│   ├── index.html  # template index.html\n│   ├── index.js  # entry file\n│   ├── reducers  # write your redux reducers here.\n│   │   ├── index.js  # entry file\n│   │   ├── initialState.js  # put all of the initial state in here\n│   │   ├── users.js  # users reducers\n│   │   └── users.spec.js  # users reducers spec\n│   ├── routes.js  # routes\n│   ├── store  # store\n│   │   ├── configureStore.dev.js\n│   │   ├── configureStore.js\n│   │   └── configureStore.prod.js\n│   └── utils  # utils file\n│       └── cFetch.js\n├── tools  # some tools script\n│   ├── build.js\n│   ├── chalkConfig.js\n│   ├── distServer.js\n│   ├── mock.js\n│   ├── pre-commit\n│   ├── srcServer.js\n│   ├── startMessage.js\n│   ├── testSetup.js\n│   └── updateIndexHTML.js\n├── webpack.config.dev.js  # webpack config of dev\n└── webpack.config.prod.js  # webpack config of production\n```\n",
    "deployedAt": "2017-05-10T09:38:01.324Z"
  }, {
    "name": "react-redux-antd-okoala",
    "git_url": "git://github.com/okoala/react-redux-antd.git",
    "author": "okoala",
    "description": "React & Redux  & Ant.Design",
    "tags": ["react", "redux", "antd"],
    "coverPicture": null,
    "readme": "## React Redux 脚手架\n",
    "deployedAt": "2017-05-16T04:00:00.678Z"
  }, {
    "name": "react-redux-antd-starter",
    "git_url": "git://github.com/BetaRabbit/react-redux-antd-starter.git",
    "author": "BetaRabbit",
    "description": "A React + Redux + Ant-Design frontend boilerplate",
    "tags": ["antd", "redux", "react"],
    "coverPicture": null,
    "readme": "# react-redux-antd-starter\nA React + Redux + Ant-Design frontend boilerplate.\n\n- [x] React\n- [x] Redux\n- [x] Ant-Design\n- [x] React Router\n- [x] React Router Redux\n- [x] Redux Actions\n- [x] Babel\n- [x] PostCSS\n- [x] LESS\n- [ ] CSS Modules\n- [x] ESLint (Airbnb)\n- [x] JWT\n- [ ] Examples\n\n## npm scripts\n\n### Dev\n```\nnpm run dev\n```\nOpen `http://localhost:3000` in your browser.\n\n### Lint\n\n#### Lint only\n```\nnpm run lint\n```\n\n#### Auto fix\n```\nnpm run lint:fix\n```\n\n#### Build\n```\nnpm run build\n```\nFind built files in ./dist.\n\n#### Start (production)\n```\nnpm run start\n```\nOpen `http://localhost:3000` in your browser.\n",
    "deployedAt": "2017-05-24T12:13:35.771Z"
  }, {
    "name": "react-redux-antdesign-webpack-starter",
    "git_url": "git://github.com/MacKentoch/react-redux-antdesign-webpack-starter.git",
    "author": "MacKentoch",
    "description": "react + redux + ant design + webpack starter",
    "tags": [],
    "coverPicture": "https://ucarecdn.com/332cffde-21ba-4d37-bbb3-005fcdc24b40/",
    "readme": "React + React-Router 4 + Redux + Ant Design + Webpack 3 with Hot Reload and redux-devtools-extension STARTER\n==========\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/MacKentoch/react-redux-antdesign-webpack-starter)\n\n\n# A full Ant Design starter\n\n> You loved `Bootstrap`? Wait and see [`Ant Design`](https://ant.design/). Do you understand now what I mean?\n\n![preview](./preview/preview.png)\n\n## Detailed Content\n\n**Front:**\n- React JS (15.6.x+ - [github :link:](https://github.com/facebook/react))\n- ant design (2.12 [github :link:](https://github.com/ant-design/ant-design/))\n - with built-in *theme customization* (change vars in [antd-theme-overrides.less](https://github.com/MacKentoch/react-redux-antdesign-webpack-starter/tree/master/src/app/style/antd-theme-overrides.less) to customize)\n- Redux (*as you application grows managing state will be a serious concern, save pain with Redux*)\n- React-Redux (*Redux is not specific to ReactJS, you could easily use it with Angular2 for instance*)\n- redux-devtools-extension ([github :link:](https://github.com/zalmoxisus/redux-devtools-extension#redux-devtools-extension))\n- React-Router-Redux (*previously named react-simple-router*)\n- react-router (4.x- [github :link:](https://github.com/reactjs/react-router))\n- animate.css ([github :link:](https://github.com/daneden/animate.css))\n- classnames ([github :link:](https://github.com/JedWatson/classnames))\n- react-motion ([github :link:](https://github.com/chenglou/react-motion))\n- Webpack 3.x ([github :link:](https://github.com/webpack/webpack))\n- babel 6+ ([github :link:](https://github.com/babel/babel))\n- axios ([github :link:](https://github.com/mzabriskie/axios) *Why: simple, complete, isomorphic ...*)\n- flow\n\n**Tool chain:**\n- babel 6+\n- eslint\n- webpack 3\n- hot reload\n- loaders\n  - `js` / `jsx`\n  - postcss\n  - less\n  - sass\n  - css\n  - json\n  - images formats\n  - svg and fonts formats\n\n**tests:**\n- Jest\n\n\n## Usage\n\n### Install\n\n```bash\nnpm install\n```\n### bundle dev mode (*+ redux-devtools-extension*)\n\n```bash\nnpm run dev\n```\n\n### dev : hot reload mode (*+ redux-devtools-extension*)\n\n```bash\nnpm run start\n```\n\n### tests\n\n```bash\nnpm run test\n```\n\n### bundle production mode\n\n\n```bash\nnpm run prod\n```\n\n### mini node-express server (for dev or prod bundles)\n\nwith server hot reload:\n```bash\nnpm run serve-dev\n```\n\nwithout hot reload:\n```bash\nnpm run serve-prod\n```\n\n## To fix\n\n- [x] production bundle (fixed: see [#5060](https://github.com/ant-design/ant-design/issues/5060))\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2017 Erwan DATIN\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "deployedAt": "2017-08-20T11:24:28.567Z"
  }, {
    "name": "react-redux-universal",
    "git_url": "git://github.com/subenksaha/react-redux-universal.git",
    "author": "subenksaha",
    "description": "React Redux Isomorphic Webpack 2 Boilerplate based on ant.design",
    "tags": ["react", "redux"],
    "coverPicture": null,
    "readme": "# React Redux Isomorphic Webpack 2 Boilerplate based on [ant.design](https://ant.design)\n----------\n----------\n\n### About\n----------\nThis boilerplate has following feature:\n\n * Universal React rendering\n * Webpack 2 for client side transformation and bundling\n * Babel js for server side transformation\n * import using absolute path in client and server for make code reuse easier\n * development hot reloading\n * Sequelize Js for backend api(for RDBMS)\n * using ui framework ant.design\n * latest webpack 2 (2.5+)\n * latest React Router 4\n * express-handlebars for server side templating\n * custom console logger for better log visibility & trace\n * nested route on react router 4 supported in server and client\n\n### Technologies\n----------\nImportant technologies used\n* [Node Js](https://nodejs.org/en/)\n* [Express Js](https://expressjs.com/)\n* [React Js](https://github.com/reactjs) version 15.1\n* [React Router](https://github.com/ReactTraining/react-router) version 4+\n* [React Redux](https://github.com/reactjs/react-redux) version 5+\n* [Ant Design](https://ant.design) version 2.5+\n* [Babel Js](https://babeljs.io/) core version 6.24\n* [Webpack](https://webpack.js.org/) version 2.5+\n\n### Installation\n----------\n* Clone the repo\n* cd project folder\n* npm install (in cmd/ terminal)\n\n### Commands\n----------\n* To run development server \n\t>npm start\n* To clean previous asset and build new and then run production server\n \t>npm run build\n* To run production using previuosly built asset\n \t>npm run serve\n* To clean previously built assets\n \t>npm run clean\n\nNow create your awesome project :)\n",
    "deployedAt": "2017-05-22T02:57:48.122Z"
  }, {
    "name": "react-router4-redux-express-webpack4",
    "git_url": "git://github.com/sktony6260/react-router4-redux-express-webpack4.git",
    "author": "sktony6260",
    "description": "react16+react-router4+redux+antd+express+webpack4的单页应用",
    "tags": [],
    "coverPicture": "https://ucarecdn.com/9a23d75b-dcd7-433d-8e5f-9210b93c8a63/",
    "deployedAt": "2018-06-20T02:41:01.617Z"
  }, {
    "name": "react-scaffold",
    "git_url": "git://github.com/starriv/react-scaffold.git",
    "author": "starriv",
    "description": "A react basic scaffold ",
    "tags": ["react"],
    "coverPicture": null,
    "readme": "# React Scaffold\n\nThat is a simple React scaffolding, it contains a React,Redux,React-Router.\nHope can help you fast develop\n\n[![Build Status](https://travis-ci.org/starriv/react-scaffold.svg?branch=master)](https://travis-ci.org/starriv/react-scaffold)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n# Feature\n- ES6+ support, use babel\n- with development and the product model\n- development patterns support heat load\n\n# Setup\n- git clone https://git.coding.net/starriv/react-scaffold.git\n- npm install\n\n# Run\ndefault use development model\n- dev:  npm run dev && open your brower to http://127.0.0.1:3002\n- prod: npm run build\n\n\n# React 脚手架\n这是一个基础React脚手架，它包含有React,React Router, Redux。\n希望它能帮你住快速开发。\n\n# 特点\n- ES6+的支持,使用Babel转换\n- 开发模式 和 产品模式\n- 开发模式热加载支持\n\n# 安装\n- git clone https://git.coding.net/starriv/react-scaffold.git\n- npm install\n\n# 运行\n默认为开发模式\n- dev npm run dev && 打开浏览器 http://127.0.0.1:3002\n- prod npm run build\n",
    "deployedAt": "2017-05-16T04:40:11.100Z"
  }, {
    "coverPicture": "https://ucarecdn.com/68380ef1-7757-4abd-8afe-1faac401f45d/",
    "name": "react-scaffolding",
    "git_url": "git://github.com/xuya227939/react-scaffolding.git",
    "author": "xuya227939",
    "description": "react脚手架(redux)",
    "tags": ["react", "redux", "redux-immutablejs", "immutable"],
    "deployedAt": "2020-01-08T01:41:20.495Z"
  }, {
    "coverPicture": "https://ucarecdn.com/eab7d160-50d2-4241-9d26-67af0e239b36/",
    "name": "react-scaffolding-mobx",
    "git_url": "git://github.com/xuya227939/react-scaffolding-mobx.git",
    "author": "xuya227939",
    "description": "一款基于Mobx打造的脚手架，自定义修改，随心所欲。",
    "tags": ["mobx", "react"],
    "deployedAt": "2020-01-08T01:44:39.254Z"
  }, {
    "name": "react-start-kit",
    "git_url": "git://github.com/jovey-zheng/react-start-kit.git",
    "author": "jovey-zheng",
    "description": "A boilerplate of SPA, built with React.js, Webpack, ES6+, Redux, Router, Babel, Express, Ant Design...",
    "tags": ["redux", "antd"],
    "coverPicture": null,
    "readme": "\n## Getting start\n\n  1. Clone this repo:\n  ```\n  $ git clone https://github.com/jovey-zheng/react-start-kit.git\n  ```\n\n  2. Install dependenices:\n  ```\n  $ npm i\n  ```\n\n  3. Start the project:\n  ```\n  $ npm start               // default prot is 3000\n  $ PORT=80 npm start       // using `PORT` to customize port in the CLI\n  ```\n\n  4. Access browser: [http://localhost:3000](http://localhost:3000). Or start with [`minihost`](https://www.npmjs.com/package/minihost):\n    ```\n    h -n start npm start\n    ```\n    and then access: [http://start.t.t](http://start.t.t)\n\n  5. Then do whatever you want : ).\n\n## Contributing\n\nPull requests are welcome!\n\n## LICENSE\n\nLicense under [MIT](https://github.com/jovey-zheng/react-start-kit/blob/master/LICENSE.md).\n",
    "deployedAt": "2017-05-16T03:54:22.524Z"
  }, {
    "name": "react-starter-kit",
    "git_url": "git://github.com/songzhengxu/react-starter-kit.git",
    "author": "songzhengxu",
    "description": "基于webpack2 + ES6/7 + less + React15.5 + Redux3.6 + React-Router4.0 + react-hot-loader3 + antd",
    "tags": ["react", "redux", "webpack2", "babel", "antd", "react-hot-loader3", "react-router4"],
    "coverPicture": "https://ucarecdn.com/3ee0a4a1-aa69-46a0-9a0b-69d51a791dec/",
    "readme": "react-starter-kit\n=================\n\n基于webpack2 + ES6/7 + less + React15.5 + Redux3.6 + React-Router4.0 + react-hot-loader3 + antd\n\n> 这个脚手架工程模板用于快速启动基于 React + Webpack 为技术栈的前端项目\n\n---\n\n更新日志\n--------\n\n20170814\n--------\n\n-\t1.引入CSS Modules 且分离antd的less不走CSS Modules编译\n\n20170803\n--------\n\n-\t1.加入babel-polyfill\n-\t2.修复cross-env 未生效的bug\n-\t3.加入stage-2支持，用es2017的语法解决react bind this的问题，\n\n> 详细见 src\\Component\\From.jsx 中的代码，直接用stage-2的写法，事件不用再绑定this;\n\n20170725\n--------\n\n-\t1.使用cross-env来设置跨平台设置环境变量\n-\t2.统一window,mac的开发运行命令\n-\t3.配置允许局域网访问 http://ip:port\n\n20170719\n--------\n\n-\t1.移除react-intl国际化需求\n-\t2.严格按照Angular 规范书写Commit message\n\n20170710\n--------\n\n-\t1.语法检查严格按照airbnb规范\n-\t2.路由代码拆分，实现页面[按需加载](https://reacttraining.cn/web/guides/code-splitting)\n\n> 1.语法检查严格是好事，至少能够按照规则写出规范的代码，看着都很舒心，慢慢的就会接受并习惯它，但是也不能完全按照它的规范来，以免适得其反，都可以通过配置文件忽略某些规则，或者跳过某些文件，代码行等，这样下来，才有一套自己的代码规范 2.路由实现代码拆分以后，打包的文件小了，打包的时间也少了，打包时间优化从71s-36s-17s. 优化从未停止！\n\n20170707\n--------\n\n-\t1.组件拆分为容器组件和视图组件\n-\t2.新增react-intl来达到国际化多语言\n\n> 拆分容器组件和视图组件，能让我们更好的进行组件的代码复用，叫法挺多的，什么智能组件和木偶组件，容器组件和展示组件\n\nFeatures 功能特性\n-----------------\n\n-\t自动化流程\n\n\t-\t可以解析 JSX 语法\n\t-\t可以解析 ES6/ES7 语法新特性\n\t-\t支持 LESS 预处理器\n\t-\t区分开发环境和生产环境,代码中插入环境变量\n\t-\t分离业务功能代码和公共依赖代码，单独打包第三方库\n\t-\t支持编译 HTML 模板\n\t-\t支持图片、图标字体等资源的编译\n\t-\t自动补全文件后缀\n\t-\t指定静态资源的url路径前缀--静态资源上cdn必备\n\t-\t简化import路径\n\t-\t配置favicon\n\t-\t使用webpack 2自带的ES6模块处理功能(禁用了-可配置)\n\t-\t编译前清空dist目录\n\n-\t开发流程\n\n\t-\t实时的语法检测，基于airbnb/react -可配置编辑器\n\t-\t实现组件级热更新\n\t-\t实现代码的热替换，浏览器实时刷新查看效果\n\t-\t编译完成自动打开浏览器\n\n-\t打包流程\n\n\t-\t支持文件 MD5 戳,解决文件缓存问题\n\t-\tCSS3 使用autoprefixer自动补全前缀\n\t-\t支持一行命令产出待部署资源\n\t-\t单独分离 CSS 样式文件(开发环境不分离-分离后不支持css的热更新)\n\n-\t测试任务\n\n\t-\t支持 mocha 测试用例运行\n\t-\t支持react官方工具库react-dom/test-utils的单元测试\n\t-\t支持Enzyme的react-redux的测试\n\t-\t支持Istanbul 覆盖率测试\n\n---\n\n快速开始\n--------\n\n```\n$ git clone https://github.com/songzhengxu/react-starter-kit.git\n$ cd react-starter-kit\n$ npm install\n```\n\n#### 2.1 开发调试\n\n```\n//启动项目\n$ npm run dev\n```\n\n将自动打开浏览器`http://127.0.0.1:3000`\n\n#### 2.2 代码检查\n\n```\n$ 编译和打包都会自动运行代码检查\n  也可以配置编辑器,在编码时实时检查语法 如: atom需要安装linter和linter-eslint这两个插件, 装好后重启生效.\n```\n\n> 注意：如果有语法错误，则浏览器控制台会报errors，则热替换不会生效，切记！\n\n#### 2.3 测试用例\n\n```\n$ npm run test \t\t\t\t// 运行单元测试\n$ npm run coverage \t\t// 运行覆盖率测试\n```\n\n> 单元测试在控制台输出报告，覆盖率测试将在项目根目录中创建coverage文件夹来输出测试报告， 进入coverage/lcov-report 中，打开index.html 能够在浏览器中查看更加详细的覆盖率测试报告\n\n#### 2.4 产出资源\n\n```\n$ npm run build\n```\n\n导出的代码在项目根目录中\n\n---\n\n目录结构\n--------\n\n```\nreact-starter-kit/\n├─src                 // 源文件目录\n│  ├─Action     \n│  ├─Assets           // 图片资源\n│  ├─Component\n│  │  └─Common\n│  ├─Config\n│  ├─Iconfont         // 字体\n│  ├─Reducer\n│  ├─Style\n│  ├─Template         // html模板\n│  └─utils\n└─test                // 测试用例目录\n    ├─Action\n    ├─Component\n    └─Reducer\n```\n\n---\n\n技术栈\n------\n\n1.\t[x] [Webpack](https://webpack.github.io)\n2.\t[x] [React](https://facebook.github.io/react/)\n3.\t[x] [ES6](http://es6.ruanyifeng.com/)\n4.\t[x] [Redux](https://github.com/rackt/redux)\n5.\t[x] [React-router](https://github.com/rackt/react-router-redux)\n6.\t[x] [Babel](https://babeljs.io/)\n7.\t[x] [Autoprefixer](https://github.com/postcss/autoprefixer)\n8.\t[x] [PostCSS](https://github.com/postcss/postcss)\n9.\t[x] [CSS modules](https://github.com/outpunk/postcss-modules)\n10.\t[x] [Less](https://github.com/less/less.js)\n11.\t[x] [Eslint](https://github.com/eslint/eslint)\n\n---\n\n待解决的问题\n------------\n\n-\t使用webpack 2自带的ES6模块处理功能与mocha测试配置冲突 (已解决)\n\n> 引起冲突的原因： webpack hot-module-replacement需要利用es6 import，因此我们需要在presets选项里面将es2015的modules选项设置为false,默认为commonjs 但是mocha测试(在Node运行环境下)的时候需要想import 转为为commonjs风格的require 解决方法： 利用babel在不同环境变量的情况下读取不同options的特性 测试的时候，将临时环境变量设置为test, 在babelrc文件里面的env选项下，配置好环境变量为test的时候需要使用的presets和plugins 开发的时候，将临时环境变量设置为development, 在没有配置的情况狂下，babelrc默认的环境变狼为development\n\n-\t带有路由的组件，在mocha测试时，不能渲染到dom (已解决)\n\n> 组件带有路由的情况下需要将组件包裹在 <MemoryRouter>里面，直接放到测试中运行。 而不是用<MemoryRouter>生成新的组件后再放到测试中运行。具体查看测试用例\n\n-\tredux组件在mocha测试时，不能渲到dom (已解决)\n\n> 可以通过自己创建一个store,创建store的时候，即使只有一个reducer也要用combineReducers包裹好再创建。 创建好store后，利用<Provider>生成一个组件，放到测试中即可。\n\n-\tjsdom8.0.1升级到jsdom10.1.0 (已解决)\n\n> jsdom10.1.0相对于8.0.1来说，更改了部分api，根据官网api，修改setup.js即可。 setup.js： https://github.com/lelandrichardson/enzyme-example-mocha/blob/master/test/.setup.js jsdom 10.1.0： https://github.com/tmpvar/jsdom\n\n-\t当引入less时，mocha测试报错,\n\n> 由于antd的模块配置是使用less按需加载，所以是动态引入less文件，以及我们自己引入的less文件，组件都不能通过测试，我们需要配置mocha 忽略less 文件\n\nInstall it:\n\n```js\nnpm install --save-dev ignore-styles\n```\n\nRun tests without styles:\n\n```js\nmocha --require ignore-styles\n```\n\n-\t简化import路径 mocha测试不能识别 - ---\n\n> 使用 babel-plugin-module-resolver 解决\n",
    "deployedAt": "2017-09-15T01:55:28.688Z"
  }, {
    "coverPicture": "https://ucarecdn.com/4fb2dbd6-07ab-43e2-96f5-a840446aba16/",
    "name": "react-study",
    "git_url": "git://github.com/liubin915249126/react-study.git",
    "author": "liubin915249126",
    "description": "webpack4.16.5+react+react-router-dom4.0+fetch+koa2+antd后台管理页面 ",
    "tags": ["webpack", "react", "react-router", "dva"],
    "deployedAt": "2020-06-05T04:01:03.457Z"
  }, {
    "coverPicture": null,
    "name": "react-typescript-admin",
    "git_url": "git://github.com/chachaxw/react-typescript-admin.git",
    "author": "chachaxw",
    "description": "A starter template for TypeScript and React with AntDesign and Dva",
    "tags": ["react", "typescript", "dva", "antd"],
    "deployedAt": "2020-04-15T07:08:26.263Z"
  }, {
    "name": "react-webpack-boilerplate",
    "git_url": "git://github.com/amostap/react-webpack-boilerplate.git",
    "author": "amostap",
    "description": "Boilerplate for React-Redux/Antd Apps",
    "tags": ["react", "redux", "router", "antd"],
    "coverPicture": null,
    "readme": "# React-Redux Webpack Boilerplate\n\n<p align=\"center\">\n\n  <a href=\"https://facebook.github.io/react/\">\n    <img src=\"https://cdn.worldvectorlogo.com/logos/react.svg\" height=\"50\">\n  </a>\n\n  <a href=\"https://redux.js.org/\">\n    <img src=\"https://raw.githubusercontent.com/reactjs/redux/master/logo/logo.png\" height=\"50\">\n  </a>\n\n  <a href=\"https://reacttraining.com/react-router/\">\n    <img alt=\"react-router\" src=\"https://reacttraining.com/react-router/android-chrome-144x144.png\" height=\"50\">\n  </a>\n\n  <a href=\"https://webpack.github.io\">\n    <img src=\"https://cdn.worldvectorlogo.com/logos/webpack.svg\" height=\"50\">\n  </a>\n\n  <a href=\"http://ant.design\">\n    <img height=\"50\" src=\"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\">\n  </a>\n\n  <a href=\"http://eslint.org\">\n    <img src=\"https://cdn.worldvectorlogo.com/logos/eslint.svg\" height=\"50\">\n  </a>\n\n  <a href=\"https://babeljs.io\">\n    <img src=\"https://raw.githubusercontent.com/babel/logo/master/babel.png\" height=\"50\">\n  </a>\n\n  <a href=\"http://postcss.org/\">\n    <img src=\"http://api.postcss.org/logo.svg\" height=\"50\">\n  </a>\n\n</p>\n\n## Getting Start\n\nRun the following commands in your terminal\n\n```\ngit clone git@github.com:amostap/react-webpack-boilerplate.git\ncd react-webpack-boilerplate\nnpm install\nnpm start\n```\n\nThen open [http://localhost:8080/](http://localhost:8080/) on your web browser.\n\n## Production Build\n\n`npm run build` and upload content from `dist/` to your server.\n\n## Inspired By\n\n* [Иван Акулов про фронтенд](https://t.me/iamakulov_channel)\n* [Put your Webpack on a diet part 1](https://www.contentful.com/blog/2017/10/10/put-your-webpack-on-a-diet-part-1/)\n* [Put your Webpack on a diet part 2](https://www.contentful.com/blog/2017/10/19/put-your-webpack-bundle-on-a-diet-part-2/)\n* [Put your Webpack on a diet part 3](https://www.contentful.com/blog/2017/10/27/put-your-webpack-bundle-on-a-diet-part-3/)\n* [Put your Webpack on a diet part 4](https://www.contentful.com/blog/2017/11/13/put-your-webpack-bundle-on-a-diet-part-4/)\n* [Optimize React build for production with Webpack](https://michalzalecki.com/optimize-react-build-for-production-with-webpack)\n* [Improve React performance with Babel](https://medium.com/doctolib-engineering/improve-react-performance-with-babel-16f1becfaa25)\n* [@stereobooster/package.json](https://github.com/stereobooster/package.json)\n* [@facebook/create-react-app](https://github.com/facebook/create-react-app)\n* [@Remchi](https://github.com/Remchi)\n\n## Thanks to\n\n* [Aleksandr Zhukov](https://github.com/AleksandrZhukov) for great help\n* [VectorM](https://github.com/VectorM) for help\n\n## License\n\nMIT · [Alexandr Ostapenko](https://amostap.com/)\n",
    "deployedAt": "2018-02-15T22:14:20.940Z"
  }, {
    "name": "react-webpack-template",
    "git_url": "git://github.com/liushuangbill/react-webpack-template.git",
    "author": "liushuangbill",
    "description": "Provide a template for developing React using ES6 syntax and webpack.",
    "tags": ["react", "webpack"],
    "coverPicture": "https://ucarecdn.com/00f37aa0-f2b6-4680-952e-5f2278f3d078/",
    "readme": "# React + Webpack template [![Build Status](https://travis-ci.org/liushuangbill/react-webpack-template.svg?branch=master)](https://travis-ci.org/liushuangbill/react-webpack-template)\n\nProvide a template for developing React based applications using ES6 syntax and webpack.\n\n## use:\n```npm\ngit clone git@github.com:liushuangbill/react-webpack-template.git your-app-name\n\ncd your-app-name\n\ngit remote set-url origin your-git-url // 修改远程仓库地址\n\nnpm i\n\nnpm start // 开发模式运行\n\nnpm run build // 打包项目\n\n// 使用Webpack ProvidePlugin插件引入React，不必重复引入，也可以定义自己的全局变量\n```\n\n## 目录结构\n```\n.\n|-- config                           // webpack配置目录\n|-- dist                             // 打包输出目录\n|-- src                              // 开发目录\n|   |-- index.js                     // 打包入口文件\n|-- .babelrc\n|-- .editorconfig\n|-- .postcssrc\n|-- README.md\n|-- package.json\n|-- index.html\n.\n```\n",
    "deployedAt": "2018-05-12T17:02:37.686Z"
  }, {
    "name": "reactSPA",
    "git_url": "git://github.com/MuYunyun/reactSPA.git",
    "author": "MuYunyun",
    "description": "react技术栈的综合运用",
    "tags": ["admin", "antd"],
    "coverPicture": "https://ucarecdn.com/b2b38baf-89b8-4e97-a216-4b10f69db960/",
    "readme": "### Target\n> 使用React技术栈开发SPA.该项目把一些平时工作、学习中\n遇到的react案例抽离成demo展现出来.\n\n[效果展示](https://muyunyun.github.io/reactSPA)\n\n[文档地址](http://muyunyun.cn/posts/9bfbdbf4/)\n\n* 小模块展示：\n![](http://files.cnblogs.com/files/MuYunyun/reactSPA.gif)\n* redux在项目中的运用demo展示\n![](http://files.cnblogs.com/files/MuYunyun/todoList.gif)\n\n### Usage\n```\n本地运行\nyarn install || npm install\nyarn start || npm start\n```\n\n### Tech Stack\n- [x] 打包构建：Babel Webpack(2.6)\n- [x] 热更新\n- [x] 包管理：Yarn || Npm\n- [x] UI库：React & React-Dom\n- [x] UI组件：Antd(2.10x)\n- [x] 路由：React-Router(4.x) & History\n- [x] JS：ES6\n- [x] 样式：Less\n- [x] 框架：Redux\n- [x] 与后台通信：Fetch\n- [ ] 图片懒加载\n- [ ] 使用ts重构\n\n### Features\n* 音乐模块\n  * 用fetch调用了百度音乐api(JSONP)\n* 工具模块\n  * 实现对工资、房租、身体指数、年龄的智能计算\n  * 用redux实现了待办事项模块\n* 画廊模块\n  * 图片懒加载(待开发)\n\n### Third-party libraries\n* css动画库：Animate.css\n* 富文本编辑：react-draft-wysiwyg\n* 全屏插件：screenfull\n* 图片弹层查看插件：photoswipe\n* 日期处理：Moment\n* 可视化图表：echarts-for-react\n\n### Project Structure\n```\n├── build.js                   项目打包后的文件\n├── config                     webpack配置文件\n│   ├──...\n│   ├──webpack.config.dev.js   开发环境配置\n│   ├──webpack.config.prod.js  生产环境配置\n├── node_modules               node模块目录\n├── public\n│   └──index.html\n├── scripts\n│   ├── build.js               打包项目文件\n│   ├── start.js               启动项目文件\n│   └── test.js                测试项目文件\n├── src\n│   ├── client                 汇聚目录\n│   ├── common                 核心目录\n│   │   ├── actions            redux中的action\n│   │   ├── components         通用功能组件\n│   │   ├── container          通用样式组件\n│   │   ├── images\n│   │   ├── pages              页面模块\n│   │   ├── reducers           redux中的reducer\n│   │   ├── utils              工具类\n│   │   │   ├── config.js      通用配置(全局变量待实现)\n│   │   │   ├── menu.js        菜单配置\n│   │   │   └── ajax.js        ajax模块(日后用到)\n│   │   └── routes.js          前端路由\n│   └── server                 服务端目录(日后用到)\n│       └── controller\n├── .gitignore\n├── package.json\n├── README.md\n└── yarn.lock\n```",
    "deployedAt": "2017-06-17T04:05:42.448Z"
  }, {
    "name": "react_news_site",
    "git_url": "git://github.com/cjxmg/react_news_site.git",
    "author": "cjxmg",
    "description": "基于react+webpack+es6构建的一个单页面新闻站点",
    "tags": ["news"],
    "coverPicture": null,
    "readme": "# React-news\n![im-js-logo](./doc/img/react-logo.jpg)\n\n>一个基于 React + Webpack + es6 + Babel + ant-design 的新闻站点  \n\n项目主页 [Github-react_news_site](https://github.com/cjxmg/react_news_site)\n\n演示地址 [ReactNews](http://superxmg.website/project/react_news_site/)\n\n## 写在前面\n之前自学过前端自动化工具和angular，但一直没有搭建过一个完整的项目，于是这次认真的做了个基于react新闻网站，自动化工具采用webpack，由于使用了es6的语法，需要用到Babel，Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码。\n\n此项目是根据慕课网教程仿制的，通过此项目也确实学到了很多东西，现在分享出来，也算是我的一个学习总结，[完整的视频教程链接](http://pan.baidu.com/s/1nuVL3hJ)\n\n觉得好的同学可以给个**star**，万分感谢~ (✪ω✪)\n\n## 效果图\n适配了移动端，pc端直接打开上面的链接\n\n移动端 预览  |  直接扫码打开网页\n:-:|:-:\n![ios-demo.gif](./doc/img/mobile_show.png) | ![安卓下载二维码](./doc/img/qrcode.png)\n\n## 运行项目\n\n**安装依赖**  \n```shell\nnpm install\n```\n**进入开发模式**\n```shell\nnpm run dev\n// or\nwebpack-dev-server --inline --hot\n// 之后打开 localhost:8080 查看\n```\n如果还没安装node的同学，可把 index.html 里的 script 改成下面的形式，然后直接打开`index.html`即可\n![index](./doc/img/index.png)\n\n\n## [webpack](http://webpack.github.io/docs/)配置\n\n> webpack是一款模块加载器兼打包 工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。\n\n react的组件功能很好用，在一个项目中，有些组件可能由不同的人所开发，所以时常需要引入其他的脚本文件，虽然可以用命名空间的办法来解决，但最后在html页面中通过script标签引入各类组件和文件时，还是会显着异常混乱，各模块之间的依赖，先后加载顺序都得人为控制，会极大的降低开发效率，而且项目中用到了es6的语法，需要用到babel来进行es6的转化，所以选择了webpack来进行前端自动化的管理\n\n webpack配置文件：webpack.config.js\n\n ```javascript\n module.exports = {\n   entry: __dirname + '/src/js/root.js',\n   output: {\n     path: __dirname + '/src/',\n     filename: 'bundle.js'\n   },\n   module: {\n     loaders: [\n       {\n         test: /\\.js?$/,\n         exclude: /node_modules/,\n         loader: 'babel-loader',\n         query: {\n           presets: ['react', 'es2015 '], //设定babel的转码规则\n           \"plugins\": [\n             [\"import\", { libraryName: \"antd\", \"style\": \"css\" }] // `style: true` 会加载 less 文件\n           ]\n         }\n       },\n       {\n         test: /\\.css$/,\n         loader: 'style!css-loader'\n       }\n     ]\n   }\n }\n ```\n当运行`webpack`命令时会自动把文件打包在./src目录下\n\n\n## [ANT DESIGN](https://ant.design/index-cn)\n\n![ANT DESIGN](./doc/img/antd.png)\n\n> 一个 UI 设计框架，采用 React 封装的一套 Ant Design 的组件库，比较好用，可快速构建一个样式丰富的站点\n\nantd的组件使用十分方便，官方文档也比较详细\n```javascript\nimport 'antd/dist/antd.css';  // or 'antd/dist/antd.less'\nimport { DatePicker } from 'antd';\nReactDOM.render(<DatePicker />, mountNode);  //也可传入参数\n```\n如果只需要用到其中的几个组件，则引入全部antd的样式则会显得多余，官方文档推荐了一个package： `babel-plugin-import`，配置使用后只需引入组件就行，不用理会样式，`babel-plugin-import`会自动按需加载需要的样式，而忽略那些多余的样式\n```javascript\n// babel-plugin-import 会帮助你加载 JS 和 CSS\nimport { DatePicker } from 'antd';\n```\n## React + Es6\n> 用es6的语法写react组件会有一些不同，比如。。\n\n#### 组件的定义\n* es5语法：\n  ```javascript\n  var Component = React.createClass({\n    render: function() {\n      return <h1>Hello World</h1>;\n    }\n  });\n  ```\n\n* es6语法：\n  ```javascript\n  class Component extends React.Component {\n    render() {\n      return (\n        <h1>Hello World</h1>\n      );\n    }\n  };\n  ```\n\n#### 定义组件的state属性\n* es5语法：\n  ```javascript\n  var Component = React.createClass({\n    getInitialState: function() {\n      return {text: 'World'};\n    },\n    render: function() {\n      return <h1>Hello {this.state.text}</h1>;\n    }\n  });\n  ```\n* es6语法：\n  ```javascript\n  class Component extends React.Component {\n    constructor() {\n      super(); //子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。\n  \tthis.state = {text: 'World'};\n    }\n    render() {\n      return (\n        <h1>Hello {this.state.text}</h1>\n      );\n    }\n  };\n  ```\n#### 组件事件处理函数的this差异\n* es5语法：\n  ```javascript\n  var Component = React.createClass({\n    getInitialState: function() {\n      return {text: 'World'};\n    },\n    handleClick: function() {\n      this.setState({text: 'React'});\n    },\n    render: function() {\n      return <h1 onClick={this.handleClick}>Hello {this.state.text}</h1>;\n    }\n  });\n  ```\n  用es5写法时，在事件处理函数handleClick中，this指向的是组件本身，所以this有setState方法。\n\n* es6语法：\n  ```javascript\n  class Component extends React.Component {\n    constructor() {\n      super(); //子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。\n  \tthis.state = {text: 'World'};\n    }\n\n    handleClick() {\n      this.setState({text: 'React'});\n    }\n\n    render() {\n      return (\n        <h1 onClick={this.handleClick.bind(this)}>Hello {this.state.text}</h1>\n      );\n    }\n  };\n  ```\n  使用es6语法时，如果绑定事件时直接用`<h1 onClick={this.handleClick}>`,则函数handleClick里的this为`null`,调用`this.setState`方法时会报错，所以需改为`<h1 onClick={this.handleClick.bind(this)}>`,用当前组件对象替换之前的`null`，成为新的this\n\n\n\n## 一些相关链接\n* [HTML to JSX Compiler](http://magic.reactjs.net/htmltojsx.htm) ：可将html代码转换成jsx形式\n\n* [ANT DESIGN - 一个ui设计语言](https://ant.design/index-cn)\n\n* [React 中文文档](https://tianxiangbing.github.io/react-cn/docs/getting-started.html)\n\n* [webpack 2.2 中文文档](http://www.css88.com/doc/webpack2/)\n\n* [前端编码规范](https://giscafer.gitbooks.io/front-end-manual/content/) ：算是比较详细的，包含编码规范和优化等\n\n* [阮一峰的react入门](http://www.ruanyifeng.com/blog/2015/03/react.html) ：简单易懂，配套demo，适合初学者入门\n\n* [阮一峰的es6入门](http://es6.ruanyifeng.com/)\n\n* [入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f#) ：写的很不错，逐级深入，有点长，耐心看完\n\n## 后记\n总结了项目中遇到的一些问题和用到的东西，前端这条路还很长，我也会不断的学习更多新知识，如果有写的不对，不好的地方，虚心接受大家的指点~\n",
    "deployedAt": "2017-06-10T08:09:18.784Z"
  }, {
    "coverPicture": "https://ucarecdn.com/1ad6bb8a-eaab-40b5-834f-fda1f5f57d52/",
    "name": "saso",
    "git_url": "git://github.com/huruji/saso.git",
    "author": "huruji",
    "description": "Zero config bundler to help you to build fantastic APP",
    "tags": ["react", "Vue"],
    "deployedAt": "2019-08-13T10:39:51.236Z"
  }, {
    "name": "sls-admin",
    "git_url": "git://github.com/sailengsi/sls-admin.git",
    "author": "sailengsi",
    "description": "https://webpack2.vue.slsadmin.org",
    "tags": ["Vue"],
    "coverPicture": "https://ucarecdn.com/90626d59-80b2-41ec-a233-cce4e7cb31e7/",
    "readme": "# SlsAdmin介绍\n\n##build\n#### webpack2\n[![Build Status](https://travis-ci.org/sailengsi/sls-admin.svg?branch=webpack2)](https://travis-ci.org/sailengsi/sls-admin)\n#### master\n[![Build Status](https://travis-ci.org/sailengsi/sls-admin.svg?branch=master)](https://travis-ci.org/sailengsi/sls-admin)\n\n## 注意\n> **目前此项目主分支为webpack2，并且已将webpack2分支设置为默认分支，请知悉。**\n> \n> **此文档目前仅针对webpack2分支，请对照webpack2分支查看文档，谢谢。**\n> \n> **关于master分支，以及还存在的issue，将在下一个空闲时间来解决。**\n>\n> **提issue时，请表明分支，谢谢。**\n\n### **在线演示地址说明**\n|分支        |      地址    | \n| --- | --- | \n| master        |     [https://master.vue.slsadmin.org](https://master.vue.slsadmin.org)   | \n| webpack2        |      [https://webpack2.vue.slsadmin.org](https://webpack2.vue.slsadmin.org)   |\n\n### 文档地址:  [https://doc.vue.slsadmin.org](https://doc.vue.slsadmin.org)\n### 此项目接口PHP版本已开源: [sls-admin-api-php](https://github.com/sailengsi/sls-admin-api-php)\n\n\n\n## 访问账号\n### 账号注册？\n**后台其实不需要注册，但最近增加了权限功能，为了完整的体验权限功能，也为了方便大家更加测试体验方便，在登录页面，开放了注册功能.**\n\n**大家注册的账号默认都归属到管理员(我)的下边，所以，除了我，别人无法操作你以及你添加的数据。**\n\n\n此项目是一个后台管理系统，里面有完整并且实际的增删改查功能，有普通模式操作，也有高级模式操作，用此项目，可以快速帮您完成后台功能。\n此项目重点突出在于架构模式，相比那些有很多页面，但架构混乱的项目来说，一个真正的前端应该更在意项目的架构。\n\n\n## 架构模式特点：\n* 易于协作开发\n* 方便拓展与维护\n* 结构清晰明了\n* 灵活，可自定义配置\n\n\n> 基于这个模式，可以拓展更为强大的功能，诸如类似其他后台模板里面的那些功能等，都可以用组件化形式开发，注入到此项目。\n\n\n\n## 涵盖技术包含\n\n#### 技术点：\n* [Vue](http://cn.vuejs.org/) 当下最流行的前端JavaScript框架\n* [VueRouter](https://router.vuejs.org/zh-cn/) 基于Vue的路由插件\n* [Vuex](https://vuex.vuejs.org/zh-cn/) 管理Vue中多组件共享状态的插件，类似react的redux\n* [Axios](https://github.com/mzabriskie/axios) 当前最流行的一个http库\n* [ElementUI](https://github.com/ElemeFE/element) 饿了么团队开发的基于Vue的一套UI组件库\n\n#### 富文本：\n* [wangEditor](http://www.wangeditor.com/) 一款国人开发的富文本编辑器\n\n#### 七牛云：\n* [七牛云开发文档](https://developer.qiniu.com/) 官方开发者文档\n* [七牛JavaScript版SDK](https://developer.qiniu.com/kodo/sdk/1283/javascript) Web端JavaScript版SDK文档\n* [七牛PHP版SDK](https://developer.qiniu.com/kodo/sdk/1241/php) 服务端PHP版SDK文档\n\n\n## 沟通交流\n 1. 如果您有什么问题，可提issues，也可加QQ群讨论：613102022。\n 2. 更新日志：可查看下一章更新记录。\n 3. 广告：个人官方博客：https://sailengsi.com 交流技术，交流心得。\n\n \n \n\n\n",
    "deployedAt": "2017-09-09T12:14:29.132Z"
  }, {
    "name": "star-initReact-example",
    "git_url": "git://github.com/pookpal/star-initReact-example.git",
    "author": "pookpal",
    "description": "demo with react,ant-design,redux,react-router,webpack,babel",
    "tags": ["antd", "redux", "react"],
    "coverPicture": "https://ucarecdn.com/286f108f-63b8-4477-8c65-4ec919390c7f/",
    "readme": "# star-initReact-example\n\nA demo with star-initReact-example\n\n\n##效果截图\n>* 首页\n\n![首页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/1.png)\n\n>* 列表页\n\n![播放页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/2.png)\n\n>* 弹框\n\n![播放页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/3.png)\n\n>* 表格组件\n\n![播放页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/4.png)\n\n>* echart\n\n![播放页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/5.png)\n\n\n## 使用技术和实现功能\n1. webpack + React +React-router + React-redux +ES6 + ant-design\n2. React热替换\n3. 国际化\n4. 整合Echart\n5. 自定义ant-design主题和局部样式\n\n\n\n## 测试账号\nadmin\n123456\n\n## 准备环境\n\n```bash\n\n$ git clone git@github.com:pookpal/star-initReact-example.git\n$ npm install -g webpack rimraf \n$ cd star-initReact-example\n$ npm install\n\n//mac环境下命令行\n$ npm run dev:mac   //MAC环境下面打包部署命令\n$ npm run build:mac  // MAC环境下打包部署命令\n\n\n//window环境下命令行\nD:\\www\\star-initReact-example> npm run dev:win   // window下面开发调试\nD:\\www\\star-initReact-example> npm run build:win  // window环境下打包部署命令\n\n\n\n\n\n\n\n```\n\n想要更好的开发体验，还需安装两个 Chrome 插件：[Redux DevTools](https://chrome.google.com/webstore/detail/lmhkpmbekcpmknklioeibfkpmmfibljd) 和 [LiveReload](https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei) 。\n\n## 启动调试\n\n```bash\n### 此演示脚本为mac环境下运行\n$ npm run dev:mac\n```\n\n## 打包构建代码\n\n```bash\n### 此演示脚本为mac环境下运行\n// 生成国际化文件供配置\n$ npm run build:i18n-js:mac\n\n// 配置国际化文件后打包构建生成最终部署代码\n$ npm run build:mac\n\n```\n\n## 目录结构\n\n```\n.\n├── /dist/               # 构建输出的文件会在这里\n├── /scripts/            # 生成国际化配置文件脚本\n├── /node_modules/       # 第三方类库和工具\n├── /src/                # 应用源码\n├ ├── /assets/           # 静态资源文件\n│ ├── /components/       # React components\n│ ├── /entries/          # 应用入口\n│ ├── /locale/           # 国际化配置文件,会自动生成\n│ ├── /route/            # 路由信息\n│ ├── /store/            # redux \n│ ├── /styles/           # 全局样式 \n│ ├── /temp/             # 临时文件，会自动生成\n│ └── /views/            # 页面组件\n├── .babelrc             # 配置 babel\n├── webpack.config.js    # 扩展开发调试 webpack 配置\n├── webpack.production.config.js    # 扩展打包构建 webpack 配置\n└── package.json         # 配置入口文件、依赖和 scripts\n```\n\n\n## 内置类库\n\n- [react](https://github.com/facebook/react)\n- [redux](https://github.com/reactjs/redux)\n- [redux-actions](https://github.com/acdlite/redux-actions)\n- [react-router](https://github.com/reactjs/react-router)\n- [classnames](https://github.com/JedWatson/classnames)\n- [react-router](https://github.com/reactjs/react-router)\n- [react-router-redux](https://github.com/reactjs/react-router-redux)\n\n## 工具特性\n\n热替换和 LiveReload\n\n> 基于 [Webpack Vanilla HMR](https://webpack.github.io/docs/hot-module-replacement-with-webpack.html)，支持 `components`, `router`, `views` 目录的模块热替换，其余目录的修改则会自动刷新页面。\n\n> CSS 的自动刷新需通过 [LiveReload](https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei) Chrome 插件配合使用。\n\n> - [Why Vanilla HMR](https://github.com/reactjs/redux/pull/1455)\n\n支持 css-modules\n\n> src/components和src/views中的 less 文件会被解析为 css-modules\n\n## License\nMIT\n\n",
    "deployedAt": "2017-05-16T03:56:36.098Z"
  }, {
    "name": "ts-dva",
    "git_url": "git://github.com/huang6349/ts-dva.git",
    "author": "huang6349",
    "description": "TypeScript + dva + Antd",
    "tags": ["typescript", "dva", "antd"],
    "coverPicture": "https://ucarecdn.com/a042cff3-e056-422d-abec-fef52d1e2a0b/",
    "readme": "ts-dva\n=======\n\n* Language:TypeScript\n\n* Framework:dva\n\n* UI:ant.design\n\nTable of Contents\n-------\n[目录]\n\n* [Install[安装依赖]](#install)\n* [Usage[用法]](#usage)\n* [Demo[项目演示]](#demo)\n* [Links[教程链接]](#links)\n* [Thank[致谢]](#thank)\n* [License[开源协议]](#license)\n\nInstall\n-------\n[安装依赖]\n\n```bash\nnode >= 4.2.0\n```\n```bash\n$ npm install -g typescript\n$ npm install\n```\n\n[可选操作]\n```bash\n$ npm install -g typings\n```\n\nUsage\n-------\n[用法]\n\n#### development[开发环境]\n\n```bash\n$ npm start\n```\n访问：[http://127.0.0.1:8989](http://127.0.0.1:8989)\n\n#### test[测试环境]\n\n```bash\n$ npm run test\n```\n\n#### production[生产环境]\n\n```bash\n$ npm run build\n```\n\nDemo\n-------\n[项目演示]\n\n登录1\n![登录1](https://github.com/huang6349/Pictures/blob/master/ts-dva/2016-10-27_111333.png)\n\n布局1\n\n![布局1](https://github.com/huang6349/Pictures/blob/master/ts-dva/2016-10-14_163215.png)\n\nLinks\n-------\n[教程链接]\n\n* [Microsoft/TypeScript](https://github.com/Microsoft/TypeScript)\n* [facebook/react](https://github.com/facebook/react)\n* [dvajs/dva](https://github.com/dvajs/dva)\n* [ant-design/ant-design](https://github.com/ant-design/ant-design)\n* [sorrycc/dva-boilerplate-typescript](https://github.com/sorrycc/dva-boilerplate-typescript)\n\nThank\n-------\n[致谢]\n* [sorrycc](https://github.com/sorrycc)\n\nLicense\n-------\n[开源协议]\n\n[MIT](https://tldrlegal.com/license/mit-license)",
    "deployedAt": "2017-05-16T03:48:26.866Z"
  }, {
    "name": "ts-react-webpack",
    "git_url": "git://github.com/YDJ-FE/ts-react-webpack.git",
    "author": "YDJ-FE",
    "description": "a starter-template with typescript, react, mobx and webpack...",
    "tags": ["typescript", "react", "webpack", "mobx", "babel7"],
    "coverPicture": "https://ucarecdn.com/7c72dccf-48db-472c-a70a-63d90dbc31a4/",
    "deployedAt": "2019-02-11T09:10:24.482Z"
  }, {
    "name": "ts_react_mobx",
    "git_url": "git://github.com/dreambo8563/ts_react_mobx.git",
    "author": "dreambo8563",
    "description": "ts+react +mobx boilerplate",
    "tags": ["webpack3", "antd", "ts", "mobx", "react16"],
    "coverPicture": "https://ucarecdn.com/6b1e5f7c-3422-4f46-8618-404d87ebf654/",
    "readme": "## Setup\n\n```\n$ npm install\n```\n\n## Running\n\n```\n$ npm start\n```\n\n## Build\n\n```\n$ npm run build\n```\n\n## Rules:\n\n全局 css /src/assets/main.css\n\n## Router 命名规则\n\n/系统/模块/页面../:id 等前面 3 层要确定,为了左侧导航能够相应变化\n\n## 路由定义在\n\n/src/app/routers\n\n## store 定义\n\n/src/app/stores\n\n* AppStore 存储应用级别的数据 如 loading\n* RouterStore 针对组件中需要应用路由是注入\n\n- 其他: 为需要进行组件通信时的页面级别数据\n\n## 容器类组件\n\n/src/app/containers\n\n* 不同页面的最外层组件结构 同 系统 -> 模块 -> 页面如 sales -> orders -> List 页面\n\n#layouts\n存放大型布局的容器组件\n\n* SidebarLayout 所有系统内部要展示左侧导航的布局\n\n## 组件库\n\n/src/app/components\n\n不同模块组件需建立自己的目录 如 Module1 下的 component1 建立 index.tsx 和 style.css\n\n不同模块间通用组件直接放在 Common 目录下\n\n## constants\n\n* stores - store 名字\n* text 所有文字 -便于以后国际化,统一处理\n* api - 所有 api\n* url - 路由地址相关\n\n## utils 帮助函数\n\n* 请求相关\n* loadComponentXXX 异步加载组件\n",
    "deployedAt": "2018-04-26T02:08:25.578Z"
  }, {
    "name": "ttk-app-core",
    "git_url": "git://github.com/thethreekingdoms/ttk-app-core.git",
    "author": "thethreekingdoms",
    "description": "前端框架（基于react+redux）",
    "tags": ["antd", "react", "redux", "react-redux", "react-router", "ttk"],
    "coverPicture": "https://ucarecdn.com/b90f216f-037c-4750-9004-99d9e6bd5640/",
    "deployedAt": "2019-08-01T01:04:22.616Z"
  }, {
    "name": "typerx",
    "git_url": "git://github.com/vellengs/typerx.git",
    "author": "vellengs",
    "description": "A lightweight typescript annotation based MEAN(Mongodb Express Angular2+ Nodejs).",
    "tags": ["angular", "typescript ", "nodejs", "mongodb", "antd", "admin ", "ng-zorro", "ng-alain", "swagger", "rest api", "express"],
    "coverPicture": "https://ucarecdn.com/38122a83-8c72-4995-ae46-101975bdba31/",
    "deployedAt": "2018-05-26T10:59:10.748Z"
  }, {
    "name": "typescript-react-hot-reload",
    "git_url": "git://github.com/chunliu/typescript-react-hot-reload.git",
    "author": "chunliu",
    "description": "This is a scaffold with react, redux, antd and typescript",
    "tags": ["typescript", "react", "redux", "webpack-dev-server"],
    "coverPicture": "https://ucarecdn.com/020d75e1-0ff2-464f-8165-3887e30d5fe7/",
    "readme": "# typescript-react-hot-reload\n\nThis is a very simple template for creating React applications with TypeScript. It is configured with hot loader and webpack dev server to allow changes to be live reloaded. \n\nThis template is based on the following packages: \n\n* [webpack](https://webpack.js.org/)\n* [webpack-dev-server](https://github.com/webpack/webpack-dev-server)\n* [react-hot-loader](https://github.com/gaearon/react-hot-loader)\n* [awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader)\n* [antd](https://ant.design/docs/react/introduce)\n\nOther reference:\n\n* [TypeScript document](https://www.typescriptlang.org/docs/handbook/react-&-webpack.html)\n* [Hot Module Replacement in webpack](https://webpack.js.org/guides/hmr-react/)\n\nHow to use this template: \n\n```\ngit clone https://github.com/chunliu/typescript-react-hot-reload.git\nnpm install\nnpm start\n```",
    "deployedAt": "2017-08-15T14:43:53.518Z"
  }, {
    "name": "ui",
    "git_url": "git://github.com/tianzx/ui.git",
    "author": "tianzx",
    "description": "frontend project separate from backend",
    "tags": ["react", "antd"],
    "coverPicture": null,
    "readme": "## React Ant.Design Admin UI\n\n## Features\n\n- [React](https://facebook.github.io/react/)\n- [Redux](https://github.com/reactjs/redux)\n- [Ant.Design](http://ant.design/)\n- [Babel](https://babeljs.io/)\n- [webpack2](https://webpack.github.io/)\n- [mocha](https://mochajs.org/)\n- [enzyme](https://github.com/airbnb/enzyme)\n- [Travis](https://travis-ci.org/)\n- [Docker](https://www.docker.com/)\n\n## Getting Started\n\nJust clone the repo and install the necessary node modules:\n\n```shell\n$ git clone https://github.com/tianzx/ui.git\n$ cd ui\n$ npm install\n$ npm start\n```\n\n## Run test spec\n\n```shell\n$ npm run test\n```\n\n## Run production build\n\n```shell\n$ vi /etc/environment and export NODE_ENV='production'\n$ npm run build\n```\n\nin your local machine\n```shell\n$ scp -r localPath/ui/dist/  remotePath:ui\n```\n\nin your remote machine\n```shell\n$ mv dist/* ./\n$ cnpm install pm2 -g \n$ pm2 start server.js\n```\n\nnotation: before execute the command ,you must ensure you have executed the command\n\n```shell\n$ cnpm install rimraf -g\n```\n\n## NOTICE\n\n### replace npm with cnpm(in China)\n&emsp;&emsp;&emsp;&emsp;https://npm.taobao.org/\n### add n to admin nodejs version\n&emsp;&emsp;&emsp;&emsp;https://github.com/tj/n\n\n### update npm \n&emsp;&emsp;&emsp;&emsp;cnpm update -g npm\n",
    "deployedAt": "2017-05-24T13:36:54.544Z"
  }, {
    "name": "umi-antd-pro",
    "git_url": "git://github.com/xiaohuoni/umi-antd-pro.git",
    "author": "xiaohuoni",
    "description": "antd-design-pro 的 umi版本",
    "tags": ["umi", "admin", "antd-design-pro"],
    "coverPicture": "https://ucarecdn.com/a6f70746-3528-4696-821a-f487d9de329e/",
    "readme": "[English](./README.en-us.md) | 简体中文\n# Umi Antd Pro\n所有的组件和页面逻辑保留 Ant Design Pro的设计。\n\n## 增加\n- dva.js onError 和 initialState\n- 增加配置服务器地址，支持build之后可预览\n- 增加[antd-pro-server](https://github.com/xiaohuoni/antd-pro-server)，主要修改.umirc.mock.js\n\n# Ant Design Pro\n\n[![](https://img.shields.io/travis/ant-design/ant-design-pro.svg?style=flat-square)](https://travis-ci.org/ant-design/ant-design-pro) [![Build status](https://ci.appveyor.com/api/projects/status/67fxu2by3ibvqtat/branch/master?svg=true)](https://ci.appveyor.com/project/afc163/ant-design-pro/branch/master)  [![Gitter](https://badges.gitter.im/ant-design/ant-design-pro.svg)](https://gitter.im/ant-design/ant-design-pro?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n开箱即用的中台前端/设计解决方案。\n\n![](https://gw.alipayobjects.com/zos/rmsportal/xEdBqwSzvoSapmnSnYjU.png)\n\n- 预览：http://preview.pro.ant.design\n- 首页：http://pro.ant.design/index-cn\n- 使用文档：http://pro.ant.design/docs/getting-started-cn\n- 更新日志: http://pro.ant.design/docs/changelog-cn\n- 常见问题：http://pro.ant.design/docs/faq-cn\n- 国内镜像：http://ant-design-pro.gitee.io\n\n## 特性\n\n- :gem: **优雅美观**：基于 Ant Design 体系精心设计\n- :triangular_ruler: **常见设计模式**：提炼自中后台应用的典型页面和场景\n- :rocket: **最新技术栈**：使用 React/dva/antd 等前端前沿技术开发\n- :iphone: **响应式**：针对不同屏幕大小设计\n- :art: **主题**：可配置的主题满足多样化的品牌诉求\n- :globe_with_meridians: **国际化**：内建业界通用的国际化方案\n- :gear: **最佳实践**：良好的工程实践助您持续产出高质量代码\n- :1234: **Mock 数据**：实用的本地数据调试方案\n- :white_check_mark: **UI 测试**：自动化测试保障前端产品质量\n\n## 模板\n\n```\n- Dashboard\n  - 分析页\n  - 监控页\n  - 工作台\n- 表单页\n  - 基础表单页\n  - 分步表单页\n  - 高级表单页\n- 列表页\n  - 查询表格\n  - 标准列表\n  - 卡片列表\n  - 搜索列表（项目/应用/文章）\n- 详情页\n  - 基础详情页\n  - 高级详情页\n- 结果\n  - 成功页\n  - 失败页\n- 异常\n  - 403 无权限\n  - 404 找不到\n  - 500 服务器出错\n- 帐户\n  - 登录\n  - 注册\n  - 注册成功\n```\n\n## 使用\n\n```bash\n$ git clone https://github.com/ant-design/ant-design-pro.git --depth=1\n$ cd ant-design-pro\n$ npm install\n$ npm start         # 访问 http://localhost:8000\n```\n\n也可以使用集成化的 [ant-design-pro-cli](https://github.com/ant-design/ant-design-pro-cli) 工具。\n\n```bash\n$ npm install ant-design-pro-cli -g\n$ mkdir pro-demo && cd pro-demo\n$ pro new\n```\n\n更多信息请参考 [使用文档](http://pro.ant.design/docs/getting-started)。\n\n## 兼容性\n\n现代浏览器及 IE11。\n\n## 参与贡献\n\n我们非常欢迎你的贡献，你可以通过以下方式和我们一起共建 :smiley:：\n\n- 在你的公司或个人项目中使用 Ant Design Pro。\n- 通过 [Issue](http://github.com/ant-design/ant-design-pro/issues) 报告 bug 或进行咨询。\n- 提交 [Pull Request](http://github.com/ant-design/ant-design-pro/pulls) 改进 Pro 的代码。\n",
    "deployedAt": "2018-05-09T09:57:52.113Z"
  }, {
    "name": "vue-admin",
    "git_url": "git://github.com/mowatermelon/vue-admin.git",
    "author": "mowatermelon",
    "description": "基于axios，bootstrap，vue-router，webpack和express等等的基础vue后台控制模板，默认有三个颜色主题可切换。",
    "tags": ["axios", "vue2", "vue-router", "webpack", "vue-admin", "express", "mo-theme", "vuex", "localstorage"],
    "coverPicture": "https://ucarecdn.com/0d2abe1a-4605-4050-9474-2199bdb355d9/",
    "readme": "# vue-admin\n\n基于axios，bootstrap，vue-router，webpack和express等等的基础vue后台控制模板，默认有三个颜色主题可切换。\n\n# 项目优势\n\n- login页和register页共用一个组件页，做了相关的输入数据验证，并写了相关提示。\n- 默认提供login登陆状态管理。\n- 注册完成之后直接登陆，不用再跳转到登录页去登陆。\n- 比较简洁的页面设计。\n- 颜色主题三色可选(blue,pue,dark)，默认主题是blue。\n- 按照尽可能分离的逻辑，对于各组件之间进行进行了解耦设计。\n- 路由跳转实时在网址上记录当前激活的面板情况。\n- 对于项目模板做了响应式设计，保证在不同屏幕状态下的良好阅读体验。\n- 精简的依赖包，删除了测试相关依赖包。\n- 精简的指令，删除了测试相关指令。\n- 降低了对于网络环境不太好的情况，资源请求压力。\n- 左侧面板数据支持灵活配置，数据修改路径是项目根文件下`static/mock/leftPanelData.json`。\n- 因为集成了axios，更方便请求其他接口数据。\n\n# 运行项目\n\n``` bash\n# install dependencies\n\n  # Good network environment\n    # install dependencies by cnpm or npm\n    cnpm i\n\n  # Bad network environment\n    # global install yarn\n    cnpm i yarn -g\n\n    # install dependencies by yarn\n    yarn install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n\n# view after build effect at localhost:8089\nnpm run dist\n\n```\n\n# 项目结构图\n\n```text\n├── build                                       // webpack配置文件\n├── config                                      // 基本配置\n│   │   ├── dev.env.js                              // 开发环境配置文件\n│   │   ├── index.js                              // 总配置文件\n│   │   ├── prod.env.js                              // 生产环境配置文件\n│   │   ├── test.env.js                              // 测试环境配置文件\n├── dist                                        // 上线项目文件，放在服务器即可正常访问\n├── screenshots                                 // 项目截图\n│   ├── login.png                              // 登陆页面显示效果\n│   ├── register.png                              // 注册页面显示效果\n│   ├── large-pure.png                              // 大屏状态下紫色主题显示效果\n│   ├── middle-blue.png                              // 中屏状态下蓝色主题显示效果\n│   ├── small-dark.png                              // 小屏状态下黑色主题显示效果\n├── src                                         // 源码目录\n│   ├── asset                              // 项目相关设计资源\n│   │   ├── css                              // 项目相关样式设计文件\n│   │   │   ├── app.scss                              // 项目主要的样式文件，整合了其他样式文件板块，最后在app.vue进行引入\n│   │   │   ├── framework.scss                              // 项目主要的框架样式文件\n│   │   │   ├── reset.scss                              // 项目自定义的重置样式文件\n│   │   │   ├── theme.scss                              // 项目主要的主题样式文件\n│   │   │   ├── tool.scss                              // 项目主要的通用帮助样式文件\n│   │   ├── js                              // 项目相关样式设计文件\n│   │   │   ├── router\n│   │   │   │   └── index.js                           // 路由配置\n│   │   │   ├── vuex                                      // vuex的状态管理\n│   │   │   │   ├── store.js                            // 引用vuex，创建store\n│   ├── components                              // 组件\n│   │   ├── Footer.vue                    // 底部公共组件\n│   │   ├── Header.vue                     // 头部公共组件\n│   │   ├── LeftAside.vue                 // 左侧边公共组件\n│   ├── layouts\n│   │   ├── HeaderAsideFooterResponsiveLayout                    // 头部左侧边底部响应布局\n│   │   │   ├── Layout.vue                     // 响应布局组件\n│   ├── pages\n│   │   ├── Feature.vue                    // 描述当前项目实现功能页\n│   │   ├── Hello.vue                     // 欢迎页\n│   │   ├── Login.vue                 // 登录页\n│   ├── service                                 // 数据交互统一调配\n│   │   ├── getData.js                          // 获取数据的统一调配文件，对接口进行统一管理\n│   ├── App.vue                                 // 页面入口文件\n│   ├── main.js                                 // 程序入口文件，加载各种公共组件\n├── static                                         // 源码目录\n│   ├── plugins                              // 引用的插件\n│   │   ├── css                              // 引用第三方的样式文件\n│   │   ├── font                              // 引用第三方的字体文件\n│   ├── mock                              // 数据模拟\n│   │   ├── completeList.json                              // 当前项目已经完成的功能数据\n│   │   ├── leftAsideData.json                             // 项目中左侧面板的数据文件\n├── index.html                                  // 入口html文件\n.\n\n```\n\n# 项目效果图\n\n![登陆页面显示效果](screenshots/login.png)\n![注册页面显示效果](screenshots/register.png)\n![大屏状态下紫色主题显示效果](screenshots/large-pure.png)\n![中屏状态下蓝色主题显示效果](screenshots/middle-blue.png)\n![小屏状态下黑色主题显示效果](screenshots/small-dark.png)\n\n# 修改主题效果\n\n放上现有颜色配置\n\n```scss\n@charset \"utf-8\";\n\n//文件路径  当前项目根文件下  src/assets/css/thems.scss\n\n$linear-start:#1861D5;//高亮效果的渐变开始颜色\n$linear-end:#3080FE;//高亮效果的渐变结束颜色\n\n$theme_blue_color: #5bc0de; // 页面蓝色主题 --默认色\n$theme_blue_normal_color:#1861D5; // 页面蓝色主题 --未激活色\n$theme_blue_active_color: #31708f; // 页面蓝色主题 --默激活色\n\n$theme_pure_color:#8f88f9; //页面紫色主题 --默认色\n$theme_pure_normal_color:#4772d9; //页面紫色主题 --未激活色\n$theme_pure_active_color:#b1c3ef; //页面紫色主题 --默激活色\n\n$theme_dark_color:#323a45; //页面灰色主题 --默认色\n$theme_dark_normal_color:rgb(123, 123, 123); //页面灰色主题 --未激活色\n$theme_dark_active_color:#83878a; //页面灰色主题色\n```\n",
    "deployedAt": "2018-03-15T07:48:46.545Z"
  }, {
    "name": "vue-manage-system",
    "git_url": "git://github.com/sunguide/vue-manage-system.git",
    "author": "sunguide",
    "description": "The web management system solution based on Vue2 and Element UI.",
    "tags": [],
    "coverPicture": null,
    "readme": "# manage-system #\r\n基于Vue.js 2.x系列 + Element UI 的后台管理系统解决方案。[线上地址](http://work.omwteam.com/)\r\n\r\n[English document](https://github.com/lin-xin/manage-system/blob/master/README_EN.md)\r\n\r\n## 前言 ##\r\n之前在公司用了Vue + Element组件库做了个后台管理系统，基本很多组件可以直接引用组件库的，但是也有一些需求无法满足。像图片裁剪上传、富文本编辑器、图表等这些在后台管理系统中很常见的功能，就需要引用其他的组件才能完成。从寻找组件，到使用组件的过程中，遇到了很多问题，也积累了宝贵的经验。所以我就把开发这个后台管理系统的经验，总结成这个后台管理系统解决方案。\r\n\r\n该方案作为一套多功能的后台框架模板，适用于绝大部分的后台管理系统（Web Management System）开发。基于vue.js,使用vue-cli脚手架快速生成项目目录，引用Element UI组件库，方便开发快速简洁好看的组件。分离颜色样式，支持手动切换主题色，而且很方便使用自定义主题色。\r\n\r\n## 功能 ##\r\n- [x] Element UI\r\n- [x] 登录/注销\r\n- [x] 表格\r\n- [x] 表单\r\n- [x] 图表 :bar_chart:\r\n- [x] 富文本编辑器\r\n- [x] markdown编辑器\r\n- [x] 图片拖拽/裁剪上传\r\n- [x] 支持切换主题色 :sparkles:\r\n- [x] 列表拖拽排序\r\n\r\n\r\n## 目录结构介绍 ##\r\n\r\n\t|-- build                            // webpack配置文件\r\n\t|-- config                           // 项目打包路径\r\n\t|-- src                              // 源码目录\r\n\t|   |-- components                   // 组件\r\n\t|       |-- common                   // 公共组件\r\n\t|           |-- Header.vue           // 公共头部\r\n\t|           |-- Home.vue           \t // 公共路由入口\r\n\t|           |-- Sidebar.vue          // 公共左边栏\r\n\t|\t\t|-- page                   \t // 主要路由页面\r\n\t|           |-- BaseCharts.vue       // 基础图表\r\n\t|           |-- BaseForm.vue         // 基础表单\r\n\t|           |-- BaseTable.vue        // 基础表格\r\n\t|           |-- Login.vue          \t // 登录\r\n\t|           |-- Markdown.vue         // markdown组件\r\n\t|           |-- Readme.vue           // 自述组件\r\n\t|           |-- Upload.vue           // 图片上传\r\n\t|           |-- VueEditor.vue        // 富文本编辑器\r\n\t|           |-- VueTable.vue         // vue表格组件\r\n\t|   |-- App.vue                      // 页面入口文件\r\n\t|   |-- main.js                      // 程序入口文件，加载各种公共组件\r\n\t|-- .babelrc                         // ES6语法编译配置\r\n\t|-- .editorconfig                    // 代码编写规格\r\n\t|-- .gitignore                       // 忽略的文件\r\n\t|-- index.html                       // 入口html文件\r\n\t|-- package.json                     // 项目及工具的依赖配置文件\r\n\t|-- README.md                        // 说明\r\n\r\n\r\n## 安装步骤 ##\r\n\r\n\tgit clone https://github.com/lin-xin/manage-system.git      // 把模板下载到本地\r\n\tcd manage-system    // 进入模板目录\r\n\tnpm install         // 安装项目依赖，等待安装完成之后\r\n\r\n## 本地开发 ##\r\n\r\n\t// 开启服务器，浏览器访问 http://localhost:8080\r\n\tnpm run dev\r\n\r\n## 构建生产 ##\r\n\r\n\t// 执行构建命令，生成的dist文件夹放在服务器下即可访问\r\n\tnpm run build\r\n\r\n## 组件使用说明与演示 ##\r\n\r\n### vue-schart ###\r\nvue.js封装sChart.js的图表组件。访问地址：[vue-schart](https://github.com/linxin/vue-schart)\r\n<p><a href=\"https://www.npmjs.com/package/vue-schart\"><img src=\"https://img.shields.io/npm/dm/vue-schart.svg\" alt=\"Downloads\"></a></p>\r\n\r\n```JavaScript\r\n<template>\r\n    <div>\r\n        <schart :canvasId=\"canvasId\"\r\n\t\t\t\t:type=\"type\"\r\n\t\t\t\t:width=\"width\"\r\n\t\t\t\t:height=\"height\"\r\n\t\t\t\t:data=\"data\"\r\n\t\t\t\t:options=\"options\"\r\n\t\t></schart>\r\n    </div>\r\n</template>\r\n\t\r\n<script>\r\n    import Schart from 'vue-schart';        // 导入Schart组件\r\n    export default {\r\n        data: function(){\r\n            return {\r\n                canvasId: 'myCanvas',       // canvas的id\r\n                type: 'bar',                // 图表类型\r\n                width: 500,\r\n                height: 400,\r\n                data: [\r\n                    {name: '2014', value: 1342},\r\n                    {name: '2015', value: 2123},\r\n                    {name: '2016', value: 1654},\r\n                    {name: '2017', value: 1795},\r\n                ],\r\n                options: {                  // 图表可选参数\r\n                    title: 'Total sales of stores in recent years'\r\n                }\r\n            }\r\n        },\r\n        components: {\r\n            Schart\r\n        }\r\n    }\r\n</script>\r\n```\r\n\r\n### element-ui ###\r\n一套基于vue.js2.0的桌面组件库。访问地址：[element](http://element.eleme.io/#/zh-CN/component/layout)\r\n\r\n### vue-datasource ###\r\n一个用于动态创建表格的vue.js服务端组件。访问地址：[vue-datasource](https://github.com/coderdiaz/vue-datasource)\r\n\r\n\r\n\r\n### Vue-Quill-Editor ###\r\n基于Quill、适用于Vue2的富文本编辑器。访问地址：[vue-quill-editor](https://github.com/surmon-china/vue-quill-editor)\r\n\r\n### Vue-SimpleMDE ###\r\nVue.js的Markdown Editor组件。访问地址：[Vue-SimpleMDE](https://github.com/F-loat/vue-simplemde)\r\n\r\n\r\n\r\n### Vue-Core-Image-Upload ###\r\n一款轻量级的vue上传插件，支持裁剪。访问地址：[Vue-Core-Image-Upload](https://github.com/Vanthink-UED/vue-core-image-upload)\r\n\r\n\r\n\r\n\r\n## 其他注意事项 ##\r\n### 一、如果我不想用到上面的某些组件呢，那我怎么在模板中删除掉不影响到其他功能呢？ ###\r\n\r\n举个栗子，我不想用 vue-datasource 这个组件，那我需要分四步走。\r\n\r\n第一步：删除该组件的路由，在目录 src/router/index.js 中，找到引入改组件的路由，删除下面这段代码。\r\n\r\n```JavaScript\r\n{\r\n    path: '/vuetable',\r\n    component: resolve => require(['../components/page/VueTable.vue'], resolve)     // vue-datasource组件\r\n},\r\n```\r\n\r\n第二步：删除引入该组件的文件。在目录 src/components/page/ 删除 VueTable.vue 文件。\r\n\r\n第三步：删除该页面的入口。在目录 src/components/common/Sidebar.vue 中，找到该入口，删除下面这段代码。\r\n\t\r\n```HTML\r\n<el-menu-item index=\"vuetable\">Vue表格组件</el-menu-item>\r\n```\r\n\r\n第四步：卸载该组件。执行以下命令：\r\n\t\r\n\tnpm un vue-datasource -S\r\n\r\n完成。\r\n\r\n### 二、如何切换主题色呢？ ###\r\n\r\n第一步：打开 src/main.js 文件，找到引入 element 样式的地方，换成浅绿色主题。\r\n\r\n```javascript\r\nimport 'element-ui/lib/theme-default/index.css';    // 默认主题\r\n// import '../static/css/theme-green/index.css';       // 浅绿色主题\r\n```\r\n\r\n第二步：打开 src/App.vue 文件，找到 style 标签引入样式的地方，切换成浅绿色主题。\r\n\r\n```javascript\r\n@import \"../static/css/main.css\";\r\n@import \"../static/css/color-dark.css\";     /*深色主题*/\r\n/*@import \"../static/css/theme-green/color-green.css\";   !*浅绿色主题*!*/\r\n```\r\n\r\n第三步：打开 src/components/common/Sidebar.vue 文件，找到 el-menu 标签，把 theme=\"dark\" 去掉即可。\r\n\r\n## 项目截图 ##\r\n### 默认皮肤 ###\r\n\r\n![Image text](https://github.com/lin-xin/manage-system/raw/master/screenshots/wms1.png)\r\n\r\n### 浅绿色皮肤 ###\r\n\r\n![Image text](https://github.com/lin-xin/manage-system/raw/master/screenshots/wms2.png)",
    "deployedAt": "2017-06-25T13:49:12.542Z"
  }, {
    "name": "vue-mobile",
    "git_url": "git://github.com/GavinZhuLei/vue-mobile.git",
    "author": "GavinZhuLei",
    "description": "vue移动web通用脚手架",
    "tags": ["vue", "mobile"],
    "coverPicture": null,
    "readme": "# vue-mobile\n\n> 基于vue-cli扩展的用于移动端web开发的通用脚手架\n\n## 特性\n\n- 多入口打包：实现项目中遇到单页和多页同时存在的情况\n- 通过命令快速生成模块代码：统一模块代码规范，一个module对应一个入口，不用在webpack单独配置入口\n- 统一解决移动端点击延迟\n- sass支持\n- 自动添加浏览器前缀\n\n## 代码目录\n\n```js\n+-- build/                ---webpack打包文件目录\n|   --- entry.js               ---获取入口文件\n|   --- module.js              ---生成module模块代码，一个module对应一个入口\n|   --- plugins.js             ---开发环境webpack插件配置\n|   --- plugins.prod.js        ---生产环境webpack插件配置\n|   --- webpack.base.conf.js   ---webpack loader配置\n|   --- ...\n+-- config/               ---webpack打包配置目录\n+-- src/                  ---源代码目录\n|   +-- assets/                ---资源存放目录\n|   +-- components/            ---公用组件\n|   +-- modules/               ---项目模块目录\n|   |   +-- moudule1                ---项目模块，对应一个入口，可以通过命令自动创建\n|   |   |   +-- router/                   ---路由配置\n|   |   |   +-- views/                    ---视图目录\n|   |   |   --- App.vue                   ---根组件\n|   |   |   --- main.js                   ---模块入口文件\n+-- template/             ---模块模板文件目录\n--- index.html            ---html模板文件\n```\n\n## 安装运行\n\n``` bash\n# 安装依赖\nnpm install\n\n# 使用热加载模式访问（开发环境）\nnpm run dev\n\n# 生产环境打包压缩（生产环境）\nnpm run build\n\n# 创建模块，自动在src/modules/下生成模板代码和入口文件\nnpm run module\n```\n",
    "deployedAt": "2018-04-09T02:38:24.025Z"
  }, {
    "name": "vue-taobao",
    "git_url": "git://github.com/sosout/vue-taobao.git",
    "author": "sosout",
    "description": "基于 vue2 + vuex + mint-ui 构建移动单页面应用",
    "tags": ["vue", "vuex", "mint-ui"],
    "coverPicture": null,
    "readme": "# vue-taobao\n\n> 基于 vue2 + vuex 构建一个单页面应用\n\n## 快速开始\n\n``` bash\n# 安装依赖\nnpm install\n\n# 使用热加载模式访问 localhost:8888 \nnpm run dev\n\n# 生产环境打包压缩\nnpm run build\n\n# 生成并查看性能分析报告\nnpm run build --report\n\n# 进行单元测试\nnpm run unit\n\n# 运行 e2e 测试\nnpm run e2e\n\n# 运行所有测试\nnpm test\n```",
    "deployedAt": "2017-11-23T15:34:37.433Z"
  }, {
    "coverPicture": null,
    "name": "vue-vant-template",
    "git_url": "git://github.com/hubery3721/vue-vant-template.git",
    "author": "hubery3721",
    "description": "A custom vue mobile project template",
    "tags": ["vue", "vuex", "vant-ui", "axios", "sass", "underscore", "momentjs"],
    "deployedAt": "2019-10-31T17:41:58.226Z"
  }, {
    "name": "vue2-element",
    "git_url": "git://github.com/sosout/vue2-element.git",
    "author": "sosout",
    "description": "vue2-element管理系统简单demo",
    "tags": ["vue"],
    "coverPicture": "https://ucarecdn.com/a10da881-44c4-4ced-82a5-6f2e89b82c54/",
    "readme": "# vue2-element管理系统简单demo\n\n> 您有什么功能可以给我留言，我来实现！\n\n## 相关推荐\n\n[基于react + redux + immutable + less + ES6/7 + webpack2.0 + fetch + react-router + antd(1.x)实现的SPA后台管理系统模板](https://github.com/sosout/react-antd)\n\n## 最新更新\n>  项目初始化\n\n## 前言\n>  本工程主要基于vue + vuex + less + ES6/7 + webpack + fetch + vue-router + store + element-ui实现的SPA后台管理系统模板。\n\n>  如果觉得不错的话，请star一下吧 😊\n\n>  编码时间：8:00——9:30, 下班时间——24:00，其他时间要工作。代码未优化，处女座代码必须要优化。由于代码延后，先向大家说声抱歉。您有什么问题可以私信我segmentfault。\n\n[线上demo](http://elm.sosout.com/)\n\n## 关于我自己\n\n>  使用技术： vue + vuex + less + ES6/7 + webpack + fetch + vue-router + store + element-ui\n\n>  项目说明： 此项目是本人空余时间搭建的。希望大家提供宝贵的意见和建议，谢谢。\n\n>  JS/React/Vue/Angular前端群： 599399742\n\n>  邮&emsp;&emsp;&ensp;箱： sosout@139.com\n\n>  个人网站： http://www.sosout.com/\n\n>  个人博客： http://blog.sosout.com/\n\n>  个人简书： http://www.jianshu.com/users/23b9a23b8849/latest_articles\n\n>  segmentfault：https://segmentfault.com/u/sosout\n\n### 下载\n\n```\n# git clone\n\ngit clone https://github.com/sosout/vue2-element.git\n\ncd vue2-element\n```\n\n### 安装\n```bush\n\n// 安装前请先确保已安装node和npm\n\n// 安装成功后,再安装依赖，如果之前有用npm安装过，请先删掉node_modules\nyarn install\n```\n### 运行\n\n``` bash\n\n# 开发版本，用于开发使用，热加载\nyarn run dev\n\n# 生产版本，对代码进行混淆压缩，提取公共代码，分离css文件\nyarn run build\n\n# 生产版本并查看包分析器报告\nyarn run build --report\n\n# 单元测试\nyarn run unit\n\n# e2e测试\nyarn run e2e\n\n# 所有测试\nyarn test\n```\n\n### 访问\n在浏览器地址栏输入[http://localhost:8080/](http://localhost:8080/)\n\n# vuex简单应用\n",
    "deployedAt": "2017-11-23T15:20:38.859Z"
  }, {
    "coverPicture": "https://ucarecdn.com/82dbc792-2824-47a0-9313-7345ee86be20/",
    "name": "vueScaffold",
    "git_url": "git://github.com/dyywork/vueScaffold.git",
    "author": "dyywork",
    "description": "vue cli3.0 搭建的移动端应用脚手架 ",
    "tags": ["http://dingyongya.club:3001/#/login"],
    "deployedAt": "2019-10-11T07:27:34.200Z"
  }, {
    "name": "wallpaper-app",
    "git_url": "git://github.com/sppsun/wallpaper-app.git",
    "author": "sppsun",
    "description": "A react native app based on expo, dva, etc.",
    "tags": ["react-native", "expo", "dva", "react-native-elements"],
    "coverPicture": "https://ucarecdn.com/4f0b4b92-5094-4855-b028-35e00f143110/",
    "deployedAt": "2019-02-02T06:26:58.823Z"
  }, {
    "coverPicture": "https://ucarecdn.com/a1290dff-6d06-41d9-b042-b44e78c0b530/",
    "name": "want",
    "git_url": "git://github.com/way-jm/want.git",
    "author": "way-jm",
    "description": "A enterprise applications as a React boilerplate based React & Ant-Design",
    "tags": ["react ", "typescript", "ant-desgin"],
    "deployedAt": "2020-04-27T08:08:14.300Z"
  }, {
    "coverPicture": null,
    "name": "webpack4-react-redux-router-antd",
    "git_url": "git://github.com/xiaopingzhang0207/webpack4-react-redux-router-antd.git",
    "author": "xiaopingzhang0207",
    "description": "webpack4-react-redux-router-antd 脚手架",
    "tags": ["webpack axios redux react-route4 "],
    "deployedAt": "2019-02-21T06:56:50.658Z"
  }, {
    "coverPicture": "https://ucarecdn.com/bc88b656-32e9-4794-8f62-ef07589a5aa1/",
    "name": "yukino",
    "git_url": "git://github.com/Shino161/yukino.git",
    "author": "Shino161",
    "description": "🌟React + Antd 前端脚手架 🌟",
    "tags": ["React", "Antd", "轻量", "Docker"],
    "deployedAt": "2019-09-09T02:33:05.494Z"
  }]
}